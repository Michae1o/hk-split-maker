(()=>{"use strict";var __webpack_modules__={44:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/errors.js\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nclass ErrorHandler {\n    constructor() {\n        this.listeners = [];\n        this.unexpectedErrorHandler = function (e) {\n            setTimeout(() => {\n                if (e.stack) {\n                    throw new Error(e.message + \'\\n\\n\' + e.stack);\n                }\n                throw e;\n            }, 0);\n        };\n    }\n    emit(e) {\n        this.listeners.forEach((listener) => {\n            listener(e);\n        });\n    }\n    onUnexpectedError(e) {\n        this.unexpectedErrorHandler(e);\n        this.emit(e);\n    }\n    // For external errors, we don\'t want the listeners to be called\n    onUnexpectedExternalError(e) {\n        this.unexpectedErrorHandler(e);\n    }\n}\nconst errorHandler = new ErrorHandler();\nfunction onUnexpectedError(e) {\n    // ignore errors from cancelled promises\n    if (!isPromiseCanceledError(e)) {\n        errorHandler.onUnexpectedError(e);\n    }\n    return undefined;\n}\nfunction onUnexpectedExternalError(e) {\n    // ignore errors from cancelled promises\n    if (!isPromiseCanceledError(e)) {\n        errorHandler.onUnexpectedExternalError(e);\n    }\n    return undefined;\n}\nfunction transformErrorForSerialization(error) {\n    if (error instanceof Error) {\n        let { name, message } = error;\n        const stack = error.stacktrace || error.stack;\n        return {\n            $isError: true,\n            name,\n            message,\n            stack\n        };\n    }\n    // return as is\n    return error;\n}\nconst canceledName = \'Canceled\';\n/**\n * Checks if the given error is a promise in canceled state\n */\nfunction isPromiseCanceledError(error) {\n    return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n/**\n * Returns an error that signals cancellation.\n */\nfunction canceled() {\n    const error = new Error(canceledName);\n    error.name = error.message;\n    return error;\n}\nfunction errors_illegalArgument(name) {\n    if (name) {\n        return new Error(`Illegal argument: ${name}`);\n    }\n    else {\n        return new Error(\'Illegal argument\');\n    }\n}\nfunction illegalState(name) {\n    if (name) {\n        return new Error(`Illegal state: ${name}`);\n    }\n    else {\n        return new Error(\'Illegal state\');\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/iterator.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Iterable;\n(function (Iterable) {\n    function is(thing) {\n        return thing && typeof thing === \'object\' && typeof thing[Symbol.iterator] === \'function\';\n    }\n    Iterable.is = is;\n    const _empty = Object.freeze([]);\n    function empty() {\n        return _empty;\n    }\n    Iterable.empty = empty;\n    function* single(element) {\n        yield element;\n    }\n    Iterable.single = single;\n    function from(iterable) {\n        return iterable || _empty;\n    }\n    Iterable.from = from;\n    function isEmpty(iterable) {\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\n    }\n    Iterable.isEmpty = isEmpty;\n    function first(iterable) {\n        return iterable[Symbol.iterator]().next().value;\n    }\n    Iterable.first = first;\n    function some(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    Iterable.some = some;\n    function find(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return element;\n            }\n        }\n        return undefined;\n    }\n    Iterable.find = find;\n    function* filter(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                yield element;\n            }\n        }\n    }\n    Iterable.filter = filter;\n    function* map(iterable, fn) {\n        for (const element of iterable) {\n            yield fn(element);\n        }\n    }\n    Iterable.map = map;\n    function* concat(...iterables) {\n        for (const iterable of iterables) {\n            for (const element of iterable) {\n                yield element;\n            }\n        }\n    }\n    Iterable.concat = concat;\n    function* concatNested(iterables) {\n        for (const iterable of iterables) {\n            for (const element of iterable) {\n                yield element;\n            }\n        }\n    }\n    Iterable.concatNested = concatNested;\n    function reduce(iterable, reducer, initialValue) {\n        let value = initialValue;\n        for (const element of iterable) {\n            value = reducer(value, element);\n        }\n        return value;\n    }\n    Iterable.reduce = reduce;\n    /**\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n     */\n    function* slice(arr, from, to = arr.length) {\n        if (from < 0) {\n            from += arr.length;\n        }\n        if (to < 0) {\n            to += arr.length;\n        }\n        else if (to > arr.length) {\n            to = arr.length;\n        }\n        for (; from < to; from++) {\n            yield arr[from];\n        }\n    }\n    Iterable.slice = slice;\n    /**\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\n     * and an iterable for the rest of the elements.\n     */\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\n        const consumed = [];\n        if (atMost === 0) {\n            return [consumed, iterable];\n        }\n        const iterator = iterable[Symbol.iterator]();\n        for (let i = 0; i < atMost; i++) {\n            const next = iterator.next();\n            if (next.done) {\n                return [consumed, Iterable.empty()];\n            }\n            consumed.push(next.value);\n        }\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\n    }\n    Iterable.consume = consume;\n    /**\n     * Returns whether the iterables are the same length and all items are\n     * equal using the comparator function.\n     */\n    function equals(a, b, comparator = (at, bt) => at === bt) {\n        const ai = a[Symbol.iterator]();\n        const bi = b[Symbol.iterator]();\n        while (true) {\n            const an = ai.next();\n            const bn = bi.next();\n            if (an.done !== bn.done) {\n                return false;\n            }\n            else if (an.done) {\n                return true;\n            }\n            else if (!comparator(an.value, bn.value)) {\n                return false;\n            }\n        }\n    }\n    Iterable.equals = equals;\n})(Iterable || (Iterable = {}));\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\n\n/**\n * Enables logging of potentially leaked disposables.\n *\n * A disposable is considered leaked if it is not disposed or not registered as the child of\n * another disposable. This tracking is very simple an only works for classes that either\n * extend Disposable or use a DisposableStore. This means there are a lot of false positives.\n */\nconst TRACK_DISPOSABLES = false;\nlet disposableTracker = null;\nif (TRACK_DISPOSABLES) {\n    const __is_disposable_tracked__ = \'__is_disposable_tracked__\';\n    disposableTracker = new class {\n        trackDisposable(x) {\n            const stack = new Error(\'Potentially leaked disposable\').stack;\n            setTimeout(() => {\n                if (!x[__is_disposable_tracked__]) {\n                    console.log(stack);\n                }\n            }, 3000);\n        }\n        markTracked(x) {\n            if (x && x !== lifecycle_Disposable.None) {\n                try {\n                    x[__is_disposable_tracked__] = true;\n                }\n                catch (_a) {\n                    // noop\n                }\n            }\n        }\n    };\n}\nfunction markTracked(x) {\n    if (!disposableTracker) {\n        return;\n    }\n    disposableTracker.markTracked(x);\n}\nfunction trackDisposable(x) {\n    if (!disposableTracker) {\n        return x;\n    }\n    disposableTracker.trackDisposable(x);\n    return x;\n}\nclass MultiDisposeError extends Error {\n    constructor(errors) {\n        super(`Encountered errors while disposing of store. Errors: [${errors.join(\', \')}]`);\n        this.errors = errors;\n    }\n}\nfunction isDisposable(thing) {\n    return typeof thing.dispose === \'function\' && thing.dispose.length === 0;\n}\nfunction dispose(arg) {\n    if (Iterable.is(arg)) {\n        let errors = [];\n        for (const d of arg) {\n            if (d) {\n                markTracked(d);\n                try {\n                    d.dispose();\n                }\n                catch (e) {\n                    errors.push(e);\n                }\n            }\n        }\n        if (errors.length === 1) {\n            throw errors[0];\n        }\n        else if (errors.length > 1) {\n            throw new MultiDisposeError(errors);\n        }\n        return Array.isArray(arg) ? [] : arg;\n    }\n    else if (arg) {\n        markTracked(arg);\n        arg.dispose();\n        return arg;\n    }\n}\nfunction combinedDisposable(...disposables) {\n    disposables.forEach(markTracked);\n    return toDisposable(() => dispose(disposables));\n}\nfunction toDisposable(fn) {\n    const self = trackDisposable({\n        dispose: () => {\n            markTracked(self);\n            fn();\n        }\n    });\n    return self;\n}\nclass DisposableStore {\n    constructor() {\n        this._toDispose = new Set();\n        this._isDisposed = false;\n    }\n    /**\n     * Dispose of all registered disposables and mark this object as disposed.\n     *\n     * Any future disposables added to this object will be disposed of on `add`.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        markTracked(this);\n        this._isDisposed = true;\n        this.clear();\n    }\n    /**\n     * Dispose of all registered disposables but do not mark this object as disposed.\n     */\n    clear() {\n        try {\n            dispose(this._toDispose.values());\n        }\n        finally {\n            this._toDispose.clear();\n        }\n    }\n    add(t) {\n        if (!t) {\n            return t;\n        }\n        if (t === this) {\n            throw new Error(\'Cannot register a disposable on itself!\');\n        }\n        markTracked(t);\n        if (this._isDisposed) {\n            if (!DisposableStore.DISABLE_DISPOSED_WARNING) {\n                console.warn(new Error(\'Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!\').stack);\n            }\n        }\n        else {\n            this._toDispose.add(t);\n        }\n        return t;\n    }\n}\nDisposableStore.DISABLE_DISPOSED_WARNING = false;\nclass lifecycle_Disposable {\n    constructor() {\n        this._store = new DisposableStore();\n        trackDisposable(this);\n    }\n    dispose() {\n        markTracked(this);\n        this._store.dispose();\n    }\n    _register(t) {\n        if (t === this) {\n            throw new Error(\'Cannot register a disposable on itself!\');\n        }\n        return this._store.add(t);\n    }\n}\nlifecycle_Disposable.None = Object.freeze({ dispose() { } });\n/**\n * Manages the lifecycle of a disposable value that may be changed.\n *\n * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can\n * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.\n */\nclass MutableDisposable {\n    constructor() {\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    get value() {\n        return this._isDisposed ? undefined : this._value;\n    }\n    set value(value) {\n        var _a;\n        if (this._isDisposed || value === this._value) {\n            return;\n        }\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n        if (value) {\n            markTracked(value);\n        }\n        this._value = value;\n    }\n    clear() {\n        this.value = undefined;\n    }\n    dispose() {\n        var _a;\n        this._isDisposed = true;\n        markTracked(this);\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._value = undefined;\n    }\n}\nclass ImmortalReference {\n    constructor(object) {\n        this.object = object;\n    }\n    dispose() { }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/platform.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nconst LANGUAGE_DEFAULT = \'en\';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isIOS = false;\nlet _locale = undefined;\nlet _language = (/* unused pure expression or super */ null && (LANGUAGE_DEFAULT));\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst globals = (typeof self === \'object\' ? self : typeof __webpack_require__.g === \'object\' ? __webpack_require__.g : {});\nlet nodeProcess = undefined;\nif (typeof globals.vscode !== \'undefined\' && typeof globals.vscode.process !== \'undefined\') {\n    // Native environment (sandboxed)\n    nodeProcess = globals.vscode.process;\n}\nelse if (typeof process !== \'undefined\') {\n    // Native environment (non-sandboxed)\n    nodeProcess = process;\n}\nconst isElectronRenderer = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === \'string\' && nodeProcess.type === \'renderer\';\nconst isElectronSandboxed = isElectronRenderer && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.sandboxed);\nconst browserCodeLoadingCacheStrategy = (() => {\n    // Always enabled when sandbox is enabled\n    if (isElectronSandboxed) {\n        return \'bypassHeatCheck\';\n    }\n    // Otherwise, only enabled conditionally\n    const env = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.env[\'VSCODE_BROWSER_CODE_LOADING\'];\n    if (typeof env === \'string\') {\n        if (env === \'none\' || env === \'code\' || env === \'bypassHeatCheck\' || env === \'bypassHeatCheckAndEagerCompile\') {\n            return env;\n        }\n        return \'bypassHeatCheck\';\n    }\n    return undefined;\n})();\nconst isPreferringBrowserCodeLoad = typeof browserCodeLoadingCacheStrategy === \'string\';\n// Web environment\nif (typeof navigator === \'object\' && !isElectronRenderer) {\n    _userAgent = navigator.userAgent;\n    _isWindows = _userAgent.indexOf(\'Windows\') >= 0;\n    _isMacintosh = _userAgent.indexOf(\'Macintosh\') >= 0;\n    _isIOS = (_userAgent.indexOf(\'Macintosh\') >= 0 || _userAgent.indexOf(\'iPad\') >= 0 || _userAgent.indexOf(\'iPhone\') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n    _isLinux = _userAgent.indexOf(\'Linux\') >= 0;\n    _isWeb = true;\n    _locale = navigator.language;\n    _language = _locale;\n}\n// Native environment\nelse if (typeof nodeProcess === \'object\') {\n    _isWindows = (nodeProcess.platform === \'win32\');\n    _isMacintosh = (nodeProcess.platform === \'darwin\');\n    _isLinux = (nodeProcess.platform === \'linux\');\n    _isLinuxSnap = _isLinux && !!nodeProcess.env[\'SNAP\'] && !!nodeProcess.env[\'SNAP_REVISION\'];\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    const rawNlsConfig = nodeProcess.env[\'VSCODE_NLS_CONFIG\'];\n    if (rawNlsConfig) {\n        try {\n            const nlsConfig = JSON.parse(rawNlsConfig);\n            const resolved = nlsConfig.availableLanguages[\'*\'];\n            _locale = nlsConfig.locale;\n            // VSCode\'s default language is \'en\'\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\n        }\n        catch (e) {\n        }\n    }\n    _isNative = true;\n}\n// Unknown environment\nelse {\n    console.error(\'Unable to resolve platform.\');\n}\nlet _platform = 0 /* Web */;\nif (_isMacintosh) {\n    _platform = 1 /* Mac */;\n}\nelse if (_isWindows) {\n    _platform = 3 /* Windows */;\n}\nelse if (_isLinux) {\n    _platform = 2 /* Linux */;\n}\nconst isWindows = _isWindows;\nconst isMacintosh = _isMacintosh;\nconst isLinux = (/* unused pure expression or super */ null && (_isLinux));\nconst isNative = (/* unused pure expression or super */ null && (_isNative));\nconst platform_isWeb = (/* unused pure expression or super */ null && (_isWeb));\nconst isIOS = (/* unused pure expression or super */ null && (_isIOS));\nconst userAgent = (/* unused pure expression or super */ null && (_userAgent));\nconst setImmediate = (function defineSetImmediate() {\n    if (globals.setImmediate) {\n        return globals.setImmediate.bind(globals);\n    }\n    if (typeof globals.postMessage === \'function\' && !globals.importScripts) {\n        let pending = [];\n        globals.addEventListener(\'message\', (e) => {\n            if (e.data && e.data.vscodeSetImmediateId) {\n                for (let i = 0, len = pending.length; i < len; i++) {\n                    const candidate = pending[i];\n                    if (candidate.id === e.data.vscodeSetImmediateId) {\n                        pending.splice(i, 1);\n                        candidate.callback();\n                        return;\n                    }\n                }\n            }\n        });\n        let lastId = 0;\n        return (callback) => {\n            const myId = ++lastId;\n            pending.push({\n                id: myId,\n                callback: callback\n            });\n            globals.postMessage({ vscodeSetImmediateId: myId }, \'*\');\n        };\n    }\n    if (typeof (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.nextTick) === \'function\') {\n        return nodeProcess.nextTick.bind(nodeProcess);\n    }\n    const _promise = Promise.resolve();\n    return (callback) => _promise.then(callback);\n})();\nconst OS = (_isMacintosh || _isIOS ? 2 /* Macintosh */ : (_isWindows ? 1 /* Windows */ : 3 /* Linux */));\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nfunction isLittleEndian() {\n    if (!_isLittleEndianComputed) {\n        _isLittleEndianComputed = true;\n        const test = new Uint8Array(2);\n        test[0] = 1;\n        test[1] = 2;\n        const view = new Uint16Array(test.buffer);\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\n    }\n    return _isLittleEndian;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/types.js\n/**\n * @returns whether the provided parameter is a JavaScript Array or not.\n */\nfunction isArray(array) {\n    return Array.isArray(array);\n}\n/**\n * @returns whether the provided parameter is a JavaScript String or not.\n */\nfunction isString(str) {\n    return (typeof str === \'string\');\n}\n/**\n *\n * @returns whether the provided parameter is of type `object` but **not**\n *\t`null`, an `array`, a `regexp`, nor a `date`.\n */\nfunction isObject(obj) {\n    // The method can\'t do a type cast since there are type (like strings) which\n    // are subclasses of any put not positvely matched by the function. Hence type\n    // narrowing results in wrong results.\n    return typeof obj === \'object\'\n        && obj !== null\n        && !Array.isArray(obj)\n        && !(obj instanceof RegExp)\n        && !(obj instanceof Date);\n}\n/**\n * In **contrast** to just checking `typeof` this will return `false` for `NaN`.\n * @returns whether the provided parameter is a JavaScript Number or not.\n */\nfunction isNumber(obj) {\n    return (typeof obj === \'number\' && !isNaN(obj));\n}\n/**\n * @returns whether the provided parameter is a JavaScript Boolean or not.\n */\nfunction isBoolean(obj) {\n    return (obj === true || obj === false);\n}\n/**\n * @returns whether the provided parameter is undefined.\n */\nfunction isUndefined(obj) {\n    return (typeof obj === \'undefined\');\n}\n/**\n * @returns whether the provided parameter is undefined or null.\n */\nfunction isUndefinedOrNull(obj) {\n    return (isUndefined(obj) || obj === null);\n}\nfunction assertType(condition, type) {\n    if (!condition) {\n        throw new Error(type ? `Unexpected type, expected \'${type}\'` : \'Unexpected type\');\n    }\n}\n/**\n * Asserts that the argument passed in is neither undefined nor null.\n */\nfunction assertIsDefined(arg) {\n    if (isUndefinedOrNull(arg)) {\n        throw new Error(\'Assertion Failed: argument is undefined or null\');\n    }\n    return arg;\n}\n/**\n * @returns whether the provided parameter is a JavaScript Function or not.\n */\nfunction isFunction(obj) {\n    return (typeof obj === \'function\');\n}\nfunction validateConstraints(args, constraints) {\n    const len = Math.min(args.length, constraints.length);\n    for (let i = 0; i < len; i++) {\n        validateConstraint(args[i], constraints[i]);\n    }\n}\nfunction validateConstraint(arg, constraint) {\n    if (isString(constraint)) {\n        if (typeof arg !== constraint) {\n            throw new Error(`argument does not match constraint: typeof ${constraint}`);\n        }\n    }\n    else if (isFunction(constraint)) {\n        try {\n            if (arg instanceof constraint) {\n                return;\n            }\n        }\n        catch (_a) {\n            // ignore\n        }\n        if (!isUndefinedOrNull(arg) && arg.constructor === constraint) {\n            return;\n        }\n        if (constraint.length === 1 && constraint.call(undefined, arg) === true) {\n            return;\n        }\n        throw new Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);\n    }\n}\nfunction getAllPropertyNames(obj) {\n    let res = [];\n    let proto = Object.getPrototypeOf(obj);\n    while (Object.prototype !== proto) {\n        res = res.concat(Object.getOwnPropertyNames(proto));\n        proto = Object.getPrototypeOf(proto);\n    }\n    return res;\n}\nfunction getAllMethodNames(obj) {\n    const methods = [];\n    for (const prop of getAllPropertyNames(obj)) {\n        if (typeof obj[prop] === \'function\') {\n            methods.push(prop);\n        }\n    }\n    return methods;\n}\nfunction createProxyObject(methodNames, invoke) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    let result = {};\n    for (const methodName of methodNames) {\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n/**\n * Converts null to undefined, passes all other values through.\n */\nfunction withNullAsUndefined(x) {\n    return x === null ? undefined : x;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\nconst INITIALIZE = \'$initialize\';\nlet webWorkerWarningLogged = false;\nfunction logOnceWebWorkerWarning(err) {\n    if (!isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn(\'Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq\');\n    }\n    console.warn(err.message);\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(method, args) {\n        let req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send({\n                vsWorker: this._workerId,\n                req: req,\n                method: method,\n                args: args\n            });\n        });\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    _handleMessage(msg) {\n        if (msg.seq) {\n            let replyMessage = msg;\n            if (!this._pendingReplies[replyMessage.seq]) {\n                console.warn(\'Got reply to unknown seq\');\n                return;\n            }\n            let reply = this._pendingReplies[replyMessage.seq];\n            delete this._pendingReplies[replyMessage.seq];\n            if (replyMessage.err) {\n                let err = replyMessage.err;\n                if (replyMessage.err.$isError) {\n                    err = new Error();\n                    err.name = replyMessage.err.name;\n                    err.message = replyMessage.err.message;\n                    err.stack = replyMessage.err.stack;\n                }\n                reply.reject(err);\n                return;\n            }\n            reply.resolve(replyMessage.res);\n            return;\n        }\n        let requestMessage = msg;\n        let req = requestMessage.req;\n        let result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send({\n                vsWorker: this._workerId,\n                seq: req,\n                res: r,\n                err: undefined\n            });\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = transformErrorForSerialization(e.detail);\n            }\n            this._send({\n                vsWorker: this._workerId,\n                seq: req,\n                res: undefined,\n                err: transformErrorForSerialization(e)\n            });\n        });\n    }\n    _send(msg) {\n        let transfer = [];\n        if (msg.req) {\n            const m = msg;\n            for (let i = 0; i < m.args.length; i++) {\n                if (m.args[i] instanceof ArrayBuffer) {\n                    transfer.push(m.args[i]);\n                }\n            }\n        }\n        else {\n            const m = msg;\n            if (m.res instanceof ArrayBuffer) {\n                transfer.push(m.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nclass SimpleWorkerClient extends (/* unused pure expression or super */ null && (Disposable)) {\n    constructor(workerFactory, moduleId, host) {\n        super();\n        let lazyProxyReject = null;\n        this._worker = this._register(workerFactory.create(\'vs/base/common/worker/simpleWorker\', (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            if (lazyProxyReject) {\n                lazyProxyReject(err);\n            }\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => {\n                if (typeof host[method] !== \'function\') {\n                    return Promise.reject(new Error(\'Missing method \' + method + \' on main thread host.\'));\n                }\n                try {\n                    return Promise.resolve(host[method].apply(host, args));\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        if (typeof self.require !== \'undefined\' && typeof self.require.getConfig === \'function\') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = self.require.getConfig();\n        }\n        else if (typeof self.requirejs !== \'undefined\') {\n            // Get the configuration from requirejs\n            loaderConfiguration = self.requirejs.s.contexts._.config;\n        }\n        const hostMethods = types.getAllMethodNames(host);\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            moduleId,\n            hostMethods,\n        ]);\n        // Create proxy to loaded code\n        const proxyMethodRequest = (method, args) => {\n            return this._request(method, args);\n        };\n        this._lazyProxy = new Promise((resolve, reject) => {\n            lazyProxyReject = reject;\n            this._onModuleLoaded.then((availableMethods) => {\n                resolve(types.createProxyObject(availableMethods, proxyMethodRequest));\n            }, (e) => {\n                reject(e);\n                this._onError(\'Worker failed to load \' + moduleId, e);\n            });\n        });\n    }\n    getProxyObject() {\n        return this._lazyProxy;\n    }\n    _request(method, args) {\n        return new Promise((resolve, reject) => {\n            this._onModuleLoaded.then(() => {\n                this._protocol.sendMessage(method, args).then(resolve, reject);\n            }, reject);\n        });\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\n/**\n * Worker side\n */\nclass SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => this._handleMessage(method, args)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(method, args) {\n        if (method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2], args[3]);\n        }\n        if (!this._requestHandler || typeof this._requestHandler[method] !== \'function\') {\n            return Promise.reject(new Error(\'Missing requestHandler or method: \' + method));\n        }\n        try {\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\n        this._protocol.setWorkerId(workerId);\n        const proxyMethodRequest = (method, args) => {\n            return this._protocol.sendMessage(method, args);\n        };\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\n            return Promise.resolve(getAllMethodNames(this._requestHandler));\n        }\n        if (loaderConfig) {\n            // Remove \'baseUrl\', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== \'undefined\') {\n                delete loaderConfig[\'baseUrl\'];\n            }\n            if (typeof loaderConfig.paths !== \'undefined\') {\n                if (typeof loaderConfig.paths.vs !== \'undefined\') {\n                    delete loaderConfig.paths[\'vs\'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n                // don\'t use, it has been destroyed during serialize\n                delete loaderConfig[\'trustedTypesPolicy\'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            self.require.config(loaderConfig);\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            self.require([moduleId], (module) => {\n                this._requestHandler = module.create(hostProxy);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve(getAllMethodNames(this._requestHandler));\n            }, reject);\n        });\n    }\n}\n/**\n * Called on the worker side\n */\nfunction create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Represents information about a specific difference between two sequences.\n */\nclass DiffChange {\n    /**\n     * Constructs a new DiffChange with the given sequence information\n     * and content.\n     */\n    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\n        //Debug.Assert(originalLength > 0 || modifiedLength > 0, "originalLength and modifiedLength cannot both be <= 0");\n        this.originalStart = originalStart;\n        this.originalLength = originalLength;\n        this.modifiedStart = modifiedStart;\n        this.modifiedLength = modifiedLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the original sequence.\n     */\n    getOriginalEnd() {\n        return this.originalStart + this.originalLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the modified sequence.\n     */\n    getModifiedEnd() {\n        return this.modifiedStart + this.modifiedLength;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/strings.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction isFalsyOrWhitespace(str) {\n    if (!str || typeof str !== \'string\') {\n        return true;\n    }\n    return str.trim().length === 0;\n}\nconst _formatRegexp = /{(\\d+)}/g;\n/**\n * Helper to produce a string with a variable number of arguments. Insert variable segments\n * into the string using the {n} notation where N is the index of the argument following the string.\n * @param value string to which formatting is applied\n * @param args replacements for {n}-entries\n */\nfunction format(value, ...args) {\n    if (args.length === 0) {\n        return value;\n    }\n    return value.replace(_formatRegexp, function (match, group) {\n        const idx = parseInt(group, 10);\n        return isNaN(idx) || idx < 0 || idx >= args.length ?\n            match :\n            args[idx];\n    });\n}\n/**\n * Converts HTML characters inside the string to use entities instead. Makes the string safe from\n * being used e.g. in HTMLElement.innerHTML.\n */\nfunction strings_escape(html) {\n    return html.replace(/[<>&]/g, function (match) {\n        switch (match) {\n            case \'<\': return \'&lt;\';\n            case \'>\': return \'&gt;\';\n            case \'&\': return \'&amp;\';\n            default: return match;\n        }\n    });\n}\n/**\n * Escapes regular expression characters in a given string\n */\nfunction escapeRegExpCharacters(value) {\n    return value.replace(/[\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\[\\]\\(\\)]/g, \'\\\\$&\');\n}\n/**\n * Removes all occurrences of needle from the beginning and end of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim (default is a blank)\n */\nfunction trim(haystack, needle = \' \') {\n    const trimmed = ltrim(haystack, needle);\n    return rtrim(trimmed, needle);\n}\n/**\n * Removes all occurrences of needle from the beginning of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim\n */\nfunction ltrim(haystack, needle) {\n    if (!haystack || !needle) {\n        return haystack;\n    }\n    const needleLen = needle.length;\n    if (needleLen === 0 || haystack.length === 0) {\n        return haystack;\n    }\n    let offset = 0;\n    while (haystack.indexOf(needle, offset) === offset) {\n        offset = offset + needleLen;\n    }\n    return haystack.substring(offset);\n}\n/**\n * Removes all occurrences of needle from the end of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim\n */\nfunction rtrim(haystack, needle) {\n    if (!haystack || !needle) {\n        return haystack;\n    }\n    const needleLen = needle.length, haystackLen = haystack.length;\n    if (needleLen === 0 || haystackLen === 0) {\n        return haystack;\n    }\n    let offset = haystackLen, idx = -1;\n    while (true) {\n        idx = haystack.lastIndexOf(needle, offset - 1);\n        if (idx === -1 || idx + needleLen !== offset) {\n            break;\n        }\n        if (idx === 0) {\n            return \'\';\n        }\n        offset = idx;\n    }\n    return haystack.substring(0, offset);\n}\nfunction convertSimple2RegExpPattern(pattern) {\n    return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, \'\\\\$&\').replace(/[\\*]/g, \'.*\');\n}\nfunction stripWildcards(pattern) {\n    return pattern.replace(/\\*/g, \'\');\n}\nfunction createRegExp(searchString, isRegex, options = {}) {\n    if (!searchString) {\n        throw new Error(\'Cannot create regex from empty string\');\n    }\n    if (!isRegex) {\n        searchString = escapeRegExpCharacters(searchString);\n    }\n    if (options.wholeWord) {\n        if (!/\\B/.test(searchString.charAt(0))) {\n            searchString = \'\\\\b\' + searchString;\n        }\n        if (!/\\B/.test(searchString.charAt(searchString.length - 1))) {\n            searchString = searchString + \'\\\\b\';\n        }\n    }\n    let modifiers = \'\';\n    if (options.global) {\n        modifiers += \'g\';\n    }\n    if (!options.matchCase) {\n        modifiers += \'i\';\n    }\n    if (options.multiline) {\n        modifiers += \'m\';\n    }\n    if (options.unicode) {\n        modifiers += \'u\';\n    }\n    return new RegExp(searchString, modifiers);\n}\nfunction regExpLeadsToEndlessLoop(regexp) {\n    // Exit early if it\'s one of these special cases which are meant to match\n    // against an empty string\n    if (regexp.source === \'^\' || regexp.source === \'^$\' || regexp.source === \'$\' || regexp.source === \'^\\\\s*$\') {\n        return false;\n    }\n    // We check against an empty string. If the regular expression doesn\'t advance\n    // (e.g. ends in an endless loop) it will match an empty string.\n    const match = regexp.exec(\'\');\n    return !!(match && regexp.lastIndex === 0);\n}\nfunction regExpFlags(regexp) {\n    return (regexp.global ? \'g\' : \'\')\n        + (regexp.ignoreCase ? \'i\' : \'\')\n        + (regexp.multiline ? \'m\' : \'\')\n        + (regexp /* standalone editor compilation */.unicode ? \'u\' : \'\');\n}\nfunction splitLines(str) {\n    return str.split(/\\r\\n|\\r|\\n/);\n}\n/**\n * Returns first index of the string that is not whitespace.\n * If string is empty or contains only whitespaces, returns -1\n */\nfunction firstNonWhitespaceIndex(str) {\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chCode = str.charCodeAt(i);\n        if (chCode !== 32 /* Space */ && chCode !== 9 /* Tab */) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Returns the leading whitespace of the string.\n * If the string contains only whitespaces, returns entire string\n */\nfunction getLeadingWhitespace(str, start = 0, end = str.length) {\n    for (let i = start; i < end; i++) {\n        const chCode = str.charCodeAt(i);\n        if (chCode !== 32 /* Space */ && chCode !== 9 /* Tab */) {\n            return str.substring(start, i);\n        }\n    }\n    return str.substring(start, end);\n}\n/**\n * Returns last index of the string that is not whitespace.\n * If string is empty or contains only whitespaces, returns -1\n */\nfunction lastNonWhitespaceIndex(str, startIndex = str.length - 1) {\n    for (let i = startIndex; i >= 0; i--) {\n        const chCode = str.charCodeAt(i);\n        if (chCode !== 32 /* Space */ && chCode !== 9 /* Tab */) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction compare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\n    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n        let codeA = a.charCodeAt(aStart);\n        let codeB = b.charCodeAt(bStart);\n        if (codeA < codeB) {\n            return -1;\n        }\n        else if (codeA > codeB) {\n            return 1;\n        }\n    }\n    const aLen = aEnd - aStart;\n    const bLen = bEnd - bStart;\n    if (aLen < bLen) {\n        return -1;\n    }\n    else if (aLen > bLen) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareIgnoreCase(a, b) {\n    return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);\n}\nfunction compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\n    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n        let codeA = a.charCodeAt(aStart);\n        let codeB = b.charCodeAt(bStart);\n        if (codeA === codeB) {\n            // equal\n            continue;\n        }\n        const diff = codeA - codeB;\n        if (diff === 32 && isUpperAsciiLetter(codeB)) { //codeB =[65-90] && codeA =[97-122]\n            continue;\n        }\n        else if (diff === -32 && isUpperAsciiLetter(codeA)) { //codeB =[97-122] && codeA =[65-90]\n            continue;\n        }\n        if (isLowerAsciiLetter(codeA) && isLowerAsciiLetter(codeB)) {\n            //\n            return diff;\n        }\n        else {\n            return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);\n        }\n    }\n    const aLen = aEnd - aStart;\n    const bLen = bEnd - bStart;\n    if (aLen < bLen) {\n        return -1;\n    }\n    else if (aLen > bLen) {\n        return 1;\n    }\n    return 0;\n}\nfunction isLowerAsciiLetter(code) {\n    return code >= 97 /* a */ && code <= 122 /* z */;\n}\nfunction isUpperAsciiLetter(code) {\n    return code >= 65 /* A */ && code <= 90 /* Z */;\n}\nfunction isAsciiLetter(code) {\n    return isLowerAsciiLetter(code) || isUpperAsciiLetter(code);\n}\nfunction equalsIgnoreCase(a, b) {\n    return a.length === b.length && doEqualsIgnoreCase(a, b);\n}\nfunction doEqualsIgnoreCase(a, b, stopAt = a.length) {\n    for (let i = 0; i < stopAt; i++) {\n        const codeA = a.charCodeAt(i);\n        const codeB = b.charCodeAt(i);\n        if (codeA === codeB) {\n            continue;\n        }\n        // a-z A-Z\n        if (isAsciiLetter(codeA) && isAsciiLetter(codeB)) {\n            const diff = Math.abs(codeA - codeB);\n            if (diff !== 0 && diff !== 32) {\n                return false;\n            }\n        }\n        // Any other charcode\n        else {\n            if (String.fromCharCode(codeA).toLowerCase() !== String.fromCharCode(codeB).toLowerCase()) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction startsWithIgnoreCase(str, candidate) {\n    const candidateLength = candidate.length;\n    if (candidate.length > str.length) {\n        return false;\n    }\n    return doEqualsIgnoreCase(str, candidate, candidateLength);\n}\n/**\n * @returns the length of the common prefix of the two strings.\n */\nfunction commonPrefixLength(a, b) {\n    let i, len = Math.min(a.length, b.length);\n    for (i = 0; i < len; i++) {\n        if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n            return i;\n        }\n    }\n    return len;\n}\n/**\n * @returns the length of the common suffix of the two strings.\n */\nfunction commonSuffixLength(a, b) {\n    let i, len = Math.min(a.length, b.length);\n    const aLastIndex = a.length - 1;\n    const bLastIndex = b.length - 1;\n    for (i = 0; i < len; i++) {\n        if (a.charCodeAt(aLastIndex - i) !== b.charCodeAt(bLastIndex - i)) {\n            return i;\n        }\n    }\n    return len;\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction isHighSurrogate(charCode) {\n    return (0xD800 <= charCode && charCode <= 0xDBFF);\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction isLowSurrogate(charCode) {\n    return (0xDC00 <= charCode && charCode <= 0xDFFF);\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction computeCodePoint(highSurrogate, lowSurrogate) {\n    return ((highSurrogate - 0xD800) << 10) + (lowSurrogate - 0xDC00) + 0x10000;\n}\n/**\n * get the code point that begins at offset `offset`\n */\nfunction getNextCodePoint(str, len, offset) {\n    const charCode = str.charCodeAt(offset);\n    if (isHighSurrogate(charCode) && offset + 1 < len) {\n        const nextCharCode = str.charCodeAt(offset + 1);\n        if (isLowSurrogate(nextCharCode)) {\n            return computeCodePoint(charCode, nextCharCode);\n        }\n    }\n    return charCode;\n}\n/**\n * get the code point that ends right before offset `offset`\n */\nfunction getPrevCodePoint(str, offset) {\n    const charCode = str.charCodeAt(offset - 1);\n    if (isLowSurrogate(charCode) && offset > 1) {\n        const prevCharCode = str.charCodeAt(offset - 2);\n        if (isHighSurrogate(prevCharCode)) {\n            return computeCodePoint(prevCharCode, charCode);\n        }\n    }\n    return charCode;\n}\nfunction nextCharLength(str, offset) {\n    const graphemeBreakTree = GraphemeBreakTree.getInstance();\n    const initialOffset = offset;\n    const len = str.length;\n    const initialCodePoint = getNextCodePoint(str, len, offset);\n    offset += (initialCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\n    let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(initialCodePoint);\n    while (offset < len) {\n        const nextCodePoint = getNextCodePoint(str, len, offset);\n        const nextGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(nextCodePoint);\n        if (breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n        }\n        offset += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\n        graphemeBreakType = nextGraphemeBreakType;\n    }\n    return (offset - initialOffset);\n}\nfunction prevCharLength(str, offset) {\n    const graphemeBreakTree = GraphemeBreakTree.getInstance();\n    const initialOffset = offset;\n    const initialCodePoint = getPrevCodePoint(str, offset);\n    offset -= (initialCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\n    let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(initialCodePoint);\n    while (offset > 0) {\n        const prevCodePoint = getPrevCodePoint(str, offset);\n        const prevGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(prevCodePoint);\n        if (breakBetweenGraphemeBreakType(prevGraphemeBreakType, graphemeBreakType)) {\n            break;\n        }\n        offset -= (prevCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\n        graphemeBreakType = prevGraphemeBreakType;\n    }\n    return (initialOffset - offset);\n}\n/**\n * A manual decoding of a UTF8 string.\n * Use only in environments which do not offer native conversion methods!\n */\nfunction decodeUTF8(buffer) {\n    // https://en.wikipedia.org/wiki/UTF-8\n    const len = buffer.byteLength;\n    const result = [];\n    let offset = 0;\n    while (offset < len) {\n        const v0 = buffer[offset];\n        let codePoint;\n        if (v0 >= 0b11110000 && offset + 3 < len) {\n            // 4 bytes\n            codePoint = ((((buffer[offset++] & 0b00000111) << 18) >>> 0)\n                | (((buffer[offset++] & 0b00111111) << 12) >>> 0)\n                | (((buffer[offset++] & 0b00111111) << 6) >>> 0)\n                | (((buffer[offset++] & 0b00111111) << 0) >>> 0));\n        }\n        else if (v0 >= 0b11100000 && offset + 2 < len) {\n            // 3 bytes\n            codePoint = ((((buffer[offset++] & 0b00001111) << 12) >>> 0)\n                | (((buffer[offset++] & 0b00111111) << 6) >>> 0)\n                | (((buffer[offset++] & 0b00111111) << 0) >>> 0));\n        }\n        else if (v0 >= 0b11000000 && offset + 1 < len) {\n            // 2 bytes\n            codePoint = ((((buffer[offset++] & 0b00011111) << 6) >>> 0)\n                | (((buffer[offset++] & 0b00111111) << 0) >>> 0));\n        }\n        else {\n            // 1 byte\n            codePoint = buffer[offset++];\n        }\n        if ((codePoint >= 0 && codePoint <= 0xD7FF) || (codePoint >= 0xE000 && codePoint <= 0xFFFF)) {\n            // Basic Multilingual Plane\n            result.push(String.fromCharCode(codePoint));\n        }\n        else if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n            // Supplementary Planes\n            const uPrime = codePoint - 0x10000;\n            const w1 = 0xD800 + ((uPrime & 0b11111111110000000000) >>> 10);\n            const w2 = 0xDC00 + ((uPrime & 0b00000000001111111111) >>> 0);\n            result.push(String.fromCharCode(w1));\n            result.push(String.fromCharCode(w2));\n        }\n        else {\n            // illegal code point\n            result.push(String.fromCharCode(0xFFFD));\n        }\n    }\n    return result.join(\'\');\n}\n/**\n * Generated using https://github.com/alexdima/unicode-utils/blob/master/generate-rtl-test.js\n */\nconst CONTAINS_RTL = /(?:[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05F4\\u0608\\u060B\\u060D\\u061B-\\u064A\\u066D-\\u066F\\u0671-\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1-\\u07EA\\u07F4\\u07F5\\u07FA-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u0858\\u085E-\\u08BD\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFD3D\\uFD50-\\uFDFC\\uFE70-\\uFEFC]|\\uD802[\\uDC00-\\uDD1B\\uDD20-\\uDE00\\uDE10-\\uDE33\\uDE40-\\uDEE4\\uDEEB-\\uDF35\\uDF40-\\uDFFF]|\\uD803[\\uDC00-\\uDCFF]|\\uD83A[\\uDC00-\\uDCCF\\uDD00-\\uDD43\\uDD50-\\uDFFF]|\\uD83B[\\uDC00-\\uDEBB])/;\n/**\n * Returns true if `str` contains any Unicode character that is classified as "R" or "AL".\n */\nfunction containsRTL(str) {\n    return CONTAINS_RTL.test(str);\n}\n/**\n * Generated using https://github.com/alexdima/unicode-utils/blob/master/generate-emoji-test.js\n */\nconst CONTAINS_EMOJI = /(?:[\\u231A\\u231B\\u23F0\\u23F3\\u2600-\\u27BF\\u2B50\\u2B55]|\\uD83C[\\uDDE6-\\uDDFF\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDE4F\\uDE80-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD00-\\uDDFF\\uDE70-\\uDED6])/;\nfunction containsEmoji(str) {\n    return CONTAINS_EMOJI.test(str);\n}\nconst IS_BASIC_ASCII = /^[\\t\\n\\r\\x20-\\x7E]*$/;\n/**\n * Returns true if `str` contains only basic ASCII characters in the range 32 - 126 (including 32 and 126) or \\n, \\r, \\t\n */\nfunction isBasicASCII(str) {\n    return IS_BASIC_ASCII.test(str);\n}\nconst UNUSUAL_LINE_TERMINATORS = /[\\u2028\\u2029]/; // LINE SEPARATOR (LS) or PARAGRAPH SEPARATOR (PS)\n/**\n * Returns true if `str` contains unusual line terminators, like LS or PS\n */\nfunction containsUnusualLineTerminators(str) {\n    return UNUSUAL_LINE_TERMINATORS.test(str);\n}\nfunction containsFullWidthCharacter(str) {\n    for (let i = 0, len = str.length; i < len; i++) {\n        if (isFullWidthCharacter(str.charCodeAt(i))) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isFullWidthCharacter(charCode) {\n    // Do a cheap trick to better support wrapping of wide characters, treat them as 2 columns\n    // http://jrgraphix.net/research/unicode_blocks.php\n    //          2E80 — 2EFF   CJK Radicals Supplement\n    //          2F00 — 2FDF   Kangxi Radicals\n    //          2FF0 — 2FFF   Ideographic Description Characters\n    //          3000 — 303F   CJK Symbols and Punctuation\n    //          3040 — 309F   Hiragana\n    //          30A0 — 30FF   Katakana\n    //          3100 — 312F   Bopomofo\n    //          3130 — 318F   Hangul Compatibility Jamo\n    //          3190 — 319F   Kanbun\n    //          31A0 — 31BF   Bopomofo Extended\n    //          31F0 — 31FF   Katakana Phonetic Extensions\n    //          3200 — 32FF   Enclosed CJK Letters and Months\n    //          3300 — 33FF   CJK Compatibility\n    //          3400 — 4DBF   CJK Unified Ideographs Extension A\n    //          4DC0 — 4DFF   Yijing Hexagram Symbols\n    //          4E00 — 9FFF   CJK Unified Ideographs\n    //          A000 — A48F   Yi Syllables\n    //          A490 — A4CF   Yi Radicals\n    //          AC00 — D7AF   Hangul Syllables\n    // [IGNORE] D800 — DB7F   High Surrogates\n    // [IGNORE] DB80 — DBFF   High Private Use Surrogates\n    // [IGNORE] DC00 — DFFF   Low Surrogates\n    // [IGNORE] E000 — F8FF   Private Use Area\n    //          F900 — FAFF   CJK Compatibility Ideographs\n    // [IGNORE] FB00 — FB4F   Alphabetic Presentation Forms\n    // [IGNORE] FB50 — FDFF   Arabic Presentation Forms-A\n    // [IGNORE] FE00 — FE0F   Variation Selectors\n    // [IGNORE] FE20 — FE2F   Combining Half Marks\n    // [IGNORE] FE30 — FE4F   CJK Compatibility Forms\n    // [IGNORE] FE50 — FE6F   Small Form Variants\n    // [IGNORE] FE70 — FEFF   Arabic Presentation Forms-B\n    //          FF00 — FFEF   Halfwidth and Fullwidth Forms\n    //               [https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms]\n    //               of which FF01 - FF5E fullwidth ASCII of 21 to 7E\n    // [IGNORE]    and FF65 - FFDC halfwidth of Katakana and Hangul\n    // [IGNORE] FFF0 — FFFF   Specials\n    charCode = +charCode; // @perf\n    return ((charCode >= 0x2E80 && charCode <= 0xD7AF)\n        || (charCode >= 0xF900 && charCode <= 0xFAFF)\n        || (charCode >= 0xFF01 && charCode <= 0xFF5E));\n}\n/**\n * A fast function (therefore imprecise) to check if code points are emojis.\n * Generated using https://github.com/alexdima/unicode-utils/blob/master/generate-emoji-test.js\n */\nfunction isEmojiImprecise(x) {\n    return ((x >= 0x1F1E6 && x <= 0x1F1FF) || (x === 8986) || (x === 8987) || (x === 9200)\n        || (x === 9203) || (x >= 9728 && x <= 10175) || (x === 11088) || (x === 11093)\n        || (x >= 127744 && x <= 128591) || (x >= 128640 && x <= 128764)\n        || (x >= 128992 && x <= 129003) || (x >= 129280 && x <= 129535)\n        || (x >= 129648 && x <= 129750));\n}\n// -- UTF-8 BOM\nconst UTF8_BOM_CHARACTER = String.fromCharCode(65279 /* UTF8_BOM */);\nfunction startsWithUTF8BOM(str) {\n    return !!(str && str.length > 0 && str.charCodeAt(0) === 65279 /* UTF8_BOM */);\n}\nfunction containsUppercaseCharacter(target, ignoreEscapedChars = false) {\n    if (!target) {\n        return false;\n    }\n    if (ignoreEscapedChars) {\n        target = target.replace(/\\\\./g, \'\');\n    }\n    return target.toLowerCase() !== target;\n}\n/**\n * Produces \'a\'-\'z\', followed by \'A\'-\'Z\'... followed by \'a\'-\'z\', etc.\n */\nfunction singleLetterHash(n) {\n    const LETTERS_CNT = (90 /* Z */ - 65 /* A */ + 1);\n    n = n % (2 * LETTERS_CNT);\n    if (n < LETTERS_CNT) {\n        return String.fromCharCode(97 /* a */ + n);\n    }\n    return String.fromCharCode(65 /* A */ + n - LETTERS_CNT);\n}\n//#region Unicode Grapheme Break\nfunction getGraphemeBreakType(codePoint) {\n    const graphemeBreakTree = GraphemeBreakTree.getInstance();\n    return graphemeBreakTree.getGraphemeBreakType(codePoint);\n}\nfunction breakBetweenGraphemeBreakType(breakTypeA, breakTypeB) {\n    // http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules\n    // !!! Let\'s make the common case a bit faster\n    if (breakTypeA === 0 /* Other */) {\n        // see https://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakTest-13.0.0d10.html#table\n        return (breakTypeB !== 5 /* Extend */ && breakTypeB !== 7 /* SpacingMark */);\n    }\n    // Do not break between a CR and LF. Otherwise, break before and after controls.\n    // GB3                                        CR × LF\n    // GB4                       (Control | CR | LF) ÷\n    // GB5                                           ÷ (Control | CR | LF)\n    if (breakTypeA === 2 /* CR */) {\n        if (breakTypeB === 3 /* LF */) {\n            return false; // GB3\n        }\n    }\n    if (breakTypeA === 4 /* Control */ || breakTypeA === 2 /* CR */ || breakTypeA === 3 /* LF */) {\n        return true; // GB4\n    }\n    if (breakTypeB === 4 /* Control */ || breakTypeB === 2 /* CR */ || breakTypeB === 3 /* LF */) {\n        return true; // GB5\n    }\n    // Do not break Hangul syllable sequences.\n    // GB6                                         L × (L | V | LV | LVT)\n    // GB7                                  (LV | V) × (V | T)\n    // GB8                                 (LVT | T) × T\n    if (breakTypeA === 8 /* L */) {\n        if (breakTypeB === 8 /* L */ || breakTypeB === 9 /* V */ || breakTypeB === 11 /* LV */ || breakTypeB === 12 /* LVT */) {\n            return false; // GB6\n        }\n    }\n    if (breakTypeA === 11 /* LV */ || breakTypeA === 9 /* V */) {\n        if (breakTypeB === 9 /* V */ || breakTypeB === 10 /* T */) {\n            return false; // GB7\n        }\n    }\n    if (breakTypeA === 12 /* LVT */ || breakTypeA === 10 /* T */) {\n        if (breakTypeB === 10 /* T */) {\n            return false; // GB8\n        }\n    }\n    // Do not break before extending characters or ZWJ.\n    // GB9                                           × (Extend | ZWJ)\n    if (breakTypeB === 5 /* Extend */ || breakTypeB === 13 /* ZWJ */) {\n        return false; // GB9\n    }\n    // The GB9a and GB9b rules only apply to extended grapheme clusters:\n    // Do not break before SpacingMarks, or after Prepend characters.\n    // GB9a                                          × SpacingMark\n    // GB9b                                  Prepend ×\n    if (breakTypeB === 7 /* SpacingMark */) {\n        return false; // GB9a\n    }\n    if (breakTypeA === 1 /* Prepend */) {\n        return false; // GB9b\n    }\n    // Do not break within emoji modifier sequences or emoji zwj sequences.\n    // GB11    \\p{Extended_Pictographic} Extend* ZWJ × \\p{Extended_Pictographic}\n    if (breakTypeA === 13 /* ZWJ */ && breakTypeB === 14 /* Extended_Pictographic */) {\n        // Note: we are not implementing the rule entirely here to avoid introducing states\n        return false; // GB11\n    }\n    // GB12                          sot (RI RI)* RI × RI\n    // GB13                        [^RI] (RI RI)* RI × RI\n    if (breakTypeA === 6 /* Regional_Indicator */ && breakTypeB === 6 /* Regional_Indicator */) {\n        // Note: we are not implementing the rule entirely here to avoid introducing states\n        return false; // GB12 & GB13\n    }\n    // GB999                                     Any ÷ Any\n    return true;\n}\nclass GraphemeBreakTree {\n    constructor() {\n        this._data = getGraphemeBreakRawData();\n    }\n    static getInstance() {\n        if (!GraphemeBreakTree._INSTANCE) {\n            GraphemeBreakTree._INSTANCE = new GraphemeBreakTree();\n        }\n        return GraphemeBreakTree._INSTANCE;\n    }\n    getGraphemeBreakType(codePoint) {\n        // !!! Let\'s make 7bit ASCII a bit faster: 0..31\n        if (codePoint < 32) {\n            if (codePoint === 10 /* LineFeed */) {\n                return 3 /* LF */;\n            }\n            if (codePoint === 13 /* CarriageReturn */) {\n                return 2 /* CR */;\n            }\n            return 4 /* Control */;\n        }\n        // !!! Let\'s make 7bit ASCII a bit faster: 32..126\n        if (codePoint < 127) {\n            return 0 /* Other */;\n        }\n        const data = this._data;\n        const nodeCount = data.length / 3;\n        let nodeIndex = 1;\n        while (nodeIndex <= nodeCount) {\n            if (codePoint < data[3 * nodeIndex]) {\n                // go left\n                nodeIndex = 2 * nodeIndex;\n            }\n            else if (codePoint > data[3 * nodeIndex + 1]) {\n                // go right\n                nodeIndex = 2 * nodeIndex + 1;\n            }\n            else {\n                // hit\n                return data[3 * nodeIndex + 2];\n            }\n        }\n        return 0 /* Other */;\n    }\n}\nGraphemeBreakTree._INSTANCE = null;\nfunction getGraphemeBreakRawData() {\n    // generated using https://github.com/alexdima/unicode-utils/blob/master/generate-grapheme-break.js\n    return JSON.parse(\'[0,0,0,51592,51592,11,44424,44424,11,72251,72254,5,7150,7150,7,48008,48008,11,55176,55176,11,128420,128420,14,3276,3277,5,9979,9980,14,46216,46216,11,49800,49800,11,53384,53384,11,70726,70726,5,122915,122916,5,129320,129327,14,2558,2558,5,5906,5908,5,9762,9763,14,43360,43388,8,45320,45320,11,47112,47112,11,48904,48904,11,50696,50696,11,52488,52488,11,54280,54280,11,70082,70083,1,71350,71350,7,73111,73111,5,127892,127893,14,128726,128727,14,129473,129474,14,2027,2035,5,2901,2902,5,3784,3789,5,6754,6754,5,8418,8420,5,9877,9877,14,11088,11088,14,44008,44008,5,44872,44872,11,45768,45768,11,46664,46664,11,47560,47560,11,48456,48456,11,49352,49352,11,50248,50248,11,51144,51144,11,52040,52040,11,52936,52936,11,53832,53832,11,54728,54728,11,69811,69814,5,70459,70460,5,71096,71099,7,71998,71998,5,72874,72880,5,119149,119149,7,127374,127374,14,128335,128335,14,128482,128482,14,128765,128767,14,129399,129400,14,129680,129685,14,1476,1477,5,2377,2380,7,2759,2760,5,3137,3140,7,3458,3459,7,4153,4154,5,6432,6434,5,6978,6978,5,7675,7679,5,9723,9726,14,9823,9823,14,9919,9923,14,10035,10036,14,42736,42737,5,43596,43596,5,44200,44200,11,44648,44648,11,45096,45096,11,45544,45544,11,45992,45992,11,46440,46440,11,46888,46888,11,47336,47336,11,47784,47784,11,48232,48232,11,48680,48680,11,49128,49128,11,49576,49576,11,50024,50024,11,50472,50472,11,50920,50920,11,51368,51368,11,51816,51816,11,52264,52264,11,52712,52712,11,53160,53160,11,53608,53608,11,54056,54056,11,54504,54504,11,54952,54952,11,68108,68111,5,69933,69940,5,70197,70197,7,70498,70499,7,70845,70845,5,71229,71229,5,71727,71735,5,72154,72155,5,72344,72345,5,73023,73029,5,94095,94098,5,121403,121452,5,126981,127182,14,127538,127546,14,127990,127990,14,128391,128391,14,128445,128449,14,128500,128505,14,128752,128752,14,129160,129167,14,129356,129356,14,129432,129442,14,129648,129651,14,129751,131069,14,173,173,4,1757,1757,1,2274,2274,1,2494,2494,5,2641,2641,5,2876,2876,5,3014,3016,7,3262,3262,7,3393,3396,5,3570,3571,7,3968,3972,5,4228,4228,7,6086,6086,5,6679,6680,5,6912,6915,5,7080,7081,5,7380,7392,5,8252,8252,14,9096,9096,14,9748,9749,14,9784,9786,14,9833,9850,14,9890,9894,14,9938,9938,14,9999,9999,14,10085,10087,14,12349,12349,14,43136,43137,7,43454,43456,7,43755,43755,7,44088,44088,11,44312,44312,11,44536,44536,11,44760,44760,11,44984,44984,11,45208,45208,11,45432,45432,11,45656,45656,11,45880,45880,11,46104,46104,11,46328,46328,11,46552,46552,11,46776,46776,11,47000,47000,11,47224,47224,11,47448,47448,11,47672,47672,11,47896,47896,11,48120,48120,11,48344,48344,11,48568,48568,11,48792,48792,11,49016,49016,11,49240,49240,11,49464,49464,11,49688,49688,11,49912,49912,11,50136,50136,11,50360,50360,11,50584,50584,11,50808,50808,11,51032,51032,11,51256,51256,11,51480,51480,11,51704,51704,11,51928,51928,11,52152,52152,11,52376,52376,11,52600,52600,11,52824,52824,11,53048,53048,11,53272,53272,11,53496,53496,11,53720,53720,11,53944,53944,11,54168,54168,11,54392,54392,11,54616,54616,11,54840,54840,11,55064,55064,11,65438,65439,5,69633,69633,5,69837,69837,1,70018,70018,7,70188,70190,7,70368,70370,7,70465,70468,7,70712,70719,5,70835,70840,5,70850,70851,5,71132,71133,5,71340,71340,7,71458,71461,5,71985,71989,7,72002,72002,7,72193,72202,5,72281,72283,5,72766,72766,7,72885,72886,5,73104,73105,5,92912,92916,5,113824,113827,4,119173,119179,5,121505,121519,5,125136,125142,5,127279,127279,14,127489,127490,14,127570,127743,14,127900,127901,14,128254,128254,14,128369,128370,14,128400,128400,14,128425,128432,14,128468,128475,14,128489,128494,14,128715,128720,14,128745,128745,14,128759,128760,14,129004,129023,14,129296,129304,14,129340,129342,14,129388,129392,14,129404,129407,14,129454,129455,14,129485,129487,14,129659,129663,14,129719,129727,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2363,2363,7,2402,2403,5,2507,2508,7,2622,2624,7,2691,2691,7,2786,2787,5,2881,2884,5,3006,3006,5,3072,3072,5,3170,3171,5,3267,3268,7,3330,3331,7,3406,3406,1,3538,3540,5,3655,3662,5,3897,3897,5,4038,4038,5,4184,4185,5,4352,4447,8,6068,6069,5,6155,6157,5,6448,6449,7,6742,6742,5,6783,6783,5,6966,6970,5,7042,7042,7,7143,7143,7,7212,7219,5,7412,7412,5,8206,8207,4,8294,8303,4,8596,8601,14,9410,9410,14,9742,9742,14,9757,9757,14,9770,9770,14,9794,9794,14,9828,9828,14,9855,9855,14,9882,9882,14,9900,9903,14,9929,9933,14,9963,9967,14,9987,9988,14,10006,10006,14,10062,10062,14,10175,10175,14,11744,11775,5,42607,42607,5,43043,43044,7,43263,43263,5,43444,43445,7,43569,43570,5,43698,43700,5,43766,43766,5,44032,44032,11,44144,44144,11,44256,44256,11,44368,44368,11,44480,44480,11,44592,44592,11,44704,44704,11,44816,44816,11,44928,44928,11,45040,45040,11,45152,45152,11,45264,45264,11,45376,45376,11,45488,45488,11,45600,45600,11,45712,45712,11,45824,45824,11,45936,45936,11,46048,46048,11,46160,46160,11,46272,46272,11,46384,46384,11,46496,46496,11,46608,46608,11,46720,46720,11,46832,46832,11,46944,46944,11,47056,47056,11,47168,47168,11,47280,47280,11,47392,47392,11,47504,47504,11,47616,47616,11,47728,47728,11,47840,47840,11,47952,47952,11,48064,48064,11,48176,48176,11,48288,48288,11,48400,48400,11,48512,48512,11,48624,48624,11,48736,48736,11,48848,48848,11,48960,48960,11,49072,49072,11,49184,49184,11,49296,49296,11,49408,49408,11,49520,49520,11,49632,49632,11,49744,49744,11,49856,49856,11,49968,49968,11,50080,50080,11,50192,50192,11,50304,50304,11,50416,50416,11,50528,50528,11,50640,50640,11,50752,50752,11,50864,50864,11,50976,50976,11,51088,51088,11,51200,51200,11,51312,51312,11,51424,51424,11,51536,51536,11,51648,51648,11,51760,51760,11,51872,51872,11,51984,51984,11,52096,52096,11,52208,52208,11,52320,52320,11,52432,52432,11,52544,52544,11,52656,52656,11,52768,52768,11,52880,52880,11,52992,52992,11,53104,53104,11,53216,53216,11,53328,53328,11,53440,53440,11,53552,53552,11,53664,53664,11,53776,53776,11,53888,53888,11,54000,54000,11,54112,54112,11,54224,54224,11,54336,54336,11,54448,54448,11,54560,54560,11,54672,54672,11,54784,54784,11,54896,54896,11,55008,55008,11,55120,55120,11,64286,64286,5,66272,66272,5,68900,68903,5,69762,69762,7,69817,69818,5,69927,69931,5,70003,70003,5,70070,70078,5,70094,70094,7,70194,70195,7,70206,70206,5,70400,70401,5,70463,70463,7,70475,70477,7,70512,70516,5,70722,70724,5,70832,70832,5,70842,70842,5,70847,70848,5,71088,71089,7,71102,71102,7,71219,71226,5,71231,71232,5,71342,71343,7,71453,71455,5,71463,71467,5,71737,71738,5,71995,71996,5,72000,72000,7,72145,72147,7,72160,72160,5,72249,72249,7,72273,72278,5,72330,72342,5,72752,72758,5,72850,72871,5,72882,72883,5,73018,73018,5,73031,73031,5,73109,73109,5,73461,73462,7,94031,94031,5,94192,94193,7,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,126976,126979,14,127184,127231,14,127344,127345,14,127405,127461,14,127514,127514,14,127561,127567,14,127778,127779,14,127896,127896,14,127985,127986,14,127995,127999,5,128326,128328,14,128360,128366,14,128378,128378,14,128394,128397,14,128405,128406,14,128422,128423,14,128435,128443,14,128453,128464,14,128479,128480,14,128484,128487,14,128496,128498,14,128640,128709,14,128723,128724,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129096,129103,14,129292,129292,14,129311,129311,14,129329,129330,14,129344,129349,14,129360,129374,14,129394,129394,14,129402,129402,14,129413,129425,14,129445,129450,14,129466,129471,14,129483,129483,14,129511,129535,14,129653,129655,14,129667,129670,14,129705,129711,14,129731,129743,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2307,2307,7,2366,2368,7,2382,2383,7,2434,2435,7,2497,2500,5,2519,2519,5,2563,2563,7,2631,2632,5,2677,2677,5,2750,2752,7,2763,2764,7,2817,2817,5,2879,2879,5,2891,2892,7,2914,2915,5,3008,3008,5,3021,3021,5,3076,3076,5,3146,3149,5,3202,3203,7,3264,3265,7,3271,3272,7,3298,3299,5,3390,3390,5,3402,3404,7,3426,3427,5,3535,3535,5,3544,3550,7,3635,3635,7,3763,3763,7,3893,3893,5,3953,3966,5,3981,3991,5,4145,4145,7,4157,4158,5,4209,4212,5,4237,4237,5,4520,4607,10,5970,5971,5,6071,6077,5,6089,6099,5,6277,6278,5,6439,6440,5,6451,6456,7,6683,6683,5,6744,6750,5,6765,6770,7,6846,6846,5,6964,6964,5,6972,6972,5,7019,7027,5,7074,7077,5,7083,7085,5,7146,7148,7,7154,7155,7,7222,7223,5,7394,7400,5,7416,7417,5,8204,8204,5,8233,8233,4,8288,8292,4,8413,8416,5,8482,8482,14,8986,8987,14,9193,9203,14,9654,9654,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9775,14,9792,9792,14,9800,9811,14,9825,9826,14,9831,9831,14,9852,9853,14,9872,9873,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9936,9936,14,9941,9960,14,9974,9974,14,9982,9985,14,9992,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10145,10145,14,11013,11015,14,11503,11505,5,12334,12335,5,12951,12951,14,42612,42621,5,43014,43014,5,43047,43047,7,43204,43205,5,43335,43345,5,43395,43395,7,43450,43451,7,43561,43566,5,43573,43574,5,43644,43644,5,43710,43711,5,43758,43759,7,44005,44005,5,44012,44012,7,44060,44060,11,44116,44116,11,44172,44172,11,44228,44228,11,44284,44284,11,44340,44340,11,44396,44396,11,44452,44452,11,44508,44508,11,44564,44564,11,44620,44620,11,44676,44676,11,44732,44732,11,44788,44788,11,44844,44844,11,44900,44900,11,44956,44956,11,45012,45012,11,45068,45068,11,45124,45124,11,45180,45180,11,45236,45236,11,45292,45292,11,45348,45348,11,45404,45404,11,45460,45460,11,45516,45516,11,45572,45572,11,45628,45628,11,45684,45684,11,45740,45740,11,45796,45796,11,45852,45852,11,45908,45908,11,45964,45964,11,46020,46020,11,46076,46076,11,46132,46132,11,46188,46188,11,46244,46244,11,46300,46300,11,46356,46356,11,46412,46412,11,46468,46468,11,46524,46524,11,46580,46580,11,46636,46636,11,46692,46692,11,46748,46748,11,46804,46804,11,46860,46860,11,46916,46916,11,46972,46972,11,47028,47028,11,47084,47084,11,47140,47140,11,47196,47196,11,47252,47252,11,47308,47308,11,47364,47364,11,47420,47420,11,47476,47476,11,47532,47532,11,47588,47588,11,47644,47644,11,47700,47700,11,47756,47756,11,47812,47812,11,47868,47868,11,47924,47924,11,47980,47980,11,48036,48036,11,48092,48092,11,48148,48148,11,48204,48204,11,48260,48260,11,48316,48316,11,48372,48372,11,48428,48428,11,48484,48484,11,48540,48540,11,48596,48596,11,48652,48652,11,48708,48708,11,48764,48764,11,48820,48820,11,48876,48876,11,48932,48932,11,48988,48988,11,49044,49044,11,49100,49100,11,49156,49156,11,49212,49212,11,49268,49268,11,49324,49324,11,49380,49380,11,49436,49436,11,49492,49492,11,49548,49548,11,49604,49604,11,49660,49660,11,49716,49716,11,49772,49772,11,49828,49828,11,49884,49884,11,49940,49940,11,49996,49996,11,50052,50052,11,50108,50108,11,50164,50164,11,50220,50220,11,50276,50276,11,50332,50332,11,50388,50388,11,50444,50444,11,50500,50500,11,50556,50556,11,50612,50612,11,50668,50668,11,50724,50724,11,50780,50780,11,50836,50836,11,50892,50892,11,50948,50948,11,51004,51004,11,51060,51060,11,51116,51116,11,51172,51172,11,51228,51228,11,51284,51284,11,51340,51340,11,51396,51396,11,51452,51452,11,51508,51508,11,51564,51564,11,51620,51620,11,51676,51676,11,51732,51732,11,51788,51788,11,51844,51844,11,51900,51900,11,51956,51956,11,52012,52012,11,52068,52068,11,52124,52124,11,52180,52180,11,52236,52236,11,52292,52292,11,52348,52348,11,52404,52404,11,52460,52460,11,52516,52516,11,52572,52572,11,52628,52628,11,52684,52684,11,52740,52740,11,52796,52796,11,52852,52852,11,52908,52908,11,52964,52964,11,53020,53020,11,53076,53076,11,53132,53132,11,53188,53188,11,53244,53244,11,53300,53300,11,53356,53356,11,53412,53412,11,53468,53468,11,53524,53524,11,53580,53580,11,53636,53636,11,53692,53692,11,53748,53748,11,53804,53804,11,53860,53860,11,53916,53916,11,53972,53972,11,54028,54028,11,54084,54084,11,54140,54140,11,54196,54196,11,54252,54252,11,54308,54308,11,54364,54364,11,54420,54420,11,54476,54476,11,54532,54532,11,54588,54588,11,54644,54644,11,54700,54700,11,54756,54756,11,54812,54812,11,54868,54868,11,54924,54924,11,54980,54980,11,55036,55036,11,55092,55092,11,55148,55148,11,55216,55238,9,65056,65071,5,65529,65531,4,68097,68099,5,68159,68159,5,69446,69456,5,69688,69702,5,69808,69810,7,69815,69816,7,69821,69821,1,69888,69890,5,69932,69932,7,69957,69958,7,70016,70017,5,70067,70069,7,70079,70080,7,70089,70092,5,70095,70095,5,70191,70193,5,70196,70196,5,70198,70199,5,70367,70367,5,70371,70378,5,70402,70403,7,70462,70462,5,70464,70464,5,70471,70472,7,70487,70487,5,70502,70508,5,70709,70711,7,70720,70721,7,70725,70725,7,70750,70750,5,70833,70834,7,70841,70841,7,70843,70844,7,70846,70846,7,70849,70849,7,71087,71087,5,71090,71093,5,71100,71101,5,71103,71104,5,71216,71218,7,71227,71228,7,71230,71230,7,71339,71339,5,71341,71341,5,71344,71349,5,71351,71351,5,71456,71457,7,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123628,123631,5,125252,125258,5,126980,126980,14,127183,127183,14,127245,127247,14,127340,127343,14,127358,127359,14,127377,127386,14,127462,127487,6,127491,127503,14,127535,127535,14,127548,127551,14,127568,127569,14,127744,127777,14,127780,127891,14,127894,127895,14,127897,127899,14,127902,127984,14,127987,127989,14,127991,127994,14,128000,128253,14,128255,128317,14,128329,128334,14,128336,128359,14,128367,128368,14,128371,128377,14,128379,128390,14,128392,128393,14,128398,128399,14,128401,128404,14,128407,128419,14,128421,128421,14,128424,128424,14,128433,128434,14,128444,128444,14,128450,128452,14,128465,128467,14,128476,128478,14,128481,128481,14,128483,128483,14,128488,128488,14,128495,128495,14,128499,128499,14,128506,128591,14,128710,128714,14,128721,128722,14,128725,128725,14,128728,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129664,129666,14,129671,129679,14,129686,129704,14,129712,129718,14,129728,129730,14,129744,129750,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2259,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3134,3136,5,3142,3144,5,3157,3158,5,3201,3201,5,3260,3260,5,3263,3263,5,3266,3266,5,3270,3270,5,3274,3275,7,3285,3286,5,3328,3329,5,3387,3388,5,3391,3392,7,3398,3400,7,3405,3405,5,3415,3415,5,3457,3457,5,3530,3530,5,3536,3537,7,3542,3542,5,3551,3551,5,3633,3633,5,3636,3642,5,3761,3761,5,3764,3772,5,3864,3865,5,3895,3895,5,3902,3903,7,3967,3967,7,3974,3975,5,3993,4028,5,4141,4144,5,4146,4151,5,4155,4156,7,4182,4183,7,4190,4192,5,4226,4226,5,4229,4230,5,4253,4253,5,4448,4519,9,4957,4959,5,5938,5940,5,6002,6003,5,6070,6070,7,6078,6085,7,6087,6088,7,6109,6109,5,6158,6158,4,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6848,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7673,5,8203,8203,4,8205,8205,13,8232,8232,4,8234,8238,4,8265,8265,14,8293,8293,4,8400,8412,5,8417,8417,5,8421,8432,5,8505,8505,14,8617,8618,14,9000,9000,14,9167,9167,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9776,9783,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9935,14,9937,9937,14,9939,9940,14,9961,9962,14,9968,9973,14,9975,9978,14,9981,9981,14,9986,9986,14,9989,9989,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10084,14,10133,10135,14,10160,10160,14,10548,10549,14,11035,11036,14,11093,11093,14,11647,11647,5,12330,12333,5,12336,12336,14,12441,12442,5,12953,12953,14,42608,42610,5,42654,42655,5,43010,43010,5,43019,43019,5,43045,43046,5,43052,43052,5,43188,43203,7,43232,43249,5,43302,43309,5,43346,43347,7,43392,43394,5,43443,43443,5,43446,43449,5,43452,43453,5,43493,43493,5,43567,43568,7,43571,43572,7,43587,43587,5,43597,43597,7,43696,43696,5,43703,43704,5,43713,43713,5,43756,43757,5,43765,43765,7,44003,44004,7,44006,44007,7,44009,44010,7,44013,44013,5,44033,44059,12,44061,44087,12,44089,44115,12,44117,44143,12,44145,44171,12,44173,44199,12,44201,44227,12,44229,44255,12,44257,44283,12,44285,44311,12,44313,44339,12,44341,44367,12,44369,44395,12,44397,44423,12,44425,44451,12,44453,44479,12,44481,44507,12,44509,44535,12,44537,44563,12,44565,44591,12,44593,44619,12,44621,44647,12,44649,44675,12,44677,44703,12,44705,44731,12,44733,44759,12,44761,44787,12,44789,44815,12,44817,44843,12,44845,44871,12,44873,44899,12,44901,44927,12,44929,44955,12,44957,44983,12,44985,45011,12,45013,45039,12,45041,45067,12,45069,45095,12,45097,45123,12,45125,45151,12,45153,45179,12,45181,45207,12,45209,45235,12,45237,45263,12,45265,45291,12,45293,45319,12,45321,45347,12,45349,45375,12,45377,45403,12,45405,45431,12,45433,45459,12,45461,45487,12,45489,45515,12,45517,45543,12,45545,45571,12,45573,45599,12,45601,45627,12,45629,45655,12,45657,45683,12,45685,45711,12,45713,45739,12,45741,45767,12,45769,45795,12,45797,45823,12,45825,45851,12,45853,45879,12,45881,45907,12,45909,45935,12,45937,45963,12,45965,45991,12,45993,46019,12,46021,46047,12,46049,46075,12,46077,46103,12,46105,46131,12,46133,46159,12,46161,46187,12,46189,46215,12,46217,46243,12,46245,46271,12,46273,46299,12,46301,46327,12,46329,46355,12,46357,46383,12,46385,46411,12,46413,46439,12,46441,46467,12,46469,46495,12,46497,46523,12,46525,46551,12,46553,46579,12,46581,46607,12,46609,46635,12,46637,46663,12,46665,46691,12,46693,46719,12,46721,46747,12,46749,46775,12,46777,46803,12,46805,46831,12,46833,46859,12,46861,46887,12,46889,46915,12,46917,46943,12,46945,46971,12,46973,46999,12,47001,47027,12,47029,47055,12,47057,47083,12,47085,47111,12,47113,47139,12,47141,47167,12,47169,47195,12,47197,47223,12,47225,47251,12,47253,47279,12,47281,47307,12,47309,47335,12,47337,47363,12,47365,47391,12,47393,47419,12,47421,47447,12,47449,47475,12,47477,47503,12,47505,47531,12,47533,47559,12,47561,47587,12,47589,47615,12,47617,47643,12,47645,47671,12,47673,47699,12,47701,47727,12,47729,47755,12,47757,47783,12,47785,47811,12,47813,47839,12,47841,47867,12,47869,47895,12,47897,47923,12,47925,47951,12,47953,47979,12,47981,48007,12,48009,48035,12,48037,48063,12,48065,48091,12,48093,48119,12,48121,48147,12,48149,48175,12,48177,48203,12,48205,48231,12,48233,48259,12,48261,48287,12,48289,48315,12,48317,48343,12,48345,48371,12,48373,48399,12,48401,48427,12,48429,48455,12,48457,48483,12,48485,48511,12,48513,48539,12,48541,48567,12,48569,48595,12,48597,48623,12,48625,48651,12,48653,48679,12,48681,48707,12,48709,48735,12,48737,48763,12,48765,48791,12,48793,48819,12,48821,48847,12,48849,48875,12,48877,48903,12,48905,48931,12,48933,48959,12,48961,48987,12,48989,49015,12,49017,49043,12,49045,49071,12,49073,49099,12,49101,49127,12,49129,49155,12,49157,49183,12,49185,49211,12,49213,49239,12,49241,49267,12,49269,49295,12,49297,49323,12,49325,49351,12,49353,49379,12,49381,49407,12,49409,49435,12,49437,49463,12,49465,49491,12,49493,49519,12,49521,49547,12,49549,49575,12,49577,49603,12,49605,49631,12,49633,49659,12,49661,49687,12,49689,49715,12,49717,49743,12,49745,49771,12,49773,49799,12,49801,49827,12,49829,49855,12,49857,49883,12,49885,49911,12,49913,49939,12,49941,49967,12,49969,49995,12,49997,50023,12,50025,50051,12,50053,50079,12,50081,50107,12,50109,50135,12,50137,50163,12,50165,50191,12,50193,50219,12,50221,50247,12,50249,50275,12,50277,50303,12,50305,50331,12,50333,50359,12,50361,50387,12,50389,50415,12,50417,50443,12,50445,50471,12,50473,50499,12,50501,50527,12,50529,50555,12,50557,50583,12,50585,50611,12,50613,50639,12,50641,50667,12,50669,50695,12,50697,50723,12,50725,50751,12,50753,50779,12,50781,50807,12,50809,50835,12,50837,50863,12,50865,50891,12,50893,50919,12,50921,50947,12,50949,50975,12,50977,51003,12,51005,51031,12,51033,51059,12,51061,51087,12,51089,51115,12,51117,51143,12,51145,51171,12,51173,51199,12,51201,51227,12,51229,51255,12,51257,51283,12,51285,51311,12,51313,51339,12,51341,51367,12,51369,51395,12,51397,51423,12,51425,51451,12,51453,51479,12,51481,51507,12,51509,51535,12,51537,51563,12,51565,51591,12,51593,51619,12,51621,51647,12,51649,51675,12,51677,51703,12,51705,51731,12,51733,51759,12,51761,51787,12,51789,51815,12,51817,51843,12,51845,51871,12,51873,51899,12,51901,51927,12,51929,51955,12,51957,51983,12,51985,52011,12,52013,52039,12,52041,52067,12,52069,52095,12,52097,52123,12,52125,52151,12,52153,52179,12,52181,52207,12,52209,52235,12,52237,52263,12,52265,52291,12,52293,52319,12,52321,52347,12,52349,52375,12,52377,52403,12,52405,52431,12,52433,52459,12,52461,52487,12,52489,52515,12,52517,52543,12,52545,52571,12,52573,52599,12,52601,52627,12,52629,52655,12,52657,52683,12,52685,52711,12,52713,52739,12,52741,52767,12,52769,52795,12,52797,52823,12,52825,52851,12,52853,52879,12,52881,52907,12,52909,52935,12,52937,52963,12,52965,52991,12,52993,53019,12,53021,53047,12,53049,53075,12,53077,53103,12,53105,53131,12,53133,53159,12,53161,53187,12,53189,53215,12,53217,53243,12,53245,53271,12,53273,53299,12,53301,53327,12,53329,53355,12,53357,53383,12,53385,53411,12,53413,53439,12,53441,53467,12,53469,53495,12,53497,53523,12,53525,53551,12,53553,53579,12,53581,53607,12,53609,53635,12,53637,53663,12,53665,53691,12,53693,53719,12,53721,53747,12,53749,53775,12,53777,53803,12,53805,53831,12,53833,53859,12,53861,53887,12,53889,53915,12,53917,53943,12,53945,53971,12,53973,53999,12,54001,54027,12,54029,54055,12,54057,54083,12,54085,54111,12,54113,54139,12,54141,54167,12,54169,54195,12,54197,54223,12,54225,54251,12,54253,54279,12,54281,54307,12,54309,54335,12,54337,54363,12,54365,54391,12,54393,54419,12,54421,54447,12,54449,54475,12,54477,54503,12,54505,54531,12,54533,54559,12,54561,54587,12,54589,54615,12,54617,54643,12,54645,54671,12,54673,54699,12,54701,54727,12,54729,54755,12,54757,54783,12,54785,54811,12,54813,54839,12,54841,54867,12,54869,54895,12,54897,54923,12,54925,54951,12,54953,54979,12,54981,55007,12,55009,55035,12,55037,55063,12,55065,55091,12,55093,55119,12,55121,55147,12,55149,55175,12,55177,55203,12,55243,55291,10,65024,65039,5,65279,65279,4,65520,65528,4,66045,66045,5,66422,66426,5,68101,68102,5,68152,68154,5,68325,68326,5,69291,69292,5,69632,69632,7,69634,69634,7,69759,69761,5]\');\n}\n//#endregion\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/hash.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Return a hash value for an object.\n */\nfunction hash(obj) {\n    return doHash(obj, 0);\n}\nfunction doHash(obj, hashVal) {\n    switch (typeof obj) {\n        case \'object\':\n            if (obj === null) {\n                return numberHash(349, hashVal);\n            }\n            else if (Array.isArray(obj)) {\n                return arrayHash(obj, hashVal);\n            }\n            return objectHash(obj, hashVal);\n        case \'string\':\n            return stringHash(obj, hashVal);\n        case \'boolean\':\n            return booleanHash(obj, hashVal);\n        case \'number\':\n            return numberHash(obj, hashVal);\n        case \'undefined\':\n            return numberHash(937, hashVal);\n        default:\n            return numberHash(617, hashVal);\n    }\n}\nfunction numberHash(val, initialHashVal) {\n    return (((initialHashVal << 5) - initialHashVal) + val) | 0; // hashVal * 31 + ch, keep as int32\n}\nfunction booleanHash(b, initialHashVal) {\n    return numberHash(b ? 433 : 863, initialHashVal);\n}\nfunction stringHash(s, hashVal) {\n    hashVal = numberHash(149417, hashVal);\n    for (let i = 0, length = s.length; i < length; i++) {\n        hashVal = numberHash(s.charCodeAt(i), hashVal);\n    }\n    return hashVal;\n}\nfunction arrayHash(arr, initialHashVal) {\n    initialHashVal = numberHash(104579, initialHashVal);\n    return arr.reduce((hashVal, item) => doHash(item, hashVal), initialHashVal);\n}\nfunction objectHash(obj, initialHashVal) {\n    initialHashVal = numberHash(181387, initialHashVal);\n    return Object.keys(obj).sort().reduce((hashVal, key) => {\n        hashVal = stringHash(key, hashVal);\n        return doHash(obj[key], hashVal);\n    }, initialHashVal);\n}\nfunction leftRotate(value, bits, totalBits = 32) {\n    // delta + bits = totalBits\n    const delta = totalBits - bits;\n    // All ones, expect `delta` zeros aligned to the right\n    const mask = ~((1 << delta) - 1);\n    // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)\n    return ((value << bits) | ((mask & value) >>> delta)) >>> 0;\n}\nfunction fill(dest, index = 0, count = dest.byteLength, value = 0) {\n    for (let i = 0; i < count; i++) {\n        dest[index + i] = value;\n    }\n}\nfunction leftPad(value, length, char = \'0\') {\n    while (value.length < length) {\n        value = char + value;\n    }\n    return value;\n}\nfunction toHexString(bufferOrValue, bitsize = 32) {\n    if (bufferOrValue instanceof ArrayBuffer) {\n        return Array.from(new Uint8Array(bufferOrValue)).map(b => b.toString(16).padStart(2, \'0\')).join(\'\');\n    }\n    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);\n}\n/**\n * A SHA1 implementation that works with strings and does not allocate.\n */\nclass StringSHA1 {\n    constructor() {\n        this._h0 = 0x67452301;\n        this._h1 = 0xEFCDAB89;\n        this._h2 = 0x98BADCFE;\n        this._h3 = 0x10325476;\n        this._h4 = 0xC3D2E1F0;\n        this._buff = new Uint8Array(64 /* BLOCK_SIZE */ + 3 /* to fit any utf-8 */);\n        this._buffDV = new DataView(this._buff.buffer);\n        this._buffLen = 0;\n        this._totalLen = 0;\n        this._leftoverHighSurrogate = 0;\n        this._finished = false;\n    }\n    update(str) {\n        const strLen = str.length;\n        if (strLen === 0) {\n            return;\n        }\n        const buff = this._buff;\n        let buffLen = this._buffLen;\n        let leftoverHighSurrogate = this._leftoverHighSurrogate;\n        let charCode;\n        let offset;\n        if (leftoverHighSurrogate !== 0) {\n            charCode = leftoverHighSurrogate;\n            offset = -1;\n            leftoverHighSurrogate = 0;\n        }\n        else {\n            charCode = str.charCodeAt(0);\n            offset = 0;\n        }\n        while (true) {\n            let codePoint = charCode;\n            if (isHighSurrogate(charCode)) {\n                if (offset + 1 < strLen) {\n                    const nextCharCode = str.charCodeAt(offset + 1);\n                    if (isLowSurrogate(nextCharCode)) {\n                        offset++;\n                        codePoint = computeCodePoint(charCode, nextCharCode);\n                    }\n                    else {\n                        // illegal => unicode replacement character\n                        codePoint = 65533 /* UNICODE_REPLACEMENT */;\n                    }\n                }\n                else {\n                    // last character is a surrogate pair\n                    leftoverHighSurrogate = charCode;\n                    break;\n                }\n            }\n            else if (isLowSurrogate(charCode)) {\n                // illegal => unicode replacement character\n                codePoint = 65533 /* UNICODE_REPLACEMENT */;\n            }\n            buffLen = this._push(buff, buffLen, codePoint);\n            offset++;\n            if (offset < strLen) {\n                charCode = str.charCodeAt(offset);\n            }\n            else {\n                break;\n            }\n        }\n        this._buffLen = buffLen;\n        this._leftoverHighSurrogate = leftoverHighSurrogate;\n    }\n    _push(buff, buffLen, codePoint) {\n        if (codePoint < 0x0080) {\n            buff[buffLen++] = codePoint;\n        }\n        else if (codePoint < 0x0800) {\n            buff[buffLen++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n        }\n        else if (codePoint < 0x10000) {\n            buff[buffLen++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n        }\n        else {\n            buff[buffLen++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n        }\n        if (buffLen >= 64 /* BLOCK_SIZE */) {\n            this._step();\n            buffLen -= 64 /* BLOCK_SIZE */;\n            this._totalLen += 64 /* BLOCK_SIZE */;\n            // take last 3 in case of UTF8 overflow\n            buff[0] = buff[64 /* BLOCK_SIZE */ + 0];\n            buff[1] = buff[64 /* BLOCK_SIZE */ + 1];\n            buff[2] = buff[64 /* BLOCK_SIZE */ + 2];\n        }\n        return buffLen;\n    }\n    digest() {\n        if (!this._finished) {\n            this._finished = true;\n            if (this._leftoverHighSurrogate) {\n                // illegal => unicode replacement character\n                this._leftoverHighSurrogate = 0;\n                this._buffLen = this._push(this._buff, this._buffLen, 65533 /* UNICODE_REPLACEMENT */);\n            }\n            this._totalLen += this._buffLen;\n            this._wrapUp();\n        }\n        return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);\n    }\n    _wrapUp() {\n        this._buff[this._buffLen++] = 0x80;\n        fill(this._buff, this._buffLen);\n        if (this._buffLen > 56) {\n            this._step();\n            fill(this._buff);\n        }\n        // this will fit because the mantissa can cover up to 52 bits\n        const ml = 8 * this._totalLen;\n        this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);\n        this._buffDV.setUint32(60, ml % 4294967296, false);\n        this._step();\n    }\n    _step() {\n        const bigBlock32 = StringSHA1._bigBlock32;\n        const data = this._buffDV;\n        for (let j = 0; j < 64 /* 16*4 */; j += 4) {\n            bigBlock32.setUint32(j, data.getUint32(j, false), false);\n        }\n        for (let j = 64; j < 320 /* 80*4 */; j += 4) {\n            bigBlock32.setUint32(j, leftRotate((bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false)), 1), false);\n        }\n        let a = this._h0;\n        let b = this._h1;\n        let c = this._h2;\n        let d = this._h3;\n        let e = this._h4;\n        let f, k;\n        let temp;\n        for (let j = 0; j < 80; j++) {\n            if (j < 20) {\n                f = (b & c) | ((~b) & d);\n                k = 0x5A827999;\n            }\n            else if (j < 40) {\n                f = b ^ c ^ d;\n                k = 0x6ED9EBA1;\n            }\n            else if (j < 60) {\n                f = (b & c) | (b & d) | (c & d);\n                k = 0x8F1BBCDC;\n            }\n            else {\n                f = b ^ c ^ d;\n                k = 0xCA62C1D6;\n            }\n            temp = (leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false)) & 0xffffffff;\n            e = d;\n            d = c;\n            c = leftRotate(b, 30);\n            b = a;\n            a = temp;\n        }\n        this._h0 = (this._h0 + a) & 0xffffffff;\n        this._h1 = (this._h1 + b) & 0xffffffff;\n        this._h2 = (this._h2 + c) & 0xffffffff;\n        this._h3 = (this._h3 + d) & 0xffffffff;\n        this._h4 = (this._h4 + e) & 0xffffffff;\n    }\n}\nStringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass StringDiffSequence {\n    constructor(source) {\n        this.source = source;\n    }\n    getElements() {\n        const source = this.source;\n        const characters = new Int32Array(source.length);\n        for (let i = 0, len = source.length; i < len; i++) {\n            characters[i] = source.charCodeAt(i);\n        }\n        return characters;\n    }\n}\nfunction stringDiff(original, modified, pretty) {\n    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\n}\n//\n// The code below has been ported from a C# implementation in VS\n//\nclass Debug {\n    static Assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nclass MyArray {\n    /**\n     * Copies a range of elements from an Array starting at the specified source index and pastes\n     * them to another Array starting at the specified destination index. The length and the indexes\n     * are specified as 64-bit integers.\n     * sourceArray:\n     *\t\tThe Array that contains the data to copy.\n     * sourceIndex:\n     *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\n     * destinationArray:\n     *\t\tThe Array that receives the data.\n     * destinationIndex:\n     *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\n     * length:\n     *\t\tA 64-bit integer that represents the number of elements to copy.\n     */\n    static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n        }\n    }\n    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n        }\n    }\n}\n/**\n * A utility class which helps to create the set of DiffChanges from\n * a difference operation. This class accepts original DiffElements and\n * modified DiffElements that are involved in a particular change. The\n * MarktNextChange() method can be called to mark the separation between\n * distinct changes. At the end, the Changes property can be called to retrieve\n * the constructed changes.\n */\nclass DiffChangeHelper {\n    /**\n     * Constructs a new DiffChangeHelper for the given DiffSequences.\n     */\n    constructor() {\n        this.m_changes = [];\n        this.m_originalStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n        this.m_modifiedStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n        this.m_originalCount = 0;\n        this.m_modifiedCount = 0;\n    }\n    /**\n     * Marks the beginning of the next change in the set of differences.\n     */\n    MarkNextChange() {\n        // Only add to the list if there is something to add\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Add the new change to our list\n            this.m_changes.push(new DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\n        }\n        // Reset for the next change\n        this.m_originalCount = 0;\n        this.m_modifiedCount = 0;\n        this.m_originalStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n        this.m_modifiedStart = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n    }\n    /**\n     * Adds the original element at the given position to the elements\n     * affected by the current change. The modified index gives context\n     * to the change position with respect to the original sequence.\n     * @param originalIndex The index of the original element to add.\n     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\n     */\n    AddOriginalElement(originalIndex, modifiedIndex) {\n        // The \'true\' start index is the smallest of the ones we\'ve seen\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n        this.m_originalCount++;\n    }\n    /**\n     * Adds the modified element at the given position to the elements\n     * affected by the current change. The original index gives context\n     * to the change position with respect to the modified sequence.\n     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\n     * @param modifiedIndex The index of the modified element to add.\n     */\n    AddModifiedElement(originalIndex, modifiedIndex) {\n        // The \'true\' start index is the smallest of the ones we\'ve seen\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n        this.m_modifiedCount++;\n    }\n    /**\n     * Retrieves all of the changes marked by the class.\n     */\n    getChanges() {\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Finish up on whatever is left\n            this.MarkNextChange();\n        }\n        return this.m_changes;\n    }\n    /**\n     * Retrieves all of the changes marked by the class in the reverse order\n     */\n    getReverseChanges() {\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Finish up on whatever is left\n            this.MarkNextChange();\n        }\n        this.m_changes.reverse();\n        return this.m_changes;\n    }\n}\n/**\n * An implementation of the difference algorithm described in\n * "An O(ND) Difference Algorithm and its variations" by Eugene W. Myers\n */\nclass LcsDiff {\n    /**\n     * Constructs the DiffFinder\n     */\n    constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {\n        this.ContinueProcessingPredicate = continueProcessingPredicate;\n        const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);\n        const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);\n        this._hasStrings = (originalHasStrings && modifiedHasStrings);\n        this._originalStringElements = originalStringElements;\n        this._originalElementsOrHash = originalElementsOrHash;\n        this._modifiedStringElements = modifiedStringElements;\n        this._modifiedElementsOrHash = modifiedElementsOrHash;\n        this.m_forwardHistory = [];\n        this.m_reverseHistory = [];\n    }\n    static _isStringArray(arr) {\n        return (arr.length > 0 && typeof arr[0] === \'string\');\n    }\n    static _getElements(sequence) {\n        const elements = sequence.getElements();\n        if (LcsDiff._isStringArray(elements)) {\n            const hashes = new Int32Array(elements.length);\n            for (let i = 0, len = elements.length; i < len; i++) {\n                hashes[i] = stringHash(elements[i], 0);\n            }\n            return [elements, hashes, true];\n        }\n        if (elements instanceof Int32Array) {\n            return [[], elements, false];\n        }\n        return [[], new Int32Array(elements), false];\n    }\n    ElementsAreEqual(originalIndex, newIndex) {\n        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\n            return false;\n        }\n        return (this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true);\n    }\n    OriginalElementsAreEqual(index1, index2) {\n        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\n            return false;\n        }\n        return (this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true);\n    }\n    ModifiedElementsAreEqual(index1, index2) {\n        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\n            return false;\n        }\n        return (this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true);\n    }\n    ComputeDiff(pretty) {\n        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\n    }\n    /**\n     * Computes the differences between the original and modified input\n     * sequences on the bounded range.\n     * @returns An array of the differences between the two input sequences.\n     */\n    _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\n        const quitEarlyArr = [false];\n        let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\n        if (pretty) {\n            // We have to clean up the computed diff to be more intuitive\n            // but it turns out this cannot be done correctly until the entire set\n            // of diffs have been computed\n            changes = this.PrettifyChanges(changes);\n        }\n        return {\n            quitEarly: quitEarlyArr[0],\n            changes: changes\n        };\n    }\n    /**\n     * Private helper method which computes the differences on the bounded range\n     * recursively.\n     * @returns An array of the differences between the two input sequences.\n     */\n    ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\n        quitEarlyArr[0] = false;\n        // Find the start of the differences\n        while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\n            originalStart++;\n            modifiedStart++;\n        }\n        // Find the end of the differences\n        while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\n            originalEnd--;\n            modifiedEnd--;\n        }\n        // In the special case where we either have all insertions or all deletions or the sequences are identical\n        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\n            let changes;\n            if (modifiedStart <= modifiedEnd) {\n                Debug.Assert(originalStart === originalEnd + 1, \'originalStart should only be one more than originalEnd\');\n                // All insertions\n                changes = [\n                    new DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)\n                ];\n            }\n            else if (originalStart <= originalEnd) {\n                Debug.Assert(modifiedStart === modifiedEnd + 1, \'modifiedStart should only be one more than modifiedEnd\');\n                // All deletions\n                changes = [\n                    new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)\n                ];\n            }\n            else {\n                Debug.Assert(originalStart === originalEnd + 1, \'originalStart should only be one more than originalEnd\');\n                Debug.Assert(modifiedStart === modifiedEnd + 1, \'modifiedStart should only be one more than modifiedEnd\');\n                // Identical sequences - No differences\n                changes = [];\n            }\n            return changes;\n        }\n        // This problem can be solved using the Divide-And-Conquer technique.\n        const midOriginalArr = [0];\n        const midModifiedArr = [0];\n        const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\n        const midOriginal = midOriginalArr[0];\n        const midModified = midModifiedArr[0];\n        if (result !== null) {\n            // Result is not-null when there was enough memory to compute the changes while\n            // searching for the recursion point\n            return result;\n        }\n        else if (!quitEarlyArr[0]) {\n            // We can break the problem down recursively by finding the changes in the\n            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\n            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\n            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\n            const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\n            let rightChanges = [];\n            if (!quitEarlyArr[0]) {\n                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\n            }\n            else {\n                // We did\'t have time to finish the first half, so we don\'t have time to compute this half.\n                // Consider the entire rest of the sequence different.\n                rightChanges = [\n                    new DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)\n                ];\n            }\n            return this.ConcatenateChanges(leftChanges, rightChanges);\n        }\n        // If we hit here, we quit early, and so can\'t return anything meaningful\n        return [\n            new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\n        ];\n    }\n    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\n        let forwardChanges = null;\n        let reverseChanges = null;\n        // First, walk backward through the forward diagonals history\n        let changeHelper = new DiffChangeHelper();\n        let diagonalMin = diagonalForwardStart;\n        let diagonalMax = diagonalForwardEnd;\n        let diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalForwardOffset;\n        let lastOriginalIndex = -1073741824 /* MIN_SAFE_SMALL_INTEGER */;\n        let historyIndex = this.m_forwardHistory.length - 1;\n        do {\n            // Get the diagonal index from the relative diagonal number\n            const diagonal = diagonalRelative + diagonalForwardBase;\n            // Figure out where we came from\n            if (diagonal === diagonalMin || (diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\n                // Vertical line (the element is an insert)\n                originalIndex = forwardPoints[diagonal + 1];\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n                if (originalIndex < lastOriginalIndex) {\n                    changeHelper.MarkNextChange();\n                }\n                lastOriginalIndex = originalIndex;\n                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\n                diagonalRelative = (diagonal + 1) - diagonalForwardBase; //Setup for the next iteration\n            }\n            else {\n                // Horizontal line (the element is a deletion)\n                originalIndex = forwardPoints[diagonal - 1] + 1;\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n                if (originalIndex < lastOriginalIndex) {\n                    changeHelper.MarkNextChange();\n                }\n                lastOriginalIndex = originalIndex - 1;\n                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\n                diagonalRelative = (diagonal - 1) - diagonalForwardBase; //Setup for the next iteration\n            }\n            if (historyIndex >= 0) {\n                forwardPoints = this.m_forwardHistory[historyIndex];\n                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\n                diagonalMin = 1;\n                diagonalMax = forwardPoints.length - 1;\n            }\n        } while (--historyIndex >= -1);\n        // Ironically, we get the forward changes as the reverse of the\n        // order we added them since we technically added them backwards\n        forwardChanges = changeHelper.getReverseChanges();\n        if (quitEarlyArr[0]) {\n            // TODO: Calculate a partial from the reverse diagonals.\n            //       For now, just assume everything after the midOriginal/midModified point is a diff\n            let originalStartPoint = midOriginalArr[0] + 1;\n            let modifiedStartPoint = midModifiedArr[0] + 1;\n            if (forwardChanges !== null && forwardChanges.length > 0) {\n                const lastForwardChange = forwardChanges[forwardChanges.length - 1];\n                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\n                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\n            }\n            reverseChanges = [\n                new DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)\n            ];\n        }\n        else {\n            // Now walk backward through the reverse diagonals history\n            changeHelper = new DiffChangeHelper();\n            diagonalMin = diagonalReverseStart;\n            diagonalMax = diagonalReverseEnd;\n            diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalReverseOffset;\n            lastOriginalIndex = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            historyIndex = (deltaIsEven) ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\n            do {\n                // Get the diagonal index from the relative diagonal number\n                const diagonal = diagonalRelative + diagonalReverseBase;\n                // Figure out where we came from\n                if (diagonal === diagonalMin || (diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\n                    // Horizontal line (the element is a deletion))\n                    originalIndex = reversePoints[diagonal + 1] - 1;\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n                    if (originalIndex > lastOriginalIndex) {\n                        changeHelper.MarkNextChange();\n                    }\n                    lastOriginalIndex = originalIndex + 1;\n                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\n                    diagonalRelative = (diagonal + 1) - diagonalReverseBase; //Setup for the next iteration\n                }\n                else {\n                    // Vertical line (the element is an insertion)\n                    originalIndex = reversePoints[diagonal - 1];\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n                    if (originalIndex > lastOriginalIndex) {\n                        changeHelper.MarkNextChange();\n                    }\n                    lastOriginalIndex = originalIndex;\n                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\n                    diagonalRelative = (diagonal - 1) - diagonalReverseBase; //Setup for the next iteration\n                }\n                if (historyIndex >= 0) {\n                    reversePoints = this.m_reverseHistory[historyIndex];\n                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\n                    diagonalMin = 1;\n                    diagonalMax = reversePoints.length - 1;\n                }\n            } while (--historyIndex >= -1);\n            // There are cases where the reverse history will find diffs that\n            // are correct, but not intuitive, so we need shift them.\n            reverseChanges = changeHelper.getChanges();\n        }\n        return this.ConcatenateChanges(forwardChanges, reverseChanges);\n    }\n    /**\n     * Given the range to compute the diff on, this method finds the point:\n     * (midOriginal, midModified)\n     * that exists in the middle of the LCS of the two sequences and\n     * is the point at which the LCS problem may be broken down recursively.\n     * This method will try to keep the LCS trace in memory. If the LCS recursion\n     * point is calculated and the full trace is available in memory, then this method\n     * will return the change list.\n     * @param originalStart The start bound of the original sequence range\n     * @param originalEnd The end bound of the original sequence range\n     * @param modifiedStart The start bound of the modified sequence range\n     * @param modifiedEnd The end bound of the modified sequence range\n     * @param midOriginal The middle point of the original sequence range\n     * @param midModified The middle point of the modified sequence range\n     * @returns The diff changes, if available, otherwise null\n     */\n    ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\n        let originalIndex = 0, modifiedIndex = 0;\n        let diagonalForwardStart = 0, diagonalForwardEnd = 0;\n        let diagonalReverseStart = 0, diagonalReverseEnd = 0;\n        // To traverse the edit graph and produce the proper LCS, our actual\n        // start position is just outside the given boundary\n        originalStart--;\n        modifiedStart--;\n        // We set these up to make the compiler happy, but they will\n        // be replaced before we return with the actual recursion point\n        midOriginalArr[0] = 0;\n        midModifiedArr[0] = 0;\n        // Clear out the history\n        this.m_forwardHistory = [];\n        this.m_reverseHistory = [];\n        // Each cell in the two arrays corresponds to a diagonal in the edit graph.\n        // The integer value in the cell represents the originalIndex of the furthest\n        // reaching point found so far that ends in that diagonal.\n        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\n        const maxDifferences = (originalEnd - originalStart) + (modifiedEnd - modifiedStart);\n        const numDiagonals = maxDifferences + 1;\n        const forwardPoints = new Int32Array(numDiagonals);\n        const reversePoints = new Int32Array(numDiagonals);\n        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\n        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\n        const diagonalForwardBase = (modifiedEnd - modifiedStart);\n        const diagonalReverseBase = (originalEnd - originalStart);\n        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n        //    diagonal number (relative to diagonalForwardBase)\n        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n        //    diagonal number (relative to diagonalReverseBase)\n        const diagonalForwardOffset = (originalStart - modifiedStart);\n        const diagonalReverseOffset = (originalEnd - modifiedEnd);\n        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\n        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\n        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\n        const delta = diagonalReverseBase - diagonalForwardBase;\n        const deltaIsEven = (delta % 2 === 0);\n        // Here we set up the start and end points as the furthest points found so far\n        // in both the forward and reverse directions, respectively\n        forwardPoints[diagonalForwardBase] = originalStart;\n        reversePoints[diagonalReverseBase] = originalEnd;\n        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\n        quitEarlyArr[0] = false;\n        // A couple of points:\n        // --With this method, we iterate on the number of differences between the two sequences.\n        //   The more differences there actually are, the longer this will take.\n        // --Also, as the number of differences increases, we have to search on diagonals further\n        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\n        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\n        //   is even and odd diagonals only when numDifferences is odd.\n        for (let numDifferences = 1; numDifferences <= (maxDifferences / 2) + 1; numDifferences++) {\n            let furthestOriginalIndex = 0;\n            let furthestModifiedIndex = 0;\n            // Run the algorithm in the forward direction\n            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n            for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\n                // STEP 1: We extend the furthest reaching point in the present diagonal\n                // by looking at the diagonals above and below and picking the one whose point\n                // is further away from the start point (originalStart, modifiedStart)\n                if (diagonal === diagonalForwardStart || (diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\n                    originalIndex = forwardPoints[diagonal + 1];\n                }\n                else {\n                    originalIndex = forwardPoints[diagonal - 1] + 1;\n                }\n                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;\n                // Save the current originalIndex so we can test for false overlap in step 3\n                const tempOriginalIndex = originalIndex;\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n                // so long as the elements are equal.\n                while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\n                    originalIndex++;\n                    modifiedIndex++;\n                }\n                forwardPoints[diagonal] = originalIndex;\n                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\n                    furthestOriginalIndex = originalIndex;\n                    furthestModifiedIndex = modifiedIndex;\n                }\n                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\n                // and diagonal is in the range of reverse diagonals computed for numDifferences-1\n                // (the previous iteration; we haven\'t computed reverse diagonals for numDifferences yet)\n                // then check for overlap.\n                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= (numDifferences - 1)) {\n                    if (originalIndex >= reversePoints[diagonal]) {\n                        midOriginalArr[0] = originalIndex;\n                        midModifiedArr[0] = modifiedIndex;\n                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* MaxDifferencesHistory */ + 1)) {\n                            // BINGO! We overlapped, and we have the full trace in memory!\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                        }\n                        else {\n                            // Either false overlap, or we didn\'t have enough memory for the full trace\n                            // Just return the recursion point\n                            return null;\n                        }\n                    }\n                }\n            }\n            // Check to see if we should be quitting early, before moving on to the next iteration.\n            const matchLengthOfLongest = ((furthestOriginalIndex - originalStart) + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\n            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\n                // We can\'t finish, so skip ahead to generating a result from what we have.\n                quitEarlyArr[0] = true;\n                // Use the furthest distance we got in the forward direction.\n                midOriginalArr[0] = furthestOriginalIndex;\n                midModifiedArr[0] = furthestModifiedIndex;\n                if (matchLengthOfLongest > 0 && 1447 /* MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* MaxDifferencesHistory */ + 1)) {\n                    // Enough of the history is in memory to walk it backwards\n                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                }\n                else {\n                    // We didn\'t actually remember enough of the history.\n                    //Since we are quiting the diff early, we need to shift back the originalStart and modified start\n                    //back into the boundary limits since we decremented their value above beyond the boundary limit.\n                    originalStart++;\n                    modifiedStart++;\n                    return [\n                        new DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\n                    ];\n                }\n            }\n            // Run the algorithm in the reverse direction\n            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n            for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\n                // STEP 1: We extend the furthest reaching point in the present diagonal\n                // by looking at the diagonals above and below and picking the one whose point\n                // is further away from the start point (originalEnd, modifiedEnd)\n                if (diagonal === diagonalReverseStart || (diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\n                    originalIndex = reversePoints[diagonal + 1] - 1;\n                }\n                else {\n                    originalIndex = reversePoints[diagonal - 1];\n                }\n                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;\n                // Save the current originalIndex so we can test for false overlap\n                const tempOriginalIndex = originalIndex;\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n                // as long as the elements are equal.\n                while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\n                    originalIndex--;\n                    modifiedIndex--;\n                }\n                reversePoints[diagonal] = originalIndex;\n                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\n                // and diagonal is in the range of forward diagonals computed for numDifferences\n                // then check for overlap.\n                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\n                    if (originalIndex <= forwardPoints[diagonal]) {\n                        midOriginalArr[0] = originalIndex;\n                        midModifiedArr[0] = modifiedIndex;\n                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* MaxDifferencesHistory */ + 1)) {\n                            // BINGO! We overlapped, and we have the full trace in memory!\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                        }\n                        else {\n                            // Either false overlap, or we didn\'t have enough memory for the full trace\n                            // Just return the recursion point\n                            return null;\n                        }\n                    }\n                }\n            }\n            // Save current vectors to history before the next iteration\n            if (numDifferences <= 1447 /* MaxDifferencesHistory */) {\n                // We are allocating space for one extra int, which we fill with\n                // the index of the diagonal base index\n                let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\n                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\n                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\n                this.m_forwardHistory.push(temp);\n                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\n                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\n                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\n                this.m_reverseHistory.push(temp);\n            }\n        }\n        // If we got here, then we have the full trace in history. We just have to convert it to a change list\n        // NOTE: This part is a bit messy\n        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n    }\n    /**\n     * Shifts the given changes to provide a more intuitive diff.\n     * While the first element in a diff matches the first element after the diff,\n     * we shift the diff down.\n     *\n     * @param changes The list of changes to shift\n     * @returns The shifted changes\n     */\n    PrettifyChanges(changes) {\n        // Shift all the changes down first\n        for (let i = 0; i < changes.length; i++) {\n            const change = changes[i];\n            const originalStop = (i < changes.length - 1) ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\n            const modifiedStop = (i < changes.length - 1) ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\n            const checkOriginal = change.originalLength > 0;\n            const checkModified = change.modifiedLength > 0;\n            while (change.originalStart + change.originalLength < originalStop &&\n                change.modifiedStart + change.modifiedLength < modifiedStop &&\n                (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength)) &&\n                (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\n                change.originalStart++;\n                change.modifiedStart++;\n            }\n            let mergedChangeArr = [null];\n            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\n                changes[i] = mergedChangeArr[0];\n                changes.splice(i + 1, 1);\n                i--;\n                continue;\n            }\n        }\n        // Shift changes back up until we hit empty or whitespace-only lines\n        for (let i = changes.length - 1; i >= 0; i--) {\n            const change = changes[i];\n            let originalStop = 0;\n            let modifiedStop = 0;\n            if (i > 0) {\n                const prevChange = changes[i - 1];\n                originalStop = prevChange.originalStart + prevChange.originalLength;\n                modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\n            }\n            const checkOriginal = change.originalLength > 0;\n            const checkModified = change.modifiedLength > 0;\n            let bestDelta = 0;\n            let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\n            for (let delta = 1;; delta++) {\n                const originalStart = change.originalStart - delta;\n                const modifiedStart = change.modifiedStart - delta;\n                if (originalStart < originalStop || modifiedStart < modifiedStop) {\n                    break;\n                }\n                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\n                    break;\n                }\n                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\n                    break;\n                }\n                const touchingPreviousChange = (originalStart === originalStop && modifiedStart === modifiedStop);\n                const score = ((touchingPreviousChange ? 5 : 0)\n                    + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength));\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestDelta = delta;\n                }\n            }\n            change.originalStart -= bestDelta;\n            change.modifiedStart -= bestDelta;\n            const mergedChangeArr = [null];\n            if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {\n                changes[i - 1] = mergedChangeArr[0];\n                changes.splice(i, 1);\n                i++;\n                continue;\n            }\n        }\n        // There could be multiple longest common substrings.\n        // Give preference to the ones containing longer lines\n        if (this._hasStrings) {\n            for (let i = 1, len = changes.length; i < len; i++) {\n                const aChange = changes[i - 1];\n                const bChange = changes[i];\n                const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;\n                const aOriginalStart = aChange.originalStart;\n                const bOriginalEnd = bChange.originalStart + bChange.originalLength;\n                const abOriginalLength = bOriginalEnd - aOriginalStart;\n                const aModifiedStart = aChange.modifiedStart;\n                const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;\n                const abModifiedLength = bModifiedEnd - aModifiedStart;\n                // Avoid wasting a lot of time with these searches\n                if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {\n                    const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);\n                    if (t) {\n                        const [originalMatchStart, modifiedMatchStart] = t;\n                        if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {\n                            // switch to another sequence that has a better score\n                            aChange.originalLength = originalMatchStart - aChange.originalStart;\n                            aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;\n                            bChange.originalStart = originalMatchStart + matchedLength;\n                            bChange.modifiedStart = modifiedMatchStart + matchedLength;\n                            bChange.originalLength = bOriginalEnd - bChange.originalStart;\n                            bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;\n                        }\n                    }\n                }\n            }\n        }\n        return changes;\n    }\n    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {\n        if (originalLength < desiredLength || modifiedLength < desiredLength) {\n            return null;\n        }\n        const originalMax = originalStart + originalLength - desiredLength + 1;\n        const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;\n        let bestScore = 0;\n        let bestOriginalStart = 0;\n        let bestModifiedStart = 0;\n        for (let i = originalStart; i < originalMax; i++) {\n            for (let j = modifiedStart; j < modifiedMax; j++) {\n                const score = this._contiguousSequenceScore(i, j, desiredLength);\n                if (score > 0 && score > bestScore) {\n                    bestScore = score;\n                    bestOriginalStart = i;\n                    bestModifiedStart = j;\n                }\n            }\n        }\n        if (bestScore > 0) {\n            return [bestOriginalStart, bestModifiedStart];\n        }\n        return null;\n    }\n    _contiguousSequenceScore(originalStart, modifiedStart, length) {\n        let score = 0;\n        for (let l = 0; l < length; l++) {\n            if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {\n                return 0;\n            }\n            score += this._originalStringElements[originalStart + l].length;\n        }\n        return score;\n    }\n    _OriginalIsBoundary(index) {\n        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\n            return true;\n        }\n        return (this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]));\n    }\n    _OriginalRegionIsBoundary(originalStart, originalLength) {\n        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\n            return true;\n        }\n        if (originalLength > 0) {\n            const originalEnd = originalStart + originalLength;\n            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _ModifiedIsBoundary(index) {\n        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\n            return true;\n        }\n        return (this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]));\n    }\n    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {\n        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\n            return true;\n        }\n        if (modifiedLength > 0) {\n            const modifiedEnd = modifiedStart + modifiedLength;\n            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {\n        const originalScore = (this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0);\n        const modifiedScore = (this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0);\n        return (originalScore + modifiedScore);\n    }\n    /**\n     * Concatenates the two input DiffChange lists and returns the resulting\n     * list.\n     * @param The left changes\n     * @param The right changes\n     * @returns The concatenated list\n     */\n    ConcatenateChanges(left, right) {\n        let mergedChangeArr = [];\n        if (left.length === 0 || right.length === 0) {\n            return (right.length > 0) ? right : left;\n        }\n        else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\n            // Since we break the problem down recursively, it is possible that we\n            // might recurse in the middle of a change thereby splitting it into\n            // two changes. Here in the combining stage, we detect and fuse those\n            // changes back together\n            const result = new Array(left.length + right.length - 1);\n            MyArray.Copy(left, 0, result, 0, left.length - 1);\n            result[left.length - 1] = mergedChangeArr[0];\n            MyArray.Copy(right, 1, result, left.length, right.length - 1);\n            return result;\n        }\n        else {\n            const result = new Array(left.length + right.length);\n            MyArray.Copy(left, 0, result, 0, left.length);\n            MyArray.Copy(right, 0, result, left.length, right.length);\n            return result;\n        }\n    }\n    /**\n     * Returns true if the two changes overlap and can be merged into a single\n     * change\n     * @param left The left change\n     * @param right The right change\n     * @param mergedChange The merged change if the two overlap, null otherwise\n     * @returns True if the two changes overlap\n     */\n    ChangesOverlap(left, right, mergedChangeArr) {\n        Debug.Assert(left.originalStart <= right.originalStart, \'Left change is not less than or equal to right change\');\n        Debug.Assert(left.modifiedStart <= right.modifiedStart, \'Left change is not less than or equal to right change\');\n        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n            const originalStart = left.originalStart;\n            let originalLength = left.originalLength;\n            const modifiedStart = left.modifiedStart;\n            let modifiedLength = left.modifiedLength;\n            if (left.originalStart + left.originalLength >= right.originalStart) {\n                originalLength = right.originalStart + right.originalLength - left.originalStart;\n            }\n            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\n            }\n            mergedChangeArr[0] = new DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\n            return true;\n        }\n        else {\n            mergedChangeArr[0] = null;\n            return false;\n        }\n    }\n    /**\n     * Helper method used to clip a diagonal index to the range of valid\n     * diagonals. This also decides whether or not the diagonal index,\n     * if it exceeds the boundary, should be clipped to the boundary or clipped\n     * one inside the boundary depending on the Even/Odd status of the boundary\n     * and numDifferences.\n     * @param diagonal The index of the diagonal to clip.\n     * @param numDifferences The current number of differences being iterated upon.\n     * @param diagonalBaseIndex The base reference diagonal.\n     * @param numDiagonals The total number of diagonals.\n     * @returns The clipped diagonal index.\n     */\n    ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\n        if (diagonal >= 0 && diagonal < numDiagonals) {\n            // Nothing to clip, its in range\n            return diagonal;\n        }\n        // diagonalsBelow: The number of diagonals below the reference diagonal\n        // diagonalsAbove: The number of diagonals above the reference diagonal\n        const diagonalsBelow = diagonalBaseIndex;\n        const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\n        const diffEven = (numDifferences % 2 === 0);\n        if (diagonal < 0) {\n            const lowerBoundEven = (diagonalsBelow % 2 === 0);\n            return (diffEven === lowerBoundEven) ? 0 : 1;\n        }\n        else {\n            const upperBoundEven = (diagonalsAbove % 2 === 0);\n            return (diffEven === upperBoundEven) ? numDiagonals - 1 : numDiagonals - 2;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/process.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nlet safeProcess;\n// Native sandbox environment\nif (typeof globals.vscode !== \'undefined\' && typeof globals.vscode.process !== \'undefined\') {\n    const sandboxProcess = globals.vscode.process;\n    safeProcess = {\n        get platform() { return sandboxProcess.platform; },\n        get env() { return sandboxProcess.env; },\n        cwd() { return sandboxProcess.cwd(); },\n        nextTick(callback) { return setImmediate(callback); }\n    };\n}\n// Native node.js environment\nelse if (typeof process !== \'undefined\') {\n    safeProcess = {\n        get platform() { return process.platform; },\n        get env() { return process.env; },\n        cwd() { return process.env[\'VSCODE_CWD\'] || process.cwd(); },\n        nextTick(callback) { return process.nextTick(callback); }\n    };\n}\n// Web environment\nelse {\n    safeProcess = {\n        // Supported\n        get platform() { return isWindows ? \'win32\' : isMacintosh ? \'darwin\' : \'linux\'; },\n        nextTick(callback) { return setImmediate(callback); },\n        // Unsupported\n        get env() { return Object.create(null); },\n        cwd() { return \'/\'; }\n    };\n}\n/**\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `/`.\n */\nconst cwd = safeProcess.cwd;\n/**\n * Provides safe access to the `env` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `{}`.\n */\nconst env = safeProcess.env;\n/**\n * Provides safe access to the `platform` property in node.js, sandboxed or web\n * environments.\n */\nconst platform = safeProcess.platform;\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/path.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode\'s copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/blob/v12.8.1/lib/path.js\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * "Software"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst CHAR_UPPERCASE_A = 65; /* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\nclass ErrorInvalidArgType extends Error {\n    constructor(name, expected, actual) {\n        // determiner: \'must be\' or \'must not be\'\n        let determiner;\n        if (typeof expected === \'string\' && expected.indexOf(\'not \') === 0) {\n            determiner = \'must not be\';\n            expected = expected.replace(/^not /, \'\');\n        }\n        else {\n            determiner = \'must be\';\n        }\n        const type = name.indexOf(\'.\') !== -1 ? \'property\' : \'argument\';\n        let msg = `The "${name}" ${type} ${determiner} of type ${expected}`;\n        msg += `. Received type ${typeof actual}`;\n        super(msg);\n        this.code = \'ERR_INVALID_ARG_TYPE\';\n    }\n}\nfunction validateString(value, name) {\n    if (typeof value !== \'string\') {\n        throw new ErrorInvalidArgType(name, \'string\', value);\n    }\n}\nfunction isPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n    return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z ||\n        code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n    let res = \'\';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = 0;\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (isPathSeparator(code)) {\n            break;\n        }\n        else {\n            code = CHAR_FORWARD_SLASH;\n        }\n        if (isPathSeparator(code)) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (dots === 2) {\n                if (res.length < 2 || lastSegmentLength !== 2 ||\n                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n                    if (res.length > 2) {\n                        const lastSlashIndex = res.lastIndexOf(separator);\n                        if (lastSlashIndex === -1) {\n                            res = \'\';\n                            lastSegmentLength = 0;\n                        }\n                        else {\n                            res = res.slice(0, lastSlashIndex);\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n                        }\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                    else if (res.length !== 0) {\n                        res = \'\';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    res += res.length > 0 ? `${separator}..` : \'..\';\n                    lastSegmentLength = 2;\n                }\n            }\n            else {\n                if (res.length > 0) {\n                    res += `${separator}${path.slice(lastSlash + 1, i)}`;\n                }\n                else {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === CHAR_DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\nfunction _format(sep, pathObject) {\n    if (pathObject === null || typeof pathObject !== \'object\') {\n        throw new ErrorInvalidArgType(\'pathObject\', \'Object\', pathObject);\n    }\n    const dir = pathObject.dir || pathObject.root;\n    const base = pathObject.base ||\n        `${pathObject.name || \'\'}${pathObject.ext || \'\'}`;\n    if (!dir) {\n        return base;\n    }\n    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\n}\nconst win32 = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedDevice = \'\';\n        let resolvedTail = \'\';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1; i--) {\n            let path;\n            if (i >= 0) {\n                path = pathSegments[i];\n                validateString(path, \'path\');\n                // Skip empty entries\n                if (path.length === 0) {\n                    continue;\n                }\n            }\n            else if (resolvedDevice.length === 0) {\n                path = cwd();\n            }\n            else {\n                // Windows has the concept of drive-specific current working\n                // directories. If we\'ve resolved a drive letter but not yet an\n                // absolute path, get cwd for that drive, or the process cwd if\n                // the drive cwd is not available. We\'re sure the device is not\n                // a UNC path at this points, because UNC paths are always absolute.\n                path = env[`=${resolvedDevice}`] || cwd();\n                // Verify that a cwd was found and that it actually points\n                // to our drive. If not, default to the drive\'s root.\n                if (path === undefined ||\n                    path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&\n                        path.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n                    path = `${resolvedDevice}\\\\`;\n                }\n            }\n            const len = path.length;\n            let rootEnd = 0;\n            let device = \'\';\n            let isAbsolute = false;\n            const code = path.charCodeAt(0);\n            // Try to match a root\n            if (len === 1) {\n                if (isPathSeparator(code)) {\n                    // `path` contains just a path separator\n                    rootEnd = 1;\n                    isAbsolute = true;\n                }\n            }\n            else if (isPathSeparator(code)) {\n                // Possible UNC root\n                // If we started with a separator, we know we at least have an\n                // absolute path of some kind (UNC or otherwise)\n                isAbsolute = true;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    let j = 2;\n                    let last = j;\n                    // Match 1 or more non-path separators\n                    while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        const firstPart = path.slice(last, j);\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                                j++;\n                            }\n                            if (j === len || j !== last) {\n                                // We matched a UNC root\n                                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                                rootEnd = j;\n                            }\n                        }\n                    }\n                }\n                else {\n                    rootEnd = 1;\n                }\n            }\n            else if (isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON) {\n                // Possible device root\n                device = path.slice(0, 2);\n                rootEnd = 2;\n                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                    // Treat separator following drive name as an absolute path\n                    // indicator\n                    isAbsolute = true;\n                    rootEnd = 3;\n                }\n            }\n            if (device.length > 0) {\n                if (resolvedDevice.length > 0) {\n                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n                        // This path points to another device so it is not applicable\n                        continue;\n                    }\n                }\n                else {\n                    resolvedDevice = device;\n                }\n            }\n            if (resolvedAbsolute) {\n                if (resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n            else {\n                resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\n                resolvedAbsolute = isAbsolute;\n                if (isAbsolute && resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n        }\n        // At this point the path should be resolved to a full absolute path,\n        // but handle relative paths to be safe (might happen when process.cwd()\n        // fails)\n        // Normalize the tail path\n        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, \'\\\\\', isPathSeparator);\n        return resolvedAbsolute ?\n            `${resolvedDevice}\\\\${resolvedTail}` :\n            `${resolvedDevice}${resolvedTail}` || \'.\';\n    },\n    normalize(path) {\n        validateString(path, \'path\');\n        const len = path.length;\n        if (len === 0) {\n            return \'.\';\n        }\n        let rootEnd = 0;\n        let device;\n        let isAbsolute = false;\n        const code = path.charCodeAt(0);\n        // Try to match a root\n        if (len === 1) {\n            // `path` contains just a single char, exit early to avoid\n            // unnecessary work\n            return isPosixPathSeparator(code) ? \'\\\\\' : path;\n        }\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            // If we started with a separator, we know we at least have an absolute\n            // path of some kind (UNC or otherwise)\n            isAbsolute = true;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    const firstPart = path.slice(last, j);\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            // Return the normalized version of the UNC root since there\n                            // is nothing left to process\n                            return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                            rootEnd = j;\n                        }\n                    }\n                }\n            }\n            else {\n                rootEnd = 1;\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            device = path.slice(0, 2);\n            rootEnd = 2;\n            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                // Treat separator following drive name as an absolute path\n                // indicator\n                isAbsolute = true;\n                rootEnd = 3;\n            }\n        }\n        let tail = rootEnd < len ?\n            normalizeString(path.slice(rootEnd), !isAbsolute, \'\\\\\', isPathSeparator) :\n            \'\';\n        if (tail.length === 0 && !isAbsolute) {\n            tail = \'.\';\n        }\n        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n            tail += \'\\\\\';\n        }\n        if (device === undefined) {\n            return isAbsolute ? `\\\\${tail}` : tail;\n        }\n        return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\n    },\n    isAbsolute(path) {\n        validateString(path, \'path\');\n        const len = path.length;\n        if (len === 0) {\n            return false;\n        }\n        const code = path.charCodeAt(0);\n        return isPathSeparator(code) ||\n            // Possible device root\n            len > 2 &&\n                isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON &&\n                isPathSeparator(path.charCodeAt(2));\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return \'.\';\n        }\n        let joined;\n        let firstPart;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, \'path\');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = firstPart = arg;\n                }\n                else {\n                    joined += `\\\\${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return \'.\';\n        }\n        // Make sure that the joined path doesn\'t start with two slashes, because\n        // normalize() will mistake it for an UNC path then.\n        //\n        // This step is skipped when it is very clear that the user actually\n        // intended to point at an UNC path. This is assumed when the first\n        // non-empty string arguments starts with exactly two slashes followed by\n        // at least one more non-slash character.\n        //\n        // Note that for normalize() to treat a path as an UNC path it needs to\n        // have at least 2 components, so we don\'t filter for that here.\n        // This means that the user can use join to construct UNC paths from\n        // a server name and a share name; for example:\n        //   path.join(\'//server\', \'share\') -> \'\\\\\\\\server\\\\share\\\\\')\n        let needsReplace = true;\n        let slashCount = 0;\n        if (typeof firstPart === \'string\' && isPathSeparator(firstPart.charCodeAt(0))) {\n            ++slashCount;\n            const firstLen = firstPart.length;\n            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n                ++slashCount;\n                if (firstLen > 2) {\n                    if (isPathSeparator(firstPart.charCodeAt(2))) {\n                        ++slashCount;\n                    }\n                    else {\n                        // We matched a UNC path in the first part\n                        needsReplace = false;\n                    }\n                }\n            }\n        }\n        if (needsReplace) {\n            // Find any more consecutive slashes we need to replace\n            while (slashCount < joined.length &&\n                isPathSeparator(joined.charCodeAt(slashCount))) {\n                slashCount++;\n            }\n            // Replace the slashes if needed\n            if (slashCount >= 2) {\n                joined = `\\\\${joined.slice(slashCount)}`;\n            }\n        }\n        return win32.normalize(joined);\n    },\n    // It will solve the relative path from `from` to `to`, for instance:\n    //  from = \'C:\\\\orandea\\\\test\\\\aaa\'\n    //  to = \'C:\\\\orandea\\\\impl\\\\bbb\'\n    // The output of the function should be: \'..\\\\..\\\\impl\\\\bbb\'\n    relative(from, to) {\n        validateString(from, \'from\');\n        validateString(to, \'to\');\n        if (from === to) {\n            return \'\';\n        }\n        const fromOrig = win32.resolve(from);\n        const toOrig = win32.resolve(to);\n        if (fromOrig === toOrig) {\n            return \'\';\n        }\n        from = fromOrig.toLowerCase();\n        to = toOrig.toLowerCase();\n        if (from === to) {\n            return \'\';\n        }\n        // Trim any leading backslashes\n        let fromStart = 0;\n        while (fromStart < from.length &&\n            from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n            fromStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let fromEnd = from.length;\n        while (fromEnd - 1 > fromStart &&\n            from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n            fromEnd--;\n        }\n        const fromLen = fromEnd - fromStart;\n        // Trim any leading backslashes\n        let toStart = 0;\n        while (toStart < to.length &&\n            to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            toStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let toEnd = to.length;\n        while (toEnd - 1 > toStart &&\n            to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n            toEnd--;\n        }\n        const toLen = toEnd - toStart;\n        // Compare paths to find the longest common path from root\n        const length = fromLen < toLen ? fromLen : toLen;\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_BACKWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        // We found a mismatch before the first common path separator was seen, so\n        // return the original `to`.\n        if (i !== length) {\n            if (lastCommonSep === -1) {\n                return toOrig;\n            }\n        }\n        else {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from=\'C:\\\\foo\\\\bar\'; to=\'C:\\\\foo\\\\bar\\\\baz\'\n                    return toOrig.slice(toStart + i + 1);\n                }\n                if (i === 2) {\n                    // We get here if `from` is the device root.\n                    // For example: from=\'C:\\\\\'; to=\'C:\\\\foo\'\n                    return toOrig.slice(toStart + i);\n                }\n            }\n            if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from=\'C:\\\\foo\\\\bar\'; to=\'C:\\\\foo\'\n                    lastCommonSep = i;\n                }\n                else if (i === 2) {\n                    // We get here if `to` is the device root.\n                    // For example: from=\'C:\\\\foo\\\\bar\'; to=\'C:\\\\\'\n                    lastCommonSep = 3;\n                }\n            }\n            if (lastCommonSep === -1) {\n                lastCommonSep = 0;\n            }\n        }\n        let out = \'\';\n        // Generate the relative path based on the path difference between `to` and\n        // `from`\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n                out += out.length === 0 ? \'..\' : \'\\\\..\';\n            }\n        }\n        toStart += lastCommonSep;\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts\n        if (out.length > 0) {\n            return `${out}${toOrig.slice(toStart, toEnd)}`;\n        }\n        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            ++toStart;\n        }\n        return toOrig.slice(toStart, toEnd);\n    },\n    toNamespacedPath(path) {\n        // Note: this will *probably* throw somewhere.\n        if (typeof path !== \'string\') {\n            return path;\n        }\n        if (path.length === 0) {\n            return \'\';\n        }\n        const resolvedPath = win32.resolve(path);\n        if (resolvedPath.length <= 2) {\n            return path;\n        }\n        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n            // Possible UNC root\n            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n                const code = resolvedPath.charCodeAt(2);\n                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n                    // Matched non-long UNC root, convert the path to a long UNC path\n                    return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n            resolvedPath.charCodeAt(1) === CHAR_COLON &&\n            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n            // Matched device root, convert the path to a long UNC path\n            return `\\\\\\\\?\\\\${resolvedPath}`;\n        }\n        return path;\n    },\n    dirname(path) {\n        validateString(path, \'path\');\n        const len = path.length;\n        if (len === 0) {\n            return \'.\';\n        }\n        let rootEnd = -1;\n        let offset = 0;\n        const code = path.charCodeAt(0);\n        if (len === 1) {\n            // `path` contains just a path separator, exit early to avoid\n            // unnecessary work or a dot.\n            return isPathSeparator(code) ? path : \'.\';\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = offset = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            return path;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            // Offset by 1 to include the separator after the UNC root to\n                            // treat it as a "normal root" on top of a (UNC) root\n                            rootEnd = offset = j + 1;\n                        }\n                    }\n                }\n            }\n            // Possible device root\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n            offset = rootEnd;\n        }\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = len - 1; i >= offset; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            if (rootEnd === -1) {\n                return \'.\';\n            }\n            end = rootEnd;\n        }\n        return path.slice(0, end);\n    },\n    basename(path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, \'ext\');\n        }\n        validateString(path, \'path\');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            isWindowsDeviceRoot(path.charCodeAt(0)) &&\n            path.charCodeAt(1) === CHAR_COLON) {\n            start = 2;\n        }\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext === path) {\n                return \'\';\n            }\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= start; --i) {\n                const code = path.charCodeAt(i);\n                if (isPathSeparator(code)) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= start; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return \'\';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, \'path\');\n        let start = 0;\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            path.charCodeAt(1) === CHAR_COLON &&\n            isWindowsDeviceRoot(path.charCodeAt(0))) {\n            start = startPart = 2;\n        }\n        for (let i = path.length - 1; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly \'..\'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return \'\';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, \'\\\\\'),\n    parse(path) {\n        validateString(path, \'path\');\n        const ret = { root: \'\', dir: \'\', base: \'\', ext: \'\', name: \'\' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const len = path.length;\n        let rootEnd = 0;\n        let code = path.charCodeAt(0);\n        if (len === 1) {\n            if (isPathSeparator(code)) {\n                // `path` contains just a path separator, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            ret.base = ret.name = path;\n            return ret;\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            rootEnd = j;\n                        }\n                        else if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            rootEnd = j + 1;\n                        }\n                    }\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            if (len <= 2) {\n                // `path` contains just a drive root, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            rootEnd = 2;\n            if (isPathSeparator(path.charCodeAt(2))) {\n                if (len === 3) {\n                    // `path` contains just a drive root, exit early to avoid\n                    // unnecessary work\n                    ret.root = ret.dir = path;\n                    return ret;\n                }\n                rootEnd = 3;\n            }\n        }\n        if (rootEnd > 0) {\n            ret.root = path.slice(0, rootEnd);\n        }\n        let startDot = -1;\n        let startPart = rootEnd;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= rootEnd; --i) {\n            code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly \'..\'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(startPart, end);\n            }\n            else {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        // If the directory is the root, use the entire root as the `dir` including\n        // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n        // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n        if (startPart > 0 && startPart !== rootEnd) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else {\n            ret.dir = ret.root;\n        }\n        return ret;\n    },\n    sep: \'\\\\\',\n    delimiter: \';\',\n    win32: null,\n    posix: null\n};\nconst posix = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedPath = \'\';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            const path = i >= 0 ? pathSegments[i] : cwd();\n            validateString(path, \'path\');\n            // Skip empty entries\n            if (path.length === 0) {\n                continue;\n            }\n            resolvedPath = `${path}/${resolvedPath}`;\n            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        // Normalize the path\n        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, \'/\', isPosixPathSeparator);\n        if (resolvedAbsolute) {\n            return `/${resolvedPath}`;\n        }\n        return resolvedPath.length > 0 ? resolvedPath : \'.\';\n    },\n    normalize(path) {\n        validateString(path, \'path\');\n        if (path.length === 0) {\n            return \'.\';\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n        // Normalize the path\n        path = normalizeString(path, !isAbsolute, \'/\', isPosixPathSeparator);\n        if (path.length === 0) {\n            if (isAbsolute) {\n                return \'/\';\n            }\n            return trailingSeparator ? \'./\' : \'.\';\n        }\n        if (trailingSeparator) {\n            path += \'/\';\n        }\n        return isAbsolute ? `/${path}` : path;\n    },\n    isAbsolute(path) {\n        validateString(path, \'path\');\n        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return \'.\';\n        }\n        let joined;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, \'path\');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = arg;\n                }\n                else {\n                    joined += `/${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return \'.\';\n        }\n        return posix.normalize(joined);\n    },\n    relative(from, to) {\n        validateString(from, \'from\');\n        validateString(to, \'to\');\n        if (from === to) {\n            return \'\';\n        }\n        // Trim leading forward slashes.\n        from = posix.resolve(from);\n        to = posix.resolve(to);\n        if (from === to) {\n            return \'\';\n        }\n        const fromStart = 1;\n        const fromEnd = from.length;\n        const fromLen = fromEnd - fromStart;\n        const toStart = 1;\n        const toLen = to.length - toStart;\n        // Compare paths to find the longest common path from root\n        const length = (fromLen < toLen ? fromLen : toLen);\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_FORWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        if (i === length) {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from=\'/foo/bar\'; to=\'/foo/bar/baz\'\n                    return to.slice(toStart + i + 1);\n                }\n                if (i === 0) {\n                    // We get here if `from` is the root\n                    // For example: from=\'/\'; to=\'/foo\'\n                    return to.slice(toStart + i);\n                }\n            }\n            else if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from=\'/foo/bar/baz\'; to=\'/foo/bar\'\n                    lastCommonSep = i;\n                }\n                else if (i === 0) {\n                    // We get here if `to` is the root.\n                    // For example: from=\'/foo/bar\'; to=\'/\'\n                    lastCommonSep = 0;\n                }\n            }\n        }\n        let out = \'\';\n        // Generate the relative path based on the path difference between `to`\n        // and `from`.\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                out += out.length === 0 ? \'..\' : \'/..\';\n            }\n        }\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts.\n        return `${out}${to.slice(toStart + lastCommonSep)}`;\n    },\n    toNamespacedPath(path) {\n        // Non-op on posix systems\n        return path;\n    },\n    dirname(path) {\n        validateString(path, \'path\');\n        if (path.length === 0) {\n            return \'.\';\n        }\n        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = path.length - 1; i >= 1; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            return hasRoot ? \'/\' : \'.\';\n        }\n        if (hasRoot && end === 1) {\n            return \'//\';\n        }\n        return path.slice(0, end);\n    },\n    basename(path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, \'ext\');\n        }\n        validateString(path, \'path\');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext === path) {\n                return \'\';\n            }\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= 0; --i) {\n                const code = path.charCodeAt(i);\n                if (code === CHAR_FORWARD_SLASH) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return \'\';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, \'path\');\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        for (let i = path.length - 1; i >= 0; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly \'..\'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return \'\';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, \'/\'),\n    parse(path) {\n        validateString(path, \'path\');\n        const ret = { root: \'\', dir: \'\', base: \'\', ext: \'\', name: \'\' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let start;\n        if (isAbsolute) {\n            ret.root = \'/\';\n            start = 1;\n        }\n        else {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            const start = startPart === 0 && isAbsolute ? 1 : startPart;\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly \'..\'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(start, end);\n            }\n            else {\n                ret.name = path.slice(start, startDot);\n                ret.base = path.slice(start, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        if (startPart > 0) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else if (isAbsolute) {\n            ret.dir = \'/\';\n        }\n        return ret;\n    },\n    sep: \'/\',\n    delimiter: \':\',\n    win32: null,\n    posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nconst normalize = (platform === \'win32\' ? win32.normalize : posix.normalize);\nconst resolve = (platform === \'win32\' ? win32.resolve : posix.resolve);\nconst relative = (platform === \'win32\' ? win32.relative : posix.relative);\nconst dirname = (platform === \'win32\' ? win32.dirname : posix.dirname);\nconst basename = (platform === \'win32\' ? win32.basename : posix.basename);\nconst extname = (platform === \'win32\' ? win32.extname : posix.extname);\nconst sep = (platform === \'win32\' ? win32.sep : posix.sep);\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/uri.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\nfunction _validateUri(ret, _strict) {\n    // scheme, must be set\n    if (!ret.scheme && _strict) {\n        throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${ret.authority}", path: "${ret.path}", query: "${ret.query}", fragment: "${ret.fragment}"}`);\n    }\n    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n    // ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )\n    if (ret.scheme && !_schemePattern.test(ret.scheme)) {\n        throw new Error(\'[UriError]: Scheme contains illegal characters.\');\n    }\n    // path, http://tools.ietf.org/html/rfc3986#section-3.3\n    // If a URI contains an authority component, then the path component\n    // must either be empty or begin with a slash ("/") character.  If a URI\n    // does not contain an authority component, then the path cannot begin\n    // with two slash characters ("//").\n    if (ret.path) {\n        if (ret.authority) {\n            if (!_singleSlashStart.test(ret.path)) {\n                throw new Error(\'[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character\');\n            }\n        }\n        else {\n            if (_doubleSlashStart.test(ret.path)) {\n                throw new Error(\'[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")\');\n            }\n        }\n    }\n}\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme, _strict) {\n    if (!scheme && !_strict) {\n        return \'file\';\n    }\n    return scheme;\n}\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme, path) {\n    // the slash-character is our \'default base\' as we don\'t\n    // support constructing URIs relative to other URIs. This\n    // also means that we alter and potentially break paths.\n    // see https://tools.ietf.org/html/rfc3986#section-5.1.4\n    switch (scheme) {\n        case \'https\':\n        case \'http\':\n        case \'file\':\n            if (!path) {\n                path = _slash;\n            }\n            else if (path[0] !== _slash) {\n                path = _slash + path;\n            }\n            break;\n    }\n    return path;\n}\nconst _empty = \'\';\nconst _slash = \'/\';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nclass URI {\n    /**\n     * @internal\n     */\n    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\n        if (typeof schemeOrData === \'object\') {\n            this.scheme = schemeOrData.scheme || _empty;\n            this.authority = schemeOrData.authority || _empty;\n            this.path = schemeOrData.path || _empty;\n            this.query = schemeOrData.query || _empty;\n            this.fragment = schemeOrData.fragment || _empty;\n            // no validation because it\'s this URI\n            // that creates uri components.\n            // _validateUri(this);\n        }\n        else {\n            this.scheme = _schemeFix(schemeOrData, _strict);\n            this.authority = authority || _empty;\n            this.path = _referenceResolution(this.scheme, path || _empty);\n            this.query = query || _empty;\n            this.fragment = fragment || _empty;\n            _validateUri(this, _strict);\n        }\n    }\n    static isUri(thing) {\n        if (thing instanceof URI) {\n            return true;\n        }\n        if (!thing) {\n            return false;\n        }\n        return typeof thing.authority === \'string\'\n            && typeof thing.fragment === \'string\'\n            && typeof thing.path === \'string\'\n            && typeof thing.query === \'string\'\n            && typeof thing.scheme === \'string\'\n            && typeof thing.fsPath === \'string\'\n            && typeof thing.with === \'function\'\n            && typeof thing.toString === \'function\';\n    }\n    // ---- filesystem path -----------------------\n    /**\n     * Returns a string representing the corresponding file system path of this URI.\n     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n     * platform specific path separator.\n     *\n     * * Will *not* validate the path for invalid characters and semantics.\n     * * Will *not* look at the scheme of this URI.\n     * * The result shall *not* be used for display purposes but for accessing a file on disk.\n     *\n     *\n     * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n     *\n     * ```ts\n        const u = URI.parse(\'file://server/c$/folder/file.txt\')\n        u.authority === \'server\'\n        u.path === \'/shares/c$/file.txt\'\n        u.fsPath === \'\\\\server\\c$\\folder\\file.txt\'\n    ```\n     *\n     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it\'s sugar to ease working\n     * with URIs that represent files on disk (`file` scheme).\n     */\n    get fsPath() {\n        // if (this.scheme !== \'file\') {\n        // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n        // }\n        return uriToFsPath(this, false);\n    }\n    // ---- modify to new -------------------------\n    with(change) {\n        if (!change) {\n            return this;\n        }\n        let { scheme, authority, path, query, fragment } = change;\n        if (scheme === undefined) {\n            scheme = this.scheme;\n        }\n        else if (scheme === null) {\n            scheme = _empty;\n        }\n        if (authority === undefined) {\n            authority = this.authority;\n        }\n        else if (authority === null) {\n            authority = _empty;\n        }\n        if (path === undefined) {\n            path = this.path;\n        }\n        else if (path === null) {\n            path = _empty;\n        }\n        if (query === undefined) {\n            query = this.query;\n        }\n        else if (query === null) {\n            query = _empty;\n        }\n        if (fragment === undefined) {\n            fragment = this.fragment;\n        }\n        else if (fragment === null) {\n            fragment = _empty;\n        }\n        if (scheme === this.scheme\n            && authority === this.authority\n            && path === this.path\n            && query === this.query\n            && fragment === this.fragment) {\n            return this;\n        }\n        return new Uri(scheme, authority, path, query, fragment);\n    }\n    // ---- parse & validate ------------------------\n    /**\n     * Creates a new URI from a string, e.g. `http://www.msft.com/some/path`,\n     * `file:///usr/home`, or `scheme:with/path`.\n     *\n     * @param value A string which represents an URI (see `URI#toString`).\n     */\n    static parse(value, _strict = false) {\n        const match = _regexp.exec(value);\n        if (!match) {\n            return new Uri(_empty, _empty, _empty, _empty, _empty);\n        }\n        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\n    }\n    /**\n     * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n     * `/usr/home`, or `\\\\server\\share\\some\\path`.\n     *\n     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n     * `URI.parse(\'file://\' + path)` because the path might contain characters that are\n     * interpreted (# and ?). See the following sample:\n     * ```ts\n    const good = URI.file(\'/coding/c#/project1\');\n    good.scheme === \'file\';\n    good.path === \'/coding/c#/project1\';\n    good.fragment === \'\';\n    const bad = URI.parse(\'file://\' + \'/coding/c#/project1\');\n    bad.scheme === \'file\';\n    bad.path === \'/coding/c\'; // path is now broken\n    bad.fragment === \'/project1\';\n    ```\n     *\n     * @param path A file system path (see `URI#fsPath`)\n     */\n    static file(path) {\n        let authority = _empty;\n        // normalize to fwd-slashes on windows,\n        // on other systems bwd-slashes are valid\n        // filename character, eg /f\\oo/ba\\r.txt\n        if (isWindows) {\n            path = path.replace(/\\\\/g, _slash);\n        }\n        // check for authority as used in UNC shares\n        // or use the path as given\n        if (path[0] === _slash && path[1] === _slash) {\n            const idx = path.indexOf(_slash, 2);\n            if (idx === -1) {\n                authority = path.substring(2);\n                path = _slash;\n            }\n            else {\n                authority = path.substring(2, idx);\n                path = path.substring(idx) || _slash;\n            }\n        }\n        return new Uri(\'file\', authority, path, _empty, _empty);\n    }\n    static from(components) {\n        return new Uri(components.scheme, components.authority, components.path, components.query, components.fragment);\n    }\n    /**\n     * Join a URI path with path fragments and normalizes the resulting path.\n     *\n     * @param uri The input URI.\n     * @param pathFragment The path fragment to add to the URI path.\n     * @returns The resulting URI.\n     */\n    static joinPath(uri, ...pathFragment) {\n        if (!uri.path) {\n            throw new Error(`[UriError]: cannot call joinPath on URI without path`);\n        }\n        let newPath;\n        if (isWindows && uri.scheme === \'file\') {\n            newPath = URI.file(win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\n        }\n        else {\n            newPath = posix.join(uri.path, ...pathFragment);\n        }\n        return uri.with({ path: newPath });\n    }\n    // ---- printing/externalize ---------------------------\n    /**\n     * Creates a string representation for this URI. It\'s guaranteed that calling\n     * `URI.parse` with the result of this function creates an URI which is equal\n     * to this URI.\n     *\n     * * The result shall *not* be used for display purposes but for externalization or transport.\n     * * The result will be encoded using the percentage encoding and encoding happens mostly\n     * ignore the scheme-specific encoding rules.\n     *\n     * @param skipEncoding Do not encode the result, default is `false`\n     */\n    toString(skipEncoding = false) {\n        return _asFormatted(this, skipEncoding);\n    }\n    toJSON() {\n        return this;\n    }\n    static revive(data) {\n        if (!data) {\n            return data;\n        }\n        else if (data instanceof URI) {\n            return data;\n        }\n        else {\n            const result = new Uri(data);\n            result._formatted = data.external;\n            result._fsPath = data._sep === _pathSepMarker ? data.fsPath : null;\n            return result;\n        }\n    }\n}\nconst _pathSepMarker = isWindows ? 1 : undefined;\n// This class exists so that URI is compatibile with vscode.Uri (API).\nclass Uri extends URI {\n    constructor() {\n        super(...arguments);\n        this._formatted = null;\n        this._fsPath = null;\n    }\n    get fsPath() {\n        if (!this._fsPath) {\n            this._fsPath = uriToFsPath(this, false);\n        }\n        return this._fsPath;\n    }\n    toString(skipEncoding = false) {\n        if (!skipEncoding) {\n            if (!this._formatted) {\n                this._formatted = _asFormatted(this, false);\n            }\n            return this._formatted;\n        }\n        else {\n            // we don\'t cache that\n            return _asFormatted(this, true);\n        }\n    }\n    toJSON() {\n        const res = {\n            $mid: 1\n        };\n        // cached state\n        if (this._fsPath) {\n            res.fsPath = this._fsPath;\n            res._sep = _pathSepMarker;\n        }\n        if (this._formatted) {\n            res.external = this._formatted;\n        }\n        // uri components\n        if (this.path) {\n            res.path = this.path;\n        }\n        if (this.scheme) {\n            res.scheme = this.scheme;\n        }\n        if (this.authority) {\n            res.authority = this.authority;\n        }\n        if (this.query) {\n            res.query = this.query;\n        }\n        if (this.fragment) {\n            res.fragment = this.fragment;\n        }\n        return res;\n    }\n}\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable = {\n    [58 /* Colon */]: \'%3A\',\n    [47 /* Slash */]: \'%2F\',\n    [63 /* QuestionMark */]: \'%3F\',\n    [35 /* Hash */]: \'%23\',\n    [91 /* OpenSquareBracket */]: \'%5B\',\n    [93 /* CloseSquareBracket */]: \'%5D\',\n    [64 /* AtSign */]: \'%40\',\n    [33 /* ExclamationMark */]: \'%21\',\n    [36 /* DollarSign */]: \'%24\',\n    [38 /* Ampersand */]: \'%26\',\n    [39 /* SingleQuote */]: \'%27\',\n    [40 /* OpenParen */]: \'%28\',\n    [41 /* CloseParen */]: \'%29\',\n    [42 /* Asterisk */]: \'%2A\',\n    [43 /* Plus */]: \'%2B\',\n    [44 /* Comma */]: \'%2C\',\n    [59 /* Semicolon */]: \'%3B\',\n    [61 /* Equals */]: \'%3D\',\n    [32 /* Space */]: \'%20\',\n};\nfunction encodeURIComponentFast(uriComponent, allowSlash) {\n    let res = undefined;\n    let nativeEncodePos = -1;\n    for (let pos = 0; pos < uriComponent.length; pos++) {\n        const code = uriComponent.charCodeAt(pos);\n        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n        if ((code >= 97 /* a */ && code <= 122 /* z */)\n            || (code >= 65 /* A */ && code <= 90 /* Z */)\n            || (code >= 48 /* Digit0 */ && code <= 57 /* Digit9 */)\n            || code === 45 /* Dash */\n            || code === 46 /* Period */\n            || code === 95 /* Underline */\n            || code === 126 /* Tilde */\n            || (allowSlash && code === 47 /* Slash */)) {\n            // check if we are delaying native encode\n            if (nativeEncodePos !== -1) {\n                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n                nativeEncodePos = -1;\n            }\n            // check if we write into a new string (by default we try to return the param)\n            if (res !== undefined) {\n                res += uriComponent.charAt(pos);\n            }\n        }\n        else {\n            // encoding needed, we need to allocate a new string\n            if (res === undefined) {\n                res = uriComponent.substr(0, pos);\n            }\n            // check with default table first\n            const escaped = encodeTable[code];\n            if (escaped !== undefined) {\n                // check if we are delaying native encode\n                if (nativeEncodePos !== -1) {\n                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n                    nativeEncodePos = -1;\n                }\n                // append escaped variant to result\n                res += escaped;\n            }\n            else if (nativeEncodePos === -1) {\n                // use native encode only when needed\n                nativeEncodePos = pos;\n            }\n        }\n    }\n    if (nativeEncodePos !== -1) {\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n    }\n    return res !== undefined ? res : uriComponent;\n}\nfunction encodeURIComponentMinimal(path) {\n    let res = undefined;\n    for (let pos = 0; pos < path.length; pos++) {\n        const code = path.charCodeAt(pos);\n        if (code === 35 /* Hash */ || code === 63 /* QuestionMark */) {\n            if (res === undefined) {\n                res = path.substr(0, pos);\n            }\n            res += encodeTable[code];\n        }\n        else {\n            if (res !== undefined) {\n                res += path[pos];\n            }\n        }\n    }\n    return res !== undefined ? res : path;\n}\n/**\n * Compute `fsPath` for the given uri\n */\nfunction uriToFsPath(uri, keepDriveLetterCasing) {\n    let value;\n    if (uri.authority && uri.path.length > 1 && uri.scheme === \'file\') {\n        // unc path: file://shares/c$/far/boo\n        value = `//${uri.authority}${uri.path}`;\n    }\n    else if (uri.path.charCodeAt(0) === 47 /* Slash */\n        && (uri.path.charCodeAt(1) >= 65 /* A */ && uri.path.charCodeAt(1) <= 90 /* Z */ || uri.path.charCodeAt(1) >= 97 /* a */ && uri.path.charCodeAt(1) <= 122 /* z */)\n        && uri.path.charCodeAt(2) === 58 /* Colon */) {\n        if (!keepDriveLetterCasing) {\n            // windows drive letter: file:///c:/far/boo\n            value = uri.path[1].toLowerCase() + uri.path.substr(2);\n        }\n        else {\n            value = uri.path.substr(1);\n        }\n    }\n    else {\n        // other path\n        value = uri.path;\n    }\n    if (isWindows) {\n        value = value.replace(/\\//g, \'\\\\\');\n    }\n    return value;\n}\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri, skipEncoding) {\n    const encoder = !skipEncoding\n        ? encodeURIComponentFast\n        : encodeURIComponentMinimal;\n    let res = \'\';\n    let { scheme, authority, path, query, fragment } = uri;\n    if (scheme) {\n        res += scheme;\n        res += \':\';\n    }\n    if (authority || scheme === \'file\') {\n        res += _slash;\n        res += _slash;\n    }\n    if (authority) {\n        let idx = authority.indexOf(\'@\');\n        if (idx !== -1) {\n            // <user>@<auth>\n            const userinfo = authority.substr(0, idx);\n            authority = authority.substr(idx + 1);\n            idx = userinfo.indexOf(\':\');\n            if (idx === -1) {\n                res += encoder(userinfo, false);\n            }\n            else {\n                // <user>:<pass>@<auth>\n                res += encoder(userinfo.substr(0, idx), false);\n                res += \':\';\n                res += encoder(userinfo.substr(idx + 1), false);\n            }\n            res += \'@\';\n        }\n        authority = authority.toLowerCase();\n        idx = authority.indexOf(\':\');\n        if (idx === -1) {\n            res += encoder(authority, false);\n        }\n        else {\n            // <auth>:<port>\n            res += encoder(authority.substr(0, idx), false);\n            res += authority.substr(idx);\n        }\n    }\n    if (path) {\n        // lower-case windows drive letters in /C:/fff or C:/fff\n        if (path.length >= 3 && path.charCodeAt(0) === 47 /* Slash */ && path.charCodeAt(2) === 58 /* Colon */) {\n            const code = path.charCodeAt(1);\n            if (code >= 65 /* A */ && code <= 90 /* Z */) {\n                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // "/c:".length === 3\n            }\n        }\n        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* Colon */) {\n            const code = path.charCodeAt(0);\n            if (code >= 65 /* A */ && code <= 90 /* Z */) {\n                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // "/c:".length === 3\n            }\n        }\n        // encode the rest of the path\n        res += encoder(path, true);\n    }\n    if (query) {\n        res += \'?\';\n        res += encoder(query, false);\n    }\n    if (fragment) {\n        res += \'#\';\n        res += !skipEncoding ? encodeURIComponentFast(fragment, false) : fragment;\n    }\n    return res;\n}\n// --- decode\nfunction decodeURIComponentGraceful(str) {\n    try {\n        return decodeURIComponent(str);\n    }\n    catch (_a) {\n        if (str.length > 3) {\n            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n        }\n        else {\n            return str;\n        }\n    }\n}\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\nfunction percentDecode(str) {\n    if (!str.match(_rEncodedAsHex)) {\n        return str;\n    }\n    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nclass position_Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new position_Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return position_Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return position_Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return position_Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        let aLineNumber = a.lineNumber | 0;\n        let bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            let aColumn = a.column | 0;\n            let bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new position_Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return \'(\' + this.lineNumber + \',\' + this.column + \')\';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new position_Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === \'number\')\n            && (typeof obj.column === \'number\'));\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nclass Range {\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n            this.startLineNumber = endLineNumber;\n            this.startColumn = endColumn;\n            this.endLineNumber = startLineNumber;\n            this.endColumn = startColumn;\n        }\n        else {\n            this.startLineNumber = startLineNumber;\n            this.startColumn = startColumn;\n            this.endLineNumber = endLineNumber;\n            this.endColumn = endColumn;\n        }\n    }\n    /**\n     * Test if this range is empty.\n     */\n    isEmpty() {\n        return Range.isEmpty(this);\n    }\n    /**\n     * Test if `range` is empty.\n     */\n    static isEmpty(range) {\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n    }\n    /**\n     * Test if position is in this range. If the position is at the edges, will return true.\n     */\n    containsPosition(position) {\n        return Range.containsPosition(this, position);\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\n     */\n    static containsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if range is in this range. If the range is equal to this range, will return true.\n     */\n    containsRange(range) {\n        return Range.containsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n     */\n    static containsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n     */\n    strictContainsRange(range) {\n        return Range.strictContainsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\n     */\n    static strictContainsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    plusRange(range) {\n        return Range.plusRange(this, range);\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    static plusRange(a, b) {\n        let startLineNumber;\n        let startColumn;\n        let endLineNumber;\n        let endColumn;\n        if (b.startLineNumber < a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = b.startColumn;\n        }\n        else if (b.startLineNumber === a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = Math.min(b.startColumn, a.startColumn);\n        }\n        else {\n            startLineNumber = a.startLineNumber;\n            startColumn = a.startColumn;\n        }\n        if (b.endLineNumber > a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = b.endColumn;\n        }\n        else if (b.endLineNumber === a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = Math.max(b.endColumn, a.endColumn);\n        }\n        else {\n            endLineNumber = a.endLineNumber;\n            endColumn = a.endColumn;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    intersectRanges(range) {\n        return Range.intersectRanges(this, range);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    static intersectRanges(a, b) {\n        let resultStartLineNumber = a.startLineNumber;\n        let resultStartColumn = a.startColumn;\n        let resultEndLineNumber = a.endLineNumber;\n        let resultEndColumn = a.endColumn;\n        let otherStartLineNumber = b.startLineNumber;\n        let otherStartColumn = b.startColumn;\n        let otherEndLineNumber = b.endLineNumber;\n        let otherEndColumn = b.endColumn;\n        if (resultStartLineNumber < otherStartLineNumber) {\n            resultStartLineNumber = otherStartLineNumber;\n            resultStartColumn = otherStartColumn;\n        }\n        else if (resultStartLineNumber === otherStartLineNumber) {\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n        }\n        if (resultEndLineNumber > otherEndLineNumber) {\n            resultEndLineNumber = otherEndLineNumber;\n            resultEndColumn = otherEndColumn;\n        }\n        else if (resultEndLineNumber === otherEndLineNumber) {\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n        }\n        // Check if selection is now empty\n        if (resultStartLineNumber > resultEndLineNumber) {\n            return null;\n        }\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n            return null;\n        }\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n    }\n    /**\n     * Test if this range equals other.\n     */\n    equalsRange(other) {\n        return Range.equalsRange(this, other);\n    }\n    /**\n     * Test if range `a` equals `b`.\n     */\n    static equalsRange(a, b) {\n        return (!!a &&\n            !!b &&\n            a.startLineNumber === b.startLineNumber &&\n            a.startColumn === b.startColumn &&\n            a.endLineNumber === b.endLineNumber &&\n            a.endColumn === b.endColumn);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    getEndPosition() {\n        return Range.getEndPosition(this);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    static getEndPosition(range) {\n        return new position_Position(range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    getStartPosition() {\n        return Range.getStartPosition(this);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    static getStartPosition(range) {\n        return new position_Position(range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Transform to a user presentable string representation.\n     */\n    toString() {\n        return \'[\' + this.startLineNumber + \',\' + this.startColumn + \' -> \' + this.endLineNumber + \',\' + this.endColumn + \']\';\n    }\n    /**\n     * Create a new range using this range\'s start position, and using endLineNumber and endColumn as the end position.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * Create a new range using this range\'s end position, and using startLineNumber and startColumn as the start position.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    /**\n     * Create a new empty range using this range\'s start position.\n     */\n    collapseToStart() {\n        return Range.collapseToStart(this);\n    }\n    /**\n     * Create a new empty range using this range\'s start position.\n     */\n    static collapseToStart(range) {\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n    }\n    // ---\n    static fromPositions(start, end = start) {\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    static lift(range) {\n        if (!range) {\n            return null;\n        }\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Test if `obj` is an `IRange`.\n     */\n    static isIRange(obj) {\n        return (obj\n            && (typeof obj.startLineNumber === \'number\')\n            && (typeof obj.startColumn === \'number\')\n            && (typeof obj.endLineNumber === \'number\')\n            && (typeof obj.endColumn === \'number\'));\n    }\n    /**\n     * Test if the two ranges are touching in any way.\n     */\n    static areIntersectingOrTouching(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n     */\n    static areIntersecting(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the startPosition and then on the endPosition\n     */\n    static compareRangesUsingStarts(a, b) {\n        if (a && b) {\n            const aStartLineNumber = a.startLineNumber | 0;\n            const bStartLineNumber = b.startLineNumber | 0;\n            if (aStartLineNumber === bStartLineNumber) {\n                const aStartColumn = a.startColumn | 0;\n                const bStartColumn = b.startColumn | 0;\n                if (aStartColumn === bStartColumn) {\n                    const aEndLineNumber = a.endLineNumber | 0;\n                    const bEndLineNumber = b.endLineNumber | 0;\n                    if (aEndLineNumber === bEndLineNumber) {\n                        const aEndColumn = a.endColumn | 0;\n                        const bEndColumn = b.endColumn | 0;\n                        return aEndColumn - bEndColumn;\n                    }\n                    return aEndLineNumber - bEndLineNumber;\n                }\n                return aStartColumn - bStartColumn;\n            }\n            return aStartLineNumber - bStartLineNumber;\n        }\n        const aExists = (a ? 1 : 0);\n        const bExists = (b ? 1 : 0);\n        return aExists - bExists;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the endPosition and then on the startPosition\n     */\n    static compareRangesUsingEnds(a, b) {\n        if (a.endLineNumber === b.endLineNumber) {\n            if (a.endColumn === b.endColumn) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.startColumn - b.startColumn;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.endColumn - b.endColumn;\n        }\n        return a.endLineNumber - b.endLineNumber;\n    }\n    /**\n     * Test if the range spans multiple lines.\n     */\n    static spansMultipleLines(range) {\n        return range.endLineNumber > range.startLineNumber;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n    const diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n    return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n    constructor(lines) {\n        const startColumns = [];\n        const endColumns = [];\n        for (let i = 0, length = lines.length; i < length; i++) {\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n        }\n        this.lines = lines;\n        this._startColumns = startColumns;\n        this._endColumns = endColumns;\n    }\n    getElements() {\n        const elements = [];\n        for (let i = 0, len = this.lines.length; i < len; i++) {\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        return elements;\n    }\n    getStartLineNumber(i) {\n        return i + 1;\n    }\n    getEndLineNumber(i) {\n        return i + 1;\n    }\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n        const charCodes = [];\n        const lineNumbers = [];\n        const columns = [];\n        let len = 0;\n        for (let index = startIndex; index <= endIndex; index++) {\n            const lineContent = this.lines[index];\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n            for (let col = startColumn; col < endColumn; col++) {\n                charCodes[len] = lineContent.charCodeAt(col - 1);\n                lineNumbers[len] = index + 1;\n                columns[len] = col;\n                len++;\n            }\n        }\n        return new CharSequence(charCodes, lineNumbers, columns);\n    }\n}\nclass CharSequence {\n    constructor(charCodes, lineNumbers, columns) {\n        this._charCodes = charCodes;\n        this._lineNumbers = lineNumbers;\n        this._columns = columns;\n    }\n    getElements() {\n        return this._charCodes;\n    }\n    getStartLineNumber(i) {\n        return this._lineNumbers[i];\n    }\n    getStartColumn(i) {\n        return this._columns[i];\n    }\n    getEndLineNumber(i) {\n        return this._lineNumbers[i];\n    }\n    getEndColumn(i) {\n        return this._columns[i] + 1;\n    }\n}\nclass CharChange {\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalStartColumn = originalStartColumn;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.originalEndColumn = originalEndColumn;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedStartColumn = modifiedStartColumn;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.modifiedEndColumn = modifiedEndColumn;\n    }\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n        let originalStartLineNumber;\n        let originalStartColumn;\n        let originalEndLineNumber;\n        let originalEndColumn;\n        let modifiedStartLineNumber;\n        let modifiedStartColumn;\n        let modifiedEndLineNumber;\n        let modifiedEndColumn;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = 0;\n            originalStartColumn = 0;\n            originalEndLineNumber = 0;\n            originalEndColumn = 0;\n        }\n        else {\n            originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n            originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n            originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n            originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = 0;\n            modifiedStartColumn = 0;\n            modifiedEndLineNumber = 0;\n            modifiedEndColumn = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n    }\n}\nfunction postProcessCharChanges(rawChanges) {\n    if (rawChanges.length <= 1) {\n        return rawChanges;\n    }\n    const result = [rawChanges[0]];\n    let prevChange = result[0];\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\n        const currChange = rawChanges[i];\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n            // Merge the current change into the previous one\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n        }\n        else {\n            // Add the current change\n            result.push(currChange);\n            prevChange = currChange;\n        }\n    }\n    return result;\n}\nclass LineChange {\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.charChanges = charChanges;\n    }\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let charChanges = undefined;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n            originalEndLineNumber = 0;\n        }\n        else {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n            modifiedEndLineNumber = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n            // Compute character changes for diff chunks of at most 20 lines...\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n            if (shouldPostProcessCharChanges) {\n                rawChanges = postProcessCharChanges(rawChanges);\n            }\n            charChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n            }\n        }\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n    }\n}\nclass DiffComputer {\n    constructor(originalLines, modifiedLines, opts) {\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n        this.originalLines = originalLines;\n        this.modifiedLines = modifiedLines;\n        this.original = new LineSequence(originalLines);\n        this.modified = new LineSequence(modifiedLines);\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n    }\n    computeDiff() {\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n            // empty original => fast path\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n                return {\n                    quitEarly: false,\n                    changes: []\n                };\n            }\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.lines.length,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n            // empty modified => fast path\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.lines.length,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n        const rawChanges = diffResult.changes;\n        const quitEarly = diffResult.quitEarly;\n        // The diff is always computed with ignoring trim whitespace\n        // This ensures we get the prettiest diff\n        if (this.shouldIgnoreTrimWhitespace) {\n            const lineChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n            }\n            return {\n                quitEarly: quitEarly,\n                changes: lineChanges\n            };\n        }\n        // Need to post-process and introduce changes where the trim whitespace is different\n        // Note that we are looping starting at -1 to also cover the lines before the first change\n        const result = [];\n        let originalLineIndex = 0;\n        let modifiedLineIndex = 0;\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                const originalLine = this.originalLines[originalLineIndex];\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                if (originalLine !== modifiedLine) {\n                    // These lines differ only in trim whitespace\n                    // Check the leading whitespace\n                    {\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalStartColumn--;\n                            modifiedStartColumn--;\n                        }\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                        }\n                    }\n                    // Check the trailing whitespace\n                    {\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n                        const originalMaxColumn = originalLine.length + 1;\n                        const modifiedMaxColumn = modifiedLine.length + 1;\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalEndColumn++;\n                            modifiedEndColumn++;\n                        }\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                        }\n                    }\n                }\n                originalLineIndex++;\n                modifiedLineIndex++;\n            }\n            if (nextChange) {\n                // Emit the actual change\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                originalLineIndex += nextChange.originalLength;\n                modifiedLineIndex += nextChange.modifiedLength;\n            }\n        }\n        return {\n            quitEarly: quitEarly,\n            changes: result\n        };\n    }\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n            // Merged into previous\n            return;\n        }\n        let charChanges = undefined;\n        if (this.shouldComputeCharChanges) {\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n        }\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n    }\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        const len = result.length;\n        if (len === 0) {\n            return false;\n        }\n        const prevChange = result[len - 1];\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n            // Don\'t merge with inserts/deletes\n            return false;\n        }\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n            prevChange.originalEndLineNumber = originalLineNumber;\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n    const r = firstNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n    const r = lastNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n    if (maximumRuntime === 0) {\n        return () => true;\n    }\n    const startTime = Date.now();\n    return () => {\n        return Date.now() - startTime < maximumRuntime;\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/uint.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction toUint8(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 255 /* MAX_UINT_8 */) {\n        return 255 /* MAX_UINT_8 */;\n    }\n    return v | 0;\n}\nfunction toUint32(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 4294967295 /* MAX_UINT_32 */) {\n        return 4294967295 /* MAX_UINT_32 */;\n    }\n    return v | 0;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nclass PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\nclass PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = toUint32(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    changeValue(index, value) {\n        index = toUint32(index);\n        value = toUint32(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, cnt) {\n        startIndex = toUint32(startIndex);\n        cnt = toUint32(cnt);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        let maxCnt = oldValues.length - startIndex;\n        if (cnt >= maxCnt) {\n            cnt = maxCnt;\n        }\n        if (cnt === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - cnt);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalValue() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getAccumulatedValue(this.values.length - 1);\n    }\n    getAccumulatedValue(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = toUint32(index);\n        return this._getAccumulatedValue(index);\n    }\n    _getAccumulatedValue(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(accumulatedValue) {\n        accumulatedValue = Math.floor(accumulatedValue); //@perf\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalValue();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (accumulatedValue < midStart) {\n                high = mid - 1;\n            }\n            else if (accumulatedValue >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nclass MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new position_Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line\'s text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.changeValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        let insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        let newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/model/wordHelper.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst USUAL_WORD_SEPARATORS = \'`~!@#$%^&*()-=+[{]}\\\\|;:\\\'",.<>/?\';\n/**\n * Create a word definition regular expression based on default word separators.\n * Optionally provide allowed separators that should be included in words.\n *\n * The default would look like this:\n * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\\'\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n */\nfunction createWordRegExp(allowInWords = \'\') {\n    let source = \'(-?\\\\d*\\\\.\\\\d\\\\w*)|([^\';\n    for (const sep of USUAL_WORD_SEPARATORS) {\n        if (allowInWords.indexOf(sep) >= 0) {\n            continue;\n        }\n        source += \'\\\\\' + sep;\n    }\n    source += \'\\\\s]+)\';\n    return new RegExp(source, \'g\');\n}\n// catches numbers (including floating numbers) in the first group, and alphanum in the second\nconst DEFAULT_WORD_REGEXP = createWordRegExp();\nfunction ensureValidWordDefinition(wordDefinition) {\n    let result = DEFAULT_WORD_REGEXP;\n    if (wordDefinition && (wordDefinition instanceof RegExp)) {\n        if (!wordDefinition.global) {\n            let flags = \'g\';\n            if (wordDefinition.ignoreCase) {\n                flags += \'i\';\n            }\n            if (wordDefinition.multiline) {\n                flags += \'m\';\n            }\n            if (wordDefinition.unicode) {\n                flags += \'u\';\n            }\n            result = new RegExp(wordDefinition.source, flags);\n        }\n        else {\n            result = wordDefinition;\n        }\n    }\n    result.lastIndex = 0;\n    return result;\n}\nconst _defaultConfig = {\n    maxLen: 1000,\n    windowSize: 15,\n    timeBudget: 150\n};\nfunction getWordAtText(column, wordDefinition, text, textOffset, config = _defaultConfig) {\n    if (text.length > config.maxLen) {\n        // don\'t throw strings that long at the regexp\n        // but use a sub-string in which a word must occur\n        let start = column - config.maxLen / 2;\n        if (start < 0) {\n            start = 0;\n        }\n        else {\n            textOffset += start;\n        }\n        text = text.substring(start, column + config.maxLen / 2);\n        return getWordAtText(column, wordDefinition, text, textOffset, config);\n    }\n    const t1 = Date.now();\n    const pos = column - 1 - textOffset;\n    let prevRegexIndex = -1;\n    let match = null;\n    for (let i = 1;; i++) {\n        // check time budget\n        if (Date.now() - t1 >= config.timeBudget) {\n            break;\n        }\n        // reset the index at which the regexp should start matching, also know where it\n        // should stop so that subsequent search don\'t repeat previous searches\n        const regexIndex = pos - config.windowSize * i;\n        wordDefinition.lastIndex = Math.max(0, regexIndex);\n        const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);\n        if (!thisMatch && match) {\n            // stop: we have something\n            break;\n        }\n        match = thisMatch;\n        // stop: searched at start\n        if (regexIndex <= 0) {\n            break;\n        }\n        prevRegexIndex = regexIndex;\n    }\n    if (match) {\n        let result = {\n            word: match[0],\n            startColumn: textOffset + 1 + match.index,\n            endColumn: textOffset + 1 + match.index + match[0].length\n        };\n        wordDefinition.lastIndex = 0;\n        return result;\n    }\n    return null;\n}\nfunction _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {\n    let match;\n    while (match = wordDefinition.exec(text)) {\n        const matchIndex = match.index || 0;\n        if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {\n            return match;\n        }\n        else if (stopPos > 0 && matchIndex > stopPos) {\n            return null;\n        }\n    }\n    return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nclass CharacterClassifier {\n    constructor(_defaultValue) {\n        let defaultValue = toUint8(_defaultValue);\n        this._defaultValue = defaultValue;\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n        this._map = new Map();\n    }\n    static _createAsciiMap(defaultValue) {\n        let asciiMap = new Uint8Array(256);\n        for (let i = 0; i < 256; i++) {\n            asciiMap[i] = defaultValue;\n        }\n        return asciiMap;\n    }\n    set(charCode, _value) {\n        let value = toUint8(_value);\n        if (charCode >= 0 && charCode < 256) {\n            this._asciiMap[charCode] = value;\n        }\n        else {\n            this._map.set(charCode, value);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nclass CharacterSet {\n    constructor() {\n        this._actual = new CharacterClassifier(0 /* False */);\n    }\n    add(charCode) {\n        this._actual.set(charCode, 1 /* True */);\n    }\n    has(charCode) {\n        return (this._actual.get(charCode) === 1 /* True */);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nclass Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nclass StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            let [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        let states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            let [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* Start */, 104 /* h */, 2 /* H */],\n            [1 /* Start */, 72 /* H */, 2 /* H */],\n            [1 /* Start */, 102 /* f */, 6 /* F */],\n            [1 /* Start */, 70 /* F */, 6 /* F */],\n            [2 /* H */, 116 /* t */, 3 /* HT */],\n            [2 /* H */, 84 /* T */, 3 /* HT */],\n            [3 /* HT */, 116 /* t */, 4 /* HTT */],\n            [3 /* HT */, 84 /* T */, 4 /* HTT */],\n            [4 /* HTT */, 112 /* p */, 5 /* HTTP */],\n            [4 /* HTT */, 80 /* P */, 5 /* HTTP */],\n            [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],\n            [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],\n            [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],\n            [6 /* F */, 105 /* i */, 7 /* FI */],\n            [6 /* F */, 73 /* I */, 7 /* FI */],\n            [7 /* FI */, 108 /* l */, 8 /* FIL */],\n            [7 /* FI */, 76 /* L */, 8 /* FIL */],\n            [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],\n            [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],\n            [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],\n            [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],\n            [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* None */);\n        const FORCE_TERMINATION_CHARACTERS = \' \\t<>\\\'\\"、。｡､，．：；‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…\';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = \'.,;\';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nclass LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */)\n                || (charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        let result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 41 /* CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        case 91 /* OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 93 /* CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        case 123 /* OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 125 /* CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        /* The following three rules make it that \' or " or ` are allowed inside links if the link began with a different one */\n                        case 39 /* SingleQuote */:\n                            chClass = (linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 34 /* DoubleQuote */:\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 96 /* BackTick */:\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 42 /* Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* Asterisk */) ? 1 /* ForceTermination */ : 0 /* None */;\n                            break;\n                        case 124 /* Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* Pipe */) ? 1 /* ForceTermination */ : 0 /* None */;\n                            break;\n                        case 32 /* Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* End */) {\n                    let chClass;\n                    if (chCode === 91 /* OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nfunction computeLinks(model) {\n    if (!model || typeof model.getLineCount !== \'function\' || typeof model.getLineContent !== \'function\') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/modes/supports/inplaceReplaceSupport.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            [\'true\', \'false\'],\n            [\'True\', \'False\'],\n            [\'Private\', \'Public\', \'Friend\', \'ReadOnly\', \'Partial\', \'Protected\', \'WriteOnly\'],\n            [\'public\', \'protected\', \'private\'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            let result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            let result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        let numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        let precision = Math.pow(10, value.length - (value.lastIndexOf(\'.\') + 1));\n        let n1 = Number(value);\n        let n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don\'t do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don\'t insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\nNode.Undefined = new Node(undefined);\nclass linkedList_LinkedList {\n    constructor() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    get size() {\n        return this._size;\n    }\n    isEmpty() {\n        return this._first === Node.Undefined;\n    }\n    clear() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    unshift(element) {\n        return this._insert(element, false);\n    }\n    push(element) {\n        return this._insert(element, true);\n    }\n    _insert(element, atTheEnd) {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n        }\n        else if (atTheEnd) {\n            // push\n            const oldLast = this._last;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n        }\n        else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n    shift() {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n    pop() {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n    _remove(node) {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n        }\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n        }\n        else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last.prev;\n            this._last.next = Node.Undefined;\n        }\n        else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first.next;\n            this._first.prev = Node.Undefined;\n        }\n        // done\n        this._size -= 1;\n    }\n    *[Symbol.iterator]() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst hasPerformanceNow = (globals.performance && typeof globals.performance.now === \'function\');\nclass StopWatch {\n    constructor(highResolution) {\n        this._highResolution = hasPerformanceNow && highResolution;\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    static create(highResolution = true) {\n        return new StopWatch(highResolution);\n    }\n    stop() {\n        this._stopTime = this._now();\n    }\n    elapsed() {\n        if (this._stopTime !== -1) {\n            return this._stopTime - this._startTime;\n        }\n        return this._now() - this._startTime;\n    }\n    _now() {\n        return this._highResolution ? globals.performance.now() : Date.now();\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/event.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\nvar Event;\n(function (Event) {\n    Event.None = () => lifecycle_Disposable.None;\n    /**\n     * Given an event, returns another event which only fires once.\n     */\n    function once(event) {\n        return (listener, thisArgs = null, disposables) => {\n            // we need this, in case the event fires during the listener call\n            let didFire = false;\n            let result;\n            result = event(e => {\n                if (didFire) {\n                    return;\n                }\n                else if (result) {\n                    result.dispose();\n                }\n                else {\n                    didFire = true;\n                }\n                return listener.call(thisArgs, e);\n            }, null, disposables);\n            if (didFire) {\n                result.dispose();\n            }\n            return result;\n        };\n    }\n    Event.once = once;\n    /**\n     * Given an event and a `map` function, returns another event which maps each element\n     * through the mapping function.\n     */\n    function map(event, map) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables));\n    }\n    Event.map = map;\n    /**\n     * Given an event and an `each` function, returns another identical event and calls\n     * the `each` function per each element.\n     */\n    function forEach(event, each) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables));\n    }\n    Event.forEach = forEach;\n    function filter(event, filter) {\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables));\n    }\n    Event.filter = filter;\n    /**\n     * Given an event, returns the same event but typed as `Event<void>`.\n     */\n    function signal(event) {\n        return event;\n    }\n    Event.signal = signal;\n    function any(...events) {\n        return (listener, thisArgs = null, disposables) => combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e), null, disposables)));\n    }\n    Event.any = any;\n    /**\n     * Given an event and a `merge` function, returns another event which maps each element\n     * and the cumulative result through the `merge` function. Similar to `map`, but with memory.\n     */\n    function reduce(event, merge, initial) {\n        let output = initial;\n        return map(event, e => {\n            output = merge(output, e);\n            return output;\n        });\n    }\n    Event.reduce = reduce;\n    /**\n     * Given a chain of event processing functions (filter, map, etc), each\n     * function will be invoked per event & per listener. Snapshotting an event\n     * chain allows each function to be invoked just once per event.\n     */\n    function snapshot(event) {\n        let listener;\n        const emitter = new Emitter({\n            onFirstListenerAdd() {\n                listener = event(emitter.fire, emitter);\n            },\n            onLastListenerRemove() {\n                listener.dispose();\n            }\n        });\n        return emitter.event;\n    }\n    Event.snapshot = snapshot;\n    function debounce(event, merge, delay = 100, leading = false, leakWarningThreshold) {\n        let subscription;\n        let output = undefined;\n        let handle = undefined;\n        let numDebouncedCalls = 0;\n        const emitter = new Emitter({\n            leakWarningThreshold,\n            onFirstListenerAdd() {\n                subscription = event(cur => {\n                    numDebouncedCalls++;\n                    output = merge(output, cur);\n                    if (leading && !handle) {\n                        emitter.fire(output);\n                        output = undefined;\n                    }\n                    clearTimeout(handle);\n                    handle = setTimeout(() => {\n                        const _output = output;\n                        output = undefined;\n                        handle = undefined;\n                        if (!leading || numDebouncedCalls > 1) {\n                            emitter.fire(_output);\n                        }\n                        numDebouncedCalls = 0;\n                    }, delay);\n                });\n            },\n            onLastListenerRemove() {\n                subscription.dispose();\n            }\n        });\n        return emitter.event;\n    }\n    Event.debounce = debounce;\n    /**\n     * Given an event, it returns another event which fires only once and as soon as\n     * the input event emits. The event data is the number of millis it took for the\n     * event to fire.\n     */\n    function stopwatch(event) {\n        const start = new Date().getTime();\n        return map(once(event), _ => new Date().getTime() - start);\n    }\n    Event.stopwatch = stopwatch;\n    /**\n     * Given an event, it returns another event which fires only when the event\n     * element changes.\n     */\n    function latch(event) {\n        let firstCall = true;\n        let cache;\n        return filter(event, value => {\n            const shouldEmit = firstCall || value !== cache;\n            firstCall = false;\n            cache = value;\n            return shouldEmit;\n        });\n    }\n    Event.latch = latch;\n    /**\n     * Buffers the provided event until a first listener comes\n     * along, at which point fire all the events at once and\n     * pipe the event from then on.\n     *\n     * ```typescript\n     * const emitter = new Emitter<number>();\n     * const event = emitter.event;\n     * const bufferedEvent = buffer(event);\n     *\n     * emitter.fire(1);\n     * emitter.fire(2);\n     * emitter.fire(3);\n     * // nothing...\n     *\n     * const listener = bufferedEvent(num => console.log(num));\n     * // 1, 2, 3\n     *\n     * emitter.fire(4);\n     * // 4\n     * ```\n     */\n    function buffer(event, nextTick = false, _buffer = []) {\n        let buffer = _buffer.slice();\n        let listener = event(e => {\n            if (buffer) {\n                buffer.push(e);\n            }\n            else {\n                emitter.fire(e);\n            }\n        });\n        const flush = () => {\n            if (buffer) {\n                buffer.forEach(e => emitter.fire(e));\n            }\n            buffer = null;\n        };\n        const emitter = new Emitter({\n            onFirstListenerAdd() {\n                if (!listener) {\n                    listener = event(e => emitter.fire(e));\n                }\n            },\n            onFirstListenerDidAdd() {\n                if (buffer) {\n                    if (nextTick) {\n                        setTimeout(flush);\n                    }\n                    else {\n                        flush();\n                    }\n                }\n            },\n            onLastListenerRemove() {\n                if (listener) {\n                    listener.dispose();\n                }\n                listener = null;\n            }\n        });\n        return emitter.event;\n    }\n    Event.buffer = buffer;\n    class ChainableEvent {\n        constructor(event) {\n            this.event = event;\n        }\n        map(fn) {\n            return new ChainableEvent(map(this.event, fn));\n        }\n        forEach(fn) {\n            return new ChainableEvent(forEach(this.event, fn));\n        }\n        filter(fn) {\n            return new ChainableEvent(filter(this.event, fn));\n        }\n        reduce(merge, initial) {\n            return new ChainableEvent(reduce(this.event, merge, initial));\n        }\n        latch() {\n            return new ChainableEvent(latch(this.event));\n        }\n        debounce(merge, delay = 100, leading = false, leakWarningThreshold) {\n            return new ChainableEvent(debounce(this.event, merge, delay, leading, leakWarningThreshold));\n        }\n        on(listener, thisArgs, disposables) {\n            return this.event(listener, thisArgs, disposables);\n        }\n        once(listener, thisArgs, disposables) {\n            return once(this.event)(listener, thisArgs, disposables);\n        }\n    }\n    function chain(event) {\n        return new ChainableEvent(event);\n    }\n    Event.chain = chain;\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n        const result = new Emitter({ onFirstListenerAdd, onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n        const result = new Emitter({ onFirstListenerAdd, onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\n    function fromPromise(promise) {\n        const emitter = new Emitter();\n        let shouldEmit = false;\n        promise\n            .then(undefined, () => null)\n            .then(() => {\n            if (!shouldEmit) {\n                setTimeout(() => emitter.fire(undefined), 0);\n            }\n            else {\n                emitter.fire(undefined);\n            }\n        });\n        shouldEmit = true;\n        return emitter.event;\n    }\n    Event.fromPromise = fromPromise;\n    function toPromise(event) {\n        return new Promise(resolve => once(event)(resolve));\n    }\n    Event.toPromise = toPromise;\n})(Event || (Event = {}));\nclass EventProfiling {\n    constructor(name) {\n        this._listenerCount = 0;\n        this._invocationCount = 0;\n        this._elapsedOverall = 0;\n        this._name = `${name}_${EventProfiling._idPool++}`;\n    }\n    start(listenerCount) {\n        this._stopWatch = new StopWatch(true);\n        this._listenerCount = listenerCount;\n    }\n    stop() {\n        if (this._stopWatch) {\n            const elapsed = this._stopWatch.elapsed();\n            this._elapsedOverall += elapsed;\n            this._invocationCount += 1;\n            console.info(`did FIRE ${this._name}: elapsed_ms: ${elapsed.toFixed(5)}, listener: ${this._listenerCount} (elapsed_overall: ${this._elapsedOverall.toFixed(2)}, invocations: ${this._invocationCount})`);\n            this._stopWatch = undefined;\n        }\n    }\n}\nEventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n    constructor(customThreshold, name = Math.random().toString(18).slice(2, 5)) {\n        this.customThreshold = customThreshold;\n        this.name = name;\n        this._warnCountdown = 0;\n    }\n    dispose() {\n        if (this._stacks) {\n            this._stacks.clear();\n        }\n    }\n    check(listenerCount) {\n        let threshold = _globalLeakWarningThreshold;\n        if (typeof this.customThreshold === \'number\') {\n            threshold = this.customThreshold;\n        }\n        if (threshold <= 0 || listenerCount < threshold) {\n            return undefined;\n        }\n        if (!this._stacks) {\n            this._stacks = new Map();\n        }\n        const stack = new Error().stack.split(\'\\n\').slice(3).join(\'\\n\');\n        const count = (this._stacks.get(stack) || 0);\n        this._stacks.set(stack, count + 1);\n        this._warnCountdown -= 1;\n        if (this._warnCountdown <= 0) {\n            // only warn on first exceed and then every time the limit\n            // is exceeded by 50% again\n            this._warnCountdown = threshold * 0.5;\n            // find most frequent listener and print warning\n            let topStack;\n            let topCount = 0;\n            for (const [stack, count] of this._stacks) {\n                if (!topStack || topCount < count) {\n                    topStack = stack;\n                    topCount = count;\n                }\n            }\n            console.warn(`[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`);\n            console.warn(topStack);\n        }\n        return () => {\n            const count = (this._stacks.get(stack) || 0);\n            this._stacks.set(stack, count - 1);\n        };\n    }\n}\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nclass Emitter {\n    constructor(options) {\n        var _a;\n        this._disposed = false;\n        this._options = options;\n        this._leakageMon = _globalLeakWarningThreshold > 0 ? new LeakageMonitor(this._options && this._options.leakWarningThreshold) : undefined;\n        this._perfMon = ((_a = this._options) === null || _a === void 0 ? void 0 : _a._profName) ? new EventProfiling(this._options._profName) : undefined;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                var _a;\n                if (!this._listeners) {\n                    this._listeners = new linkedList_LinkedList();\n                }\n                const firstListener = this._listeners.isEmpty();\n                if (firstListener && this._options && this._options.onFirstListenerAdd) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                const remove = this._listeners.push(!thisArgs ? listener : [listener, thisArgs]);\n                if (firstListener && this._options && this._options.onFirstListenerDidAdd) {\n                    this._options.onFirstListenerDidAdd(this);\n                }\n                if (this._options && this._options.onListenerDidAdd) {\n                    this._options.onListenerDidAdd(this, listener, thisArgs);\n                }\n                // check and record this emitter for potential leakage\n                const removeMonitor = (_a = this._leakageMon) === null || _a === void 0 ? void 0 : _a.check(this._listeners.size);\n                let result;\n                result = {\n                    dispose: () => {\n                        if (removeMonitor) {\n                            removeMonitor();\n                        }\n                        result.dispose = Emitter._noop;\n                        if (!this._disposed) {\n                            remove();\n                            if (this._options && this._options.onLastListenerRemove) {\n                                const hasListeners = (this._listeners && !this._listeners.isEmpty());\n                                if (!hasListeners) {\n                                    this._options.onLastListenerRemove(this);\n                                }\n                            }\n                        }\n                    }\n                };\n                if (disposables instanceof DisposableStore) {\n                    disposables.add(result);\n                }\n                else if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        var _a, _b;\n        if (this._listeners) {\n            // put all [listener,event]-pairs into delivery queue\n            // then emit all event. an inner/nested event might be\n            // the driver of this\n            if (!this._deliveryQueue) {\n                this._deliveryQueue = new linkedList_LinkedList();\n            }\n            for (let listener of this._listeners) {\n                this._deliveryQueue.push([listener, event]);\n            }\n            // start/stop performance insight collection\n            (_a = this._perfMon) === null || _a === void 0 ? void 0 : _a.start(this._deliveryQueue.size);\n            while (this._deliveryQueue.size > 0) {\n                const [listener, event] = this._deliveryQueue.shift();\n                try {\n                    if (typeof listener === \'function\') {\n                        listener.call(undefined, event);\n                    }\n                    else {\n                        listener[0].call(listener[1], event);\n                    }\n                }\n                catch (e) {\n                    onUnexpectedError(e);\n                }\n            }\n            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n    }\n    dispose() {\n        var _a, _b, _c;\n        (_a = this._listeners) === null || _a === void 0 ? void 0 : _a.clear();\n        (_b = this._deliveryQueue) === null || _b === void 0 ? void 0 : _b.clear();\n        (_c = this._leakageMon) === null || _c === void 0 ? void 0 : _c.dispose();\n        this._disposed = true;\n    }\n}\nEmitter._noop = function () { };\nclass PauseableEmitter extends (/* unused pure expression or super */ null && (Emitter)) {\n    constructor(options) {\n        super(options);\n        this._isPaused = 0;\n        this._eventQueue = new LinkedList();\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    pause() {\n        this._isPaused++;\n    }\n    resume() {\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\n            if (this._mergeFn) {\n                // use the merge function to create a single composite\n                // event. make a copy in case firing pauses this emitter\n                const events = Array.from(this._eventQueue);\n                this._eventQueue.clear();\n                super.fire(this._mergeFn(events));\n            }\n            else {\n                // no merging, fire each event individually and test\n                // that this emitter isn\'t paused halfway through\n                while (!this._isPaused && this._eventQueue.size !== 0) {\n                    super.fire(this._eventQueue.shift());\n                }\n            }\n        }\n    }\n    fire(event) {\n        if (this._listeners) {\n            if (this._isPaused !== 0) {\n                this._eventQueue.push(event);\n            }\n            else {\n                super.fire(event);\n            }\n        }\n    }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nclass EventBufferer {\n    constructor() {\n        this.buffers = [];\n    }\n    wrapEvent(event) {\n        return (listener, thisArgs, disposables) => {\n            return event(i => {\n                const buffer = this.buffers[this.buffers.length - 1];\n                if (buffer) {\n                    buffer.push(() => listener.call(thisArgs, i));\n                }\n                else {\n                    listener.call(thisArgs, i);\n                }\n            }, undefined, disposables);\n        };\n    }\n    bufferEvents(fn) {\n        const buffer = [];\n        this.buffers.push(buffer);\n        const r = fn();\n        this.buffers.pop();\n        buffer.forEach(flush => flush());\n        return r;\n    }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nclass Relay {\n    constructor() {\n        this.listening = false;\n        this.inputEvent = Event.None;\n        this.inputEventListener = Disposable.None;\n        this.emitter = new Emitter({\n            onFirstListenerDidAdd: () => {\n                this.listening = true;\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n            },\n            onLastListenerRemove: () => {\n                this.listening = false;\n                this.inputEventListener.dispose();\n            }\n        });\n        this.event = this.emitter.event;\n    }\n    set input(event) {\n        this.inputEvent = event;\n        if (this.listening) {\n            this.inputEventListener.dispose();\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\n        }\n    }\n    dispose() {\n        this.inputEventListener.dispose();\n        this.emitter.dispose();\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = setTimeout(callback.bind(context), 0);\n    return { dispose() { clearTimeout(handle); } };\n});\nvar CancellationToken;\n(function (CancellationToken) {\n    function isCancellationToken(thing) {\n        if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {\n            return true;\n        }\n        if (thing instanceof MutableToken) {\n            return true;\n        }\n        if (!thing || typeof thing !== \'object\') {\n            return false;\n        }\n        return typeof thing.isCancellationRequested === \'boolean\'\n            && typeof thing.onCancellationRequested === \'function\';\n    }\n    CancellationToken.isCancellationToken = isCancellationToken;\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: shortcutEvent\n    });\n})(CancellationToken || (CancellationToken = {}));\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n        this._emitter = null;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = null;\n        }\n    }\n}\nclass CancellationTokenSource {\n    constructor(parent) {\n        this._token = undefined;\n        this._parentListener = undefined;\n        this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);\n    }\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually cancel\n            this._token.cancel();\n        }\n    }\n    dispose(cancel = false) {\n        if (cancel) {\n            this.cancel();\n        }\n        if (this._parentListener) {\n            this._parentListener.dispose();\n        }\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nclass KeyCodeStrMap {\n    constructor() {\n        this._keyCodeToStr = [];\n        this._strToKeyCode = Object.create(null);\n    }\n    define(keyCode, str) {\n        this._keyCodeToStr[keyCode] = str;\n        this._strToKeyCode[str.toLowerCase()] = keyCode;\n    }\n    keyCodeToStr(keyCode) {\n        return this._keyCodeToStr[keyCode];\n    }\n    strToKeyCode(str) {\n        return this._strToKeyCode[str.toLowerCase()] || 0 /* Unknown */;\n    }\n}\nconst uiMap = new KeyCodeStrMap();\nconst userSettingsUSMap = new KeyCodeStrMap();\nconst userSettingsGeneralMap = new KeyCodeStrMap();\n(function () {\n    function define(keyCode, uiLabel, usUserSettingsLabel = uiLabel, generalUserSettingsLabel = usUserSettingsLabel) {\n        uiMap.define(keyCode, uiLabel);\n        userSettingsUSMap.define(keyCode, usUserSettingsLabel);\n        userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel);\n    }\n    define(0 /* Unknown */, \'unknown\');\n    define(1 /* Backspace */, \'Backspace\');\n    define(2 /* Tab */, \'Tab\');\n    define(3 /* Enter */, \'Enter\');\n    define(4 /* Shift */, \'Shift\');\n    define(5 /* Ctrl */, \'Ctrl\');\n    define(6 /* Alt */, \'Alt\');\n    define(7 /* PauseBreak */, \'PauseBreak\');\n    define(8 /* CapsLock */, \'CapsLock\');\n    define(9 /* Escape */, \'Escape\');\n    define(10 /* Space */, \'Space\');\n    define(11 /* PageUp */, \'PageUp\');\n    define(12 /* PageDown */, \'PageDown\');\n    define(13 /* End */, \'End\');\n    define(14 /* Home */, \'Home\');\n    define(15 /* LeftArrow */, \'LeftArrow\', \'Left\');\n    define(16 /* UpArrow */, \'UpArrow\', \'Up\');\n    define(17 /* RightArrow */, \'RightArrow\', \'Right\');\n    define(18 /* DownArrow */, \'DownArrow\', \'Down\');\n    define(19 /* Insert */, \'Insert\');\n    define(20 /* Delete */, \'Delete\');\n    define(21 /* KEY_0 */, \'0\');\n    define(22 /* KEY_1 */, \'1\');\n    define(23 /* KEY_2 */, \'2\');\n    define(24 /* KEY_3 */, \'3\');\n    define(25 /* KEY_4 */, \'4\');\n    define(26 /* KEY_5 */, \'5\');\n    define(27 /* KEY_6 */, \'6\');\n    define(28 /* KEY_7 */, \'7\');\n    define(29 /* KEY_8 */, \'8\');\n    define(30 /* KEY_9 */, \'9\');\n    define(31 /* KEY_A */, \'A\');\n    define(32 /* KEY_B */, \'B\');\n    define(33 /* KEY_C */, \'C\');\n    define(34 /* KEY_D */, \'D\');\n    define(35 /* KEY_E */, \'E\');\n    define(36 /* KEY_F */, \'F\');\n    define(37 /* KEY_G */, \'G\');\n    define(38 /* KEY_H */, \'H\');\n    define(39 /* KEY_I */, \'I\');\n    define(40 /* KEY_J */, \'J\');\n    define(41 /* KEY_K */, \'K\');\n    define(42 /* KEY_L */, \'L\');\n    define(43 /* KEY_M */, \'M\');\n    define(44 /* KEY_N */, \'N\');\n    define(45 /* KEY_O */, \'O\');\n    define(46 /* KEY_P */, \'P\');\n    define(47 /* KEY_Q */, \'Q\');\n    define(48 /* KEY_R */, \'R\');\n    define(49 /* KEY_S */, \'S\');\n    define(50 /* KEY_T */, \'T\');\n    define(51 /* KEY_U */, \'U\');\n    define(52 /* KEY_V */, \'V\');\n    define(53 /* KEY_W */, \'W\');\n    define(54 /* KEY_X */, \'X\');\n    define(55 /* KEY_Y */, \'Y\');\n    define(56 /* KEY_Z */, \'Z\');\n    define(57 /* Meta */, \'Meta\');\n    define(58 /* ContextMenu */, \'ContextMenu\');\n    define(59 /* F1 */, \'F1\');\n    define(60 /* F2 */, \'F2\');\n    define(61 /* F3 */, \'F3\');\n    define(62 /* F4 */, \'F4\');\n    define(63 /* F5 */, \'F5\');\n    define(64 /* F6 */, \'F6\');\n    define(65 /* F7 */, \'F7\');\n    define(66 /* F8 */, \'F8\');\n    define(67 /* F9 */, \'F9\');\n    define(68 /* F10 */, \'F10\');\n    define(69 /* F11 */, \'F11\');\n    define(70 /* F12 */, \'F12\');\n    define(71 /* F13 */, \'F13\');\n    define(72 /* F14 */, \'F14\');\n    define(73 /* F15 */, \'F15\');\n    define(74 /* F16 */, \'F16\');\n    define(75 /* F17 */, \'F17\');\n    define(76 /* F18 */, \'F18\');\n    define(77 /* F19 */, \'F19\');\n    define(78 /* NumLock */, \'NumLock\');\n    define(79 /* ScrollLock */, \'ScrollLock\');\n    define(80 /* US_SEMICOLON */, \';\', \';\', \'OEM_1\');\n    define(81 /* US_EQUAL */, \'=\', \'=\', \'OEM_PLUS\');\n    define(82 /* US_COMMA */, \',\', \',\', \'OEM_COMMA\');\n    define(83 /* US_MINUS */, \'-\', \'-\', \'OEM_MINUS\');\n    define(84 /* US_DOT */, \'.\', \'.\', \'OEM_PERIOD\');\n    define(85 /* US_SLASH */, \'/\', \'/\', \'OEM_2\');\n    define(86 /* US_BACKTICK */, \'`\', \'`\', \'OEM_3\');\n    define(110 /* ABNT_C1 */, \'ABNT_C1\');\n    define(111 /* ABNT_C2 */, \'ABNT_C2\');\n    define(87 /* US_OPEN_SQUARE_BRACKET */, \'[\', \'[\', \'OEM_4\');\n    define(88 /* US_BACKSLASH */, \'\\\\\', \'\\\\\', \'OEM_5\');\n    define(89 /* US_CLOSE_SQUARE_BRACKET */, \']\', \']\', \'OEM_6\');\n    define(90 /* US_QUOTE */, \'\\\'\', \'\\\'\', \'OEM_7\');\n    define(91 /* OEM_8 */, \'OEM_8\');\n    define(92 /* OEM_102 */, \'OEM_102\');\n    define(93 /* NUMPAD_0 */, \'NumPad0\');\n    define(94 /* NUMPAD_1 */, \'NumPad1\');\n    define(95 /* NUMPAD_2 */, \'NumPad2\');\n    define(96 /* NUMPAD_3 */, \'NumPad3\');\n    define(97 /* NUMPAD_4 */, \'NumPad4\');\n    define(98 /* NUMPAD_5 */, \'NumPad5\');\n    define(99 /* NUMPAD_6 */, \'NumPad6\');\n    define(100 /* NUMPAD_7 */, \'NumPad7\');\n    define(101 /* NUMPAD_8 */, \'NumPad8\');\n    define(102 /* NUMPAD_9 */, \'NumPad9\');\n    define(103 /* NUMPAD_MULTIPLY */, \'NumPad_Multiply\');\n    define(104 /* NUMPAD_ADD */, \'NumPad_Add\');\n    define(105 /* NUMPAD_SEPARATOR */, \'NumPad_Separator\');\n    define(106 /* NUMPAD_SUBTRACT */, \'NumPad_Subtract\');\n    define(107 /* NUMPAD_DECIMAL */, \'NumPad_Decimal\');\n    define(108 /* NUMPAD_DIVIDE */, \'NumPad_Divide\');\n})();\nvar KeyCodeUtils;\n(function (KeyCodeUtils) {\n    function toString(keyCode) {\n        return uiMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toString = toString;\n    function fromString(key) {\n        return uiMap.strToKeyCode(key);\n    }\n    KeyCodeUtils.fromString = fromString;\n    function toUserSettingsUS(keyCode) {\n        return userSettingsUSMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;\n    function toUserSettingsGeneral(keyCode) {\n        return userSettingsGeneralMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;\n    function fromUserSettings(key) {\n        return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);\n    }\n    KeyCodeUtils.fromUserSettings = fromUserSettings;\n})(KeyCodeUtils || (KeyCodeUtils = {}));\nfunction KeyChord(firstPart, secondPart) {\n    const chordPart = ((secondPart & 0x0000FFFF) << 16) >>> 0;\n    return (firstPart | chordPart) >>> 0;\n}\nfunction createKeybinding(keybinding, OS) {\n    if (keybinding === 0) {\n        return null;\n    }\n    const firstPart = (keybinding & 0x0000FFFF) >>> 0;\n    const chordPart = (keybinding & 0xFFFF0000) >>> 16;\n    if (chordPart !== 0) {\n        return new ChordKeybinding([\n            createSimpleKeybinding(firstPart, OS),\n            createSimpleKeybinding(chordPart, OS)\n        ]);\n    }\n    return new ChordKeybinding([createSimpleKeybinding(firstPart, OS)]);\n}\nfunction createSimpleKeybinding(keybinding, OS) {\n    const ctrlCmd = (keybinding & 2048 /* CtrlCmd */ ? true : false);\n    const winCtrl = (keybinding & 256 /* WinCtrl */ ? true : false);\n    const ctrlKey = (OS === 2 /* Macintosh */ ? winCtrl : ctrlCmd);\n    const shiftKey = (keybinding & 1024 /* Shift */ ? true : false);\n    const altKey = (keybinding & 512 /* Alt */ ? true : false);\n    const metaKey = (OS === 2 /* Macintosh */ ? ctrlCmd : winCtrl);\n    const keyCode = (keybinding & 255 /* KeyCode */);\n    return new SimpleKeybinding(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\nclass SimpleKeybinding {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyCode = keyCode;\n    }\n    equals(other) {\n        return (this.ctrlKey === other.ctrlKey\n            && this.shiftKey === other.shiftKey\n            && this.altKey === other.altKey\n            && this.metaKey === other.metaKey\n            && this.keyCode === other.keyCode);\n    }\n    isModifierKey() {\n        return (this.keyCode === 0 /* Unknown */\n            || this.keyCode === 5 /* Ctrl */\n            || this.keyCode === 57 /* Meta */\n            || this.keyCode === 6 /* Alt */\n            || this.keyCode === 4 /* Shift */);\n    }\n    toChord() {\n        return new ChordKeybinding([this]);\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && this.keyCode === 5 /* Ctrl */)\n            || (this.shiftKey && this.keyCode === 4 /* Shift */)\n            || (this.altKey && this.keyCode === 6 /* Alt */)\n            || (this.metaKey && this.keyCode === 57 /* Meta */));\n    }\n}\nclass ChordKeybinding {\n    constructor(parts) {\n        if (parts.length === 0) {\n            throw illegalArgument(`parts`);\n        }\n        this.parts = parts;\n    }\n}\nclass ResolvedKeybindingPart {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, kbLabel, kbAriaLabel) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyLabel = kbLabel;\n        this.keyAriaLabel = kbAriaLabel;\n    }\n}\n/**\n * A resolved keybinding. Can be a simple keybinding or a chord keybinding.\n */\nclass ResolvedKeybinding {\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nclass Selection extends Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return \'[\' + this.selectionStartLineNumber + \',\' + this.selectionStartColumn + \' -> \' + this.positionLineNumber + \',\' + this.positionColumn + \']\';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* LTR */;\n        }\n        return 1 /* RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new position_Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === \'number\')\n            && (typeof obj.selectionStartColumn === \'number\')\n            && (typeof obj.positionLineNumber === \'number\')\n            && (typeof obj.positionColumn === \'number\'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/core/token.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Token {\n    constructor(offset, type, language) {\n        this.offset = offset | 0; // @perf\n        this.type = type;\n        this.language = language;\n    }\n    toString() {\n        return \'(\' + this.offset + \', \' + this.type + \')\';\n    }\n}\nclass TokenizationResult {\n    constructor(tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n    }\n}\nclass TokenizationResult2 {\n    constructor(tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\nvar AccessibilitySupport;\n(function (AccessibilitySupport) {\n    /**\n     * This should be the browser case where it is not known if a screen reader is attached or no.\n     */\n    AccessibilitySupport[AccessibilitySupport["Unknown"] = 0] = "Unknown";\n    AccessibilitySupport[AccessibilitySupport["Disabled"] = 1] = "Disabled";\n    AccessibilitySupport[AccessibilitySupport["Enabled"] = 2] = "Enabled";\n})(AccessibilitySupport || (AccessibilitySupport = {}));\nvar CompletionItemInsertTextRule;\n(function (CompletionItemInsertTextRule) {\n    /**\n     * Adjust whitespace/indentation of multiline insert texts to\n     * match the current line indentation.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule["KeepWhitespace"] = 1] = "KeepWhitespace";\n    /**\n     * `insertText` is a snippet.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule["InsertAsSnippet"] = 4] = "InsertAsSnippet";\n})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));\nvar CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind[CompletionItemKind["Method"] = 0] = "Method";\n    CompletionItemKind[CompletionItemKind["Function"] = 1] = "Function";\n    CompletionItemKind[CompletionItemKind["Constructor"] = 2] = "Constructor";\n    CompletionItemKind[CompletionItemKind["Field"] = 3] = "Field";\n    CompletionItemKind[CompletionItemKind["Variable"] = 4] = "Variable";\n    CompletionItemKind[CompletionItemKind["Class"] = 5] = "Class";\n    CompletionItemKind[CompletionItemKind["Struct"] = 6] = "Struct";\n    CompletionItemKind[CompletionItemKind["Interface"] = 7] = "Interface";\n    CompletionItemKind[CompletionItemKind["Module"] = 8] = "Module";\n    CompletionItemKind[CompletionItemKind["Property"] = 9] = "Property";\n    CompletionItemKind[CompletionItemKind["Event"] = 10] = "Event";\n    CompletionItemKind[CompletionItemKind["Operator"] = 11] = "Operator";\n    CompletionItemKind[CompletionItemKind["Unit"] = 12] = "Unit";\n    CompletionItemKind[CompletionItemKind["Value"] = 13] = "Value";\n    CompletionItemKind[CompletionItemKind["Constant"] = 14] = "Constant";\n    CompletionItemKind[CompletionItemKind["Enum"] = 15] = "Enum";\n    CompletionItemKind[CompletionItemKind["EnumMember"] = 16] = "EnumMember";\n    CompletionItemKind[CompletionItemKind["Keyword"] = 17] = "Keyword";\n    CompletionItemKind[CompletionItemKind["Text"] = 18] = "Text";\n    CompletionItemKind[CompletionItemKind["Color"] = 19] = "Color";\n    CompletionItemKind[CompletionItemKind["File"] = 20] = "File";\n    CompletionItemKind[CompletionItemKind["Reference"] = 21] = "Reference";\n    CompletionItemKind[CompletionItemKind["Customcolor"] = 22] = "Customcolor";\n    CompletionItemKind[CompletionItemKind["Folder"] = 23] = "Folder";\n    CompletionItemKind[CompletionItemKind["TypeParameter"] = 24] = "TypeParameter";\n    CompletionItemKind[CompletionItemKind["User"] = 25] = "User";\n    CompletionItemKind[CompletionItemKind["Issue"] = 26] = "Issue";\n    CompletionItemKind[CompletionItemKind["Snippet"] = 27] = "Snippet";\n})(CompletionItemKind || (CompletionItemKind = {}));\nvar CompletionItemTag;\n(function (CompletionItemTag) {\n    CompletionItemTag[CompletionItemTag["Deprecated"] = 1] = "Deprecated";\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * How a suggest provider was triggered.\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    CompletionTriggerKind[CompletionTriggerKind["Invoke"] = 0] = "Invoke";\n    CompletionTriggerKind[CompletionTriggerKind["TriggerCharacter"] = 1] = "TriggerCharacter";\n    CompletionTriggerKind[CompletionTriggerKind["TriggerForIncompleteCompletions"] = 2] = "TriggerForIncompleteCompletions";\n})(CompletionTriggerKind || (CompletionTriggerKind = {}));\n/**\n * A positioning preference for rendering content widgets.\n */\nvar ContentWidgetPositionPreference;\n(function (ContentWidgetPositionPreference) {\n    /**\n     * Place the content widget exactly at a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference["EXACT"] = 0] = "EXACT";\n    /**\n     * Place the content widget above a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference["ABOVE"] = 1] = "ABOVE";\n    /**\n     * Place the content widget below a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference["BELOW"] = 2] = "BELOW";\n})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));\n/**\n * Describes the reason the cursor has changed its position.\n */\nvar CursorChangeReason;\n(function (CursorChangeReason) {\n    /**\n     * Unknown or not set.\n     */\n    CursorChangeReason[CursorChangeReason["NotSet"] = 0] = "NotSet";\n    /**\n     * A `model.setValue()` was called.\n     */\n    CursorChangeReason[CursorChangeReason["ContentFlush"] = 1] = "ContentFlush";\n    /**\n     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n     */\n    CursorChangeReason[CursorChangeReason["RecoverFromMarkers"] = 2] = "RecoverFromMarkers";\n    /**\n     * There was an explicit user gesture.\n     */\n    CursorChangeReason[CursorChangeReason["Explicit"] = 3] = "Explicit";\n    /**\n     * There was a Paste.\n     */\n    CursorChangeReason[CursorChangeReason["Paste"] = 4] = "Paste";\n    /**\n     * There was an Undo.\n     */\n    CursorChangeReason[CursorChangeReason["Undo"] = 5] = "Undo";\n    /**\n     * There was a Redo.\n     */\n    CursorChangeReason[CursorChangeReason["Redo"] = 6] = "Redo";\n})(CursorChangeReason || (CursorChangeReason = {}));\n/**\n * The default end of line to use when instantiating models.\n */\nvar DefaultEndOfLine;\n(function (DefaultEndOfLine) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine["LF"] = 1] = "LF";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine["CRLF"] = 2] = "CRLF";\n})(DefaultEndOfLine || (DefaultEndOfLine = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * Configuration options for auto indentation in the editor\n */\nvar EditorAutoIndentStrategy;\n(function (EditorAutoIndentStrategy) {\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy["None"] = 0] = "None";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Keep"] = 1] = "Keep";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Brackets"] = 2] = "Brackets";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Advanced"] = 3] = "Advanced";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Full"] = 4] = "Full";\n})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));\nvar EditorOption;\n(function (EditorOption) {\n    EditorOption[EditorOption["acceptSuggestionOnCommitCharacter"] = 0] = "acceptSuggestionOnCommitCharacter";\n    EditorOption[EditorOption["acceptSuggestionOnEnter"] = 1] = "acceptSuggestionOnEnter";\n    EditorOption[EditorOption["accessibilitySupport"] = 2] = "accessibilitySupport";\n    EditorOption[EditorOption["accessibilityPageSize"] = 3] = "accessibilityPageSize";\n    EditorOption[EditorOption["ariaLabel"] = 4] = "ariaLabel";\n    EditorOption[EditorOption["autoClosingBrackets"] = 5] = "autoClosingBrackets";\n    EditorOption[EditorOption["autoClosingDelete"] = 6] = "autoClosingDelete";\n    EditorOption[EditorOption["autoClosingOvertype"] = 7] = "autoClosingOvertype";\n    EditorOption[EditorOption["autoClosingQuotes"] = 8] = "autoClosingQuotes";\n    EditorOption[EditorOption["autoIndent"] = 9] = "autoIndent";\n    EditorOption[EditorOption["automaticLayout"] = 10] = "automaticLayout";\n    EditorOption[EditorOption["autoSurround"] = 11] = "autoSurround";\n    EditorOption[EditorOption["codeLens"] = 12] = "codeLens";\n    EditorOption[EditorOption["codeLensFontFamily"] = 13] = "codeLensFontFamily";\n    EditorOption[EditorOption["codeLensFontSize"] = 14] = "codeLensFontSize";\n    EditorOption[EditorOption["colorDecorators"] = 15] = "colorDecorators";\n    EditorOption[EditorOption["columnSelection"] = 16] = "columnSelection";\n    EditorOption[EditorOption["comments"] = 17] = "comments";\n    EditorOption[EditorOption["contextmenu"] = 18] = "contextmenu";\n    EditorOption[EditorOption["copyWithSyntaxHighlighting"] = 19] = "copyWithSyntaxHighlighting";\n    EditorOption[EditorOption["cursorBlinking"] = 20] = "cursorBlinking";\n    EditorOption[EditorOption["cursorSmoothCaretAnimation"] = 21] = "cursorSmoothCaretAnimation";\n    EditorOption[EditorOption["cursorStyle"] = 22] = "cursorStyle";\n    EditorOption[EditorOption["cursorSurroundingLines"] = 23] = "cursorSurroundingLines";\n    EditorOption[EditorOption["cursorSurroundingLinesStyle"] = 24] = "cursorSurroundingLinesStyle";\n    EditorOption[EditorOption["cursorWidth"] = 25] = "cursorWidth";\n    EditorOption[EditorOption["disableLayerHinting"] = 26] = "disableLayerHinting";\n    EditorOption[EditorOption["disableMonospaceOptimizations"] = 27] = "disableMonospaceOptimizations";\n    EditorOption[EditorOption["domReadOnly"] = 28] = "domReadOnly";\n    EditorOption[EditorOption["dragAndDrop"] = 29] = "dragAndDrop";\n    EditorOption[EditorOption["emptySelectionClipboard"] = 30] = "emptySelectionClipboard";\n    EditorOption[EditorOption["extraEditorClassName"] = 31] = "extraEditorClassName";\n    EditorOption[EditorOption["fastScrollSensitivity"] = 32] = "fastScrollSensitivity";\n    EditorOption[EditorOption["find"] = 33] = "find";\n    EditorOption[EditorOption["fixedOverflowWidgets"] = 34] = "fixedOverflowWidgets";\n    EditorOption[EditorOption["folding"] = 35] = "folding";\n    EditorOption[EditorOption["foldingStrategy"] = 36] = "foldingStrategy";\n    EditorOption[EditorOption["foldingHighlight"] = 37] = "foldingHighlight";\n    EditorOption[EditorOption["unfoldOnClickAfterEndOfLine"] = 38] = "unfoldOnClickAfterEndOfLine";\n    EditorOption[EditorOption["fontFamily"] = 39] = "fontFamily";\n    EditorOption[EditorOption["fontInfo"] = 40] = "fontInfo";\n    EditorOption[EditorOption["fontLigatures"] = 41] = "fontLigatures";\n    EditorOption[EditorOption["fontSize"] = 42] = "fontSize";\n    EditorOption[EditorOption["fontWeight"] = 43] = "fontWeight";\n    EditorOption[EditorOption["formatOnPaste"] = 44] = "formatOnPaste";\n    EditorOption[EditorOption["formatOnType"] = 45] = "formatOnType";\n    EditorOption[EditorOption["glyphMargin"] = 46] = "glyphMargin";\n    EditorOption[EditorOption["gotoLocation"] = 47] = "gotoLocation";\n    EditorOption[EditorOption["hideCursorInOverviewRuler"] = 48] = "hideCursorInOverviewRuler";\n    EditorOption[EditorOption["highlightActiveIndentGuide"] = 49] = "highlightActiveIndentGuide";\n    EditorOption[EditorOption["hover"] = 50] = "hover";\n    EditorOption[EditorOption["inDiffEditor"] = 51] = "inDiffEditor";\n    EditorOption[EditorOption["letterSpacing"] = 52] = "letterSpacing";\n    EditorOption[EditorOption["lightbulb"] = 53] = "lightbulb";\n    EditorOption[EditorOption["lineDecorationsWidth"] = 54] = "lineDecorationsWidth";\n    EditorOption[EditorOption["lineHeight"] = 55] = "lineHeight";\n    EditorOption[EditorOption["lineNumbers"] = 56] = "lineNumbers";\n    EditorOption[EditorOption["lineNumbersMinChars"] = 57] = "lineNumbersMinChars";\n    EditorOption[EditorOption["linkedEditing"] = 58] = "linkedEditing";\n    EditorOption[EditorOption["links"] = 59] = "links";\n    EditorOption[EditorOption["matchBrackets"] = 60] = "matchBrackets";\n    EditorOption[EditorOption["minimap"] = 61] = "minimap";\n    EditorOption[EditorOption["mouseStyle"] = 62] = "mouseStyle";\n    EditorOption[EditorOption["mouseWheelScrollSensitivity"] = 63] = "mouseWheelScrollSensitivity";\n    EditorOption[EditorOption["mouseWheelZoom"] = 64] = "mouseWheelZoom";\n    EditorOption[EditorOption["multiCursorMergeOverlapping"] = 65] = "multiCursorMergeOverlapping";\n    EditorOption[EditorOption["multiCursorModifier"] = 66] = "multiCursorModifier";\n    EditorOption[EditorOption["multiCursorPaste"] = 67] = "multiCursorPaste";\n    EditorOption[EditorOption["occurrencesHighlight"] = 68] = "occurrencesHighlight";\n    EditorOption[EditorOption["overviewRulerBorder"] = 69] = "overviewRulerBorder";\n    EditorOption[EditorOption["overviewRulerLanes"] = 70] = "overviewRulerLanes";\n    EditorOption[EditorOption["padding"] = 71] = "padding";\n    EditorOption[EditorOption["parameterHints"] = 72] = "parameterHints";\n    EditorOption[EditorOption["peekWidgetDefaultFocus"] = 73] = "peekWidgetDefaultFocus";\n    EditorOption[EditorOption["definitionLinkOpensInPeek"] = 74] = "definitionLinkOpensInPeek";\n    EditorOption[EditorOption["quickSuggestions"] = 75] = "quickSuggestions";\n    EditorOption[EditorOption["quickSuggestionsDelay"] = 76] = "quickSuggestionsDelay";\n    EditorOption[EditorOption["readOnly"] = 77] = "readOnly";\n    EditorOption[EditorOption["renameOnType"] = 78] = "renameOnType";\n    EditorOption[EditorOption["renderControlCharacters"] = 79] = "renderControlCharacters";\n    EditorOption[EditorOption["renderIndentGuides"] = 80] = "renderIndentGuides";\n    EditorOption[EditorOption["renderFinalNewline"] = 81] = "renderFinalNewline";\n    EditorOption[EditorOption["renderLineHighlight"] = 82] = "renderLineHighlight";\n    EditorOption[EditorOption["renderLineHighlightOnlyWhenFocus"] = 83] = "renderLineHighlightOnlyWhenFocus";\n    EditorOption[EditorOption["renderValidationDecorations"] = 84] = "renderValidationDecorations";\n    EditorOption[EditorOption["renderWhitespace"] = 85] = "renderWhitespace";\n    EditorOption[EditorOption["revealHorizontalRightPadding"] = 86] = "revealHorizontalRightPadding";\n    EditorOption[EditorOption["roundedSelection"] = 87] = "roundedSelection";\n    EditorOption[EditorOption["rulers"] = 88] = "rulers";\n    EditorOption[EditorOption["scrollbar"] = 89] = "scrollbar";\n    EditorOption[EditorOption["scrollBeyondLastColumn"] = 90] = "scrollBeyondLastColumn";\n    EditorOption[EditorOption["scrollBeyondLastLine"] = 91] = "scrollBeyondLastLine";\n    EditorOption[EditorOption["scrollPredominantAxis"] = 92] = "scrollPredominantAxis";\n    EditorOption[EditorOption["selectionClipboard"] = 93] = "selectionClipboard";\n    EditorOption[EditorOption["selectionHighlight"] = 94] = "selectionHighlight";\n    EditorOption[EditorOption["selectOnLineNumbers"] = 95] = "selectOnLineNumbers";\n    EditorOption[EditorOption["showFoldingControls"] = 96] = "showFoldingControls";\n    EditorOption[EditorOption["showUnused"] = 97] = "showUnused";\n    EditorOption[EditorOption["snippetSuggestions"] = 98] = "snippetSuggestions";\n    EditorOption[EditorOption["smartSelect"] = 99] = "smartSelect";\n    EditorOption[EditorOption["smoothScrolling"] = 100] = "smoothScrolling";\n    EditorOption[EditorOption["stickyTabStops"] = 101] = "stickyTabStops";\n    EditorOption[EditorOption["stopRenderingLineAfter"] = 102] = "stopRenderingLineAfter";\n    EditorOption[EditorOption["suggest"] = 103] = "suggest";\n    EditorOption[EditorOption["suggestFontSize"] = 104] = "suggestFontSize";\n    EditorOption[EditorOption["suggestLineHeight"] = 105] = "suggestLineHeight";\n    EditorOption[EditorOption["suggestOnTriggerCharacters"] = 106] = "suggestOnTriggerCharacters";\n    EditorOption[EditorOption["suggestSelection"] = 107] = "suggestSelection";\n    EditorOption[EditorOption["tabCompletion"] = 108] = "tabCompletion";\n    EditorOption[EditorOption["tabIndex"] = 109] = "tabIndex";\n    EditorOption[EditorOption["unusualLineTerminators"] = 110] = "unusualLineTerminators";\n    EditorOption[EditorOption["useShadowDOM"] = 111] = "useShadowDOM";\n    EditorOption[EditorOption["useTabStops"] = 112] = "useTabStops";\n    EditorOption[EditorOption["wordSeparators"] = 113] = "wordSeparators";\n    EditorOption[EditorOption["wordWrap"] = 114] = "wordWrap";\n    EditorOption[EditorOption["wordWrapBreakAfterCharacters"] = 115] = "wordWrapBreakAfterCharacters";\n    EditorOption[EditorOption["wordWrapBreakBeforeCharacters"] = 116] = "wordWrapBreakBeforeCharacters";\n    EditorOption[EditorOption["wordWrapColumn"] = 117] = "wordWrapColumn";\n    EditorOption[EditorOption["wordWrapOverride1"] = 118] = "wordWrapOverride1";\n    EditorOption[EditorOption["wordWrapOverride2"] = 119] = "wordWrapOverride2";\n    EditorOption[EditorOption["wrappingIndent"] = 120] = "wrappingIndent";\n    EditorOption[EditorOption["wrappingStrategy"] = 121] = "wrappingStrategy";\n    EditorOption[EditorOption["showDeprecated"] = 122] = "showDeprecated";\n    EditorOption[EditorOption["inlineHints"] = 123] = "inlineHints";\n    EditorOption[EditorOption["editorClassName"] = 124] = "editorClassName";\n    EditorOption[EditorOption["pixelRatio"] = 125] = "pixelRatio";\n    EditorOption[EditorOption["tabFocusMode"] = 126] = "tabFocusMode";\n    EditorOption[EditorOption["layoutInfo"] = 127] = "layoutInfo";\n    EditorOption[EditorOption["wrappingInfo"] = 128] = "wrappingInfo";\n})(EditorOption || (EditorOption = {}));\n/**\n * End of line character preference.\n */\nvar EndOfLinePreference;\n(function (EndOfLinePreference) {\n    /**\n     * Use the end of line character identified in the text buffer.\n     */\n    EndOfLinePreference[EndOfLinePreference["TextDefined"] = 0] = "TextDefined";\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference["LF"] = 1] = "LF";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference["CRLF"] = 2] = "CRLF";\n})(EndOfLinePreference || (EndOfLinePreference = {}));\n/**\n * End of line character preference.\n */\nvar EndOfLineSequence;\n(function (EndOfLineSequence) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence["LF"] = 0] = "LF";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence["CRLF"] = 1] = "CRLF";\n})(EndOfLineSequence || (EndOfLineSequence = {}));\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nvar IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line\'s indentation.\n     */\n    IndentAction[IndentAction["None"] = 0] = "None";\n    /**\n     * Insert new line and indent once (relative to the previous line\'s indentation).\n     */\n    IndentAction[IndentAction["Indent"] = 1] = "Indent";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction["IndentOutdent"] = 2] = "IndentOutdent";\n    /**\n     * Insert new line and outdent once (relative to the previous line\'s indentation).\n     */\n    IndentAction[IndentAction["Outdent"] = 3] = "Outdent";\n})(IndentAction || (IndentAction = {}));\nvar InlineHintKind;\n(function (InlineHintKind) {\n    InlineHintKind[InlineHintKind["Other"] = 0] = "Other";\n    InlineHintKind[InlineHintKind["Type"] = 1] = "Type";\n    InlineHintKind[InlineHintKind["Parameter"] = 2] = "Parameter";\n})(InlineHintKind || (InlineHintKind = {}));\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are "more general", as they should work across browsers & OS`s.\n */\nvar KeyCode;\n(function (KeyCode) {\n    KeyCode[KeyCode["DependsOnKbLayout"] = -1] = "DependsOnKbLayout";\n    /**\n     * Placed first to cover the 0 value of the enum.\n     */\n    KeyCode[KeyCode["Unknown"] = 0] = "Unknown";\n    KeyCode[KeyCode["Backspace"] = 1] = "Backspace";\n    KeyCode[KeyCode["Tab"] = 2] = "Tab";\n    KeyCode[KeyCode["Enter"] = 3] = "Enter";\n    KeyCode[KeyCode["Shift"] = 4] = "Shift";\n    KeyCode[KeyCode["Ctrl"] = 5] = "Ctrl";\n    KeyCode[KeyCode["Alt"] = 6] = "Alt";\n    KeyCode[KeyCode["PauseBreak"] = 7] = "PauseBreak";\n    KeyCode[KeyCode["CapsLock"] = 8] = "CapsLock";\n    KeyCode[KeyCode["Escape"] = 9] = "Escape";\n    KeyCode[KeyCode["Space"] = 10] = "Space";\n    KeyCode[KeyCode["PageUp"] = 11] = "PageUp";\n    KeyCode[KeyCode["PageDown"] = 12] = "PageDown";\n    KeyCode[KeyCode["End"] = 13] = "End";\n    KeyCode[KeyCode["Home"] = 14] = "Home";\n    KeyCode[KeyCode["LeftArrow"] = 15] = "LeftArrow";\n    KeyCode[KeyCode["UpArrow"] = 16] = "UpArrow";\n    KeyCode[KeyCode["RightArrow"] = 17] = "RightArrow";\n    KeyCode[KeyCode["DownArrow"] = 18] = "DownArrow";\n    KeyCode[KeyCode["Insert"] = 19] = "Insert";\n    KeyCode[KeyCode["Delete"] = 20] = "Delete";\n    KeyCode[KeyCode["KEY_0"] = 21] = "KEY_0";\n    KeyCode[KeyCode["KEY_1"] = 22] = "KEY_1";\n    KeyCode[KeyCode["KEY_2"] = 23] = "KEY_2";\n    KeyCode[KeyCode["KEY_3"] = 24] = "KEY_3";\n    KeyCode[KeyCode["KEY_4"] = 25] = "KEY_4";\n    KeyCode[KeyCode["KEY_5"] = 26] = "KEY_5";\n    KeyCode[KeyCode["KEY_6"] = 27] = "KEY_6";\n    KeyCode[KeyCode["KEY_7"] = 28] = "KEY_7";\n    KeyCode[KeyCode["KEY_8"] = 29] = "KEY_8";\n    KeyCode[KeyCode["KEY_9"] = 30] = "KEY_9";\n    KeyCode[KeyCode["KEY_A"] = 31] = "KEY_A";\n    KeyCode[KeyCode["KEY_B"] = 32] = "KEY_B";\n    KeyCode[KeyCode["KEY_C"] = 33] = "KEY_C";\n    KeyCode[KeyCode["KEY_D"] = 34] = "KEY_D";\n    KeyCode[KeyCode["KEY_E"] = 35] = "KEY_E";\n    KeyCode[KeyCode["KEY_F"] = 36] = "KEY_F";\n    KeyCode[KeyCode["KEY_G"] = 37] = "KEY_G";\n    KeyCode[KeyCode["KEY_H"] = 38] = "KEY_H";\n    KeyCode[KeyCode["KEY_I"] = 39] = "KEY_I";\n    KeyCode[KeyCode["KEY_J"] = 40] = "KEY_J";\n    KeyCode[KeyCode["KEY_K"] = 41] = "KEY_K";\n    KeyCode[KeyCode["KEY_L"] = 42] = "KEY_L";\n    KeyCode[KeyCode["KEY_M"] = 43] = "KEY_M";\n    KeyCode[KeyCode["KEY_N"] = 44] = "KEY_N";\n    KeyCode[KeyCode["KEY_O"] = 45] = "KEY_O";\n    KeyCode[KeyCode["KEY_P"] = 46] = "KEY_P";\n    KeyCode[KeyCode["KEY_Q"] = 47] = "KEY_Q";\n    KeyCode[KeyCode["KEY_R"] = 48] = "KEY_R";\n    KeyCode[KeyCode["KEY_S"] = 49] = "KEY_S";\n    KeyCode[KeyCode["KEY_T"] = 50] = "KEY_T";\n    KeyCode[KeyCode["KEY_U"] = 51] = "KEY_U";\n    KeyCode[KeyCode["KEY_V"] = 52] = "KEY_V";\n    KeyCode[KeyCode["KEY_W"] = 53] = "KEY_W";\n    KeyCode[KeyCode["KEY_X"] = 54] = "KEY_X";\n    KeyCode[KeyCode["KEY_Y"] = 55] = "KEY_Y";\n    KeyCode[KeyCode["KEY_Z"] = 56] = "KEY_Z";\n    KeyCode[KeyCode["Meta"] = 57] = "Meta";\n    KeyCode[KeyCode["ContextMenu"] = 58] = "ContextMenu";\n    KeyCode[KeyCode["F1"] = 59] = "F1";\n    KeyCode[KeyCode["F2"] = 60] = "F2";\n    KeyCode[KeyCode["F3"] = 61] = "F3";\n    KeyCode[KeyCode["F4"] = 62] = "F4";\n    KeyCode[KeyCode["F5"] = 63] = "F5";\n    KeyCode[KeyCode["F6"] = 64] = "F6";\n    KeyCode[KeyCode["F7"] = 65] = "F7";\n    KeyCode[KeyCode["F8"] = 66] = "F8";\n    KeyCode[KeyCode["F9"] = 67] = "F9";\n    KeyCode[KeyCode["F10"] = 68] = "F10";\n    KeyCode[KeyCode["F11"] = 69] = "F11";\n    KeyCode[KeyCode["F12"] = 70] = "F12";\n    KeyCode[KeyCode["F13"] = 71] = "F13";\n    KeyCode[KeyCode["F14"] = 72] = "F14";\n    KeyCode[KeyCode["F15"] = 73] = "F15";\n    KeyCode[KeyCode["F16"] = 74] = "F16";\n    KeyCode[KeyCode["F17"] = 75] = "F17";\n    KeyCode[KeyCode["F18"] = 76] = "F18";\n    KeyCode[KeyCode["F19"] = 77] = "F19";\n    KeyCode[KeyCode["NumLock"] = 78] = "NumLock";\n    KeyCode[KeyCode["ScrollLock"] = 79] = "ScrollLock";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \';:\' key\n     */\n    KeyCode[KeyCode["US_SEMICOLON"] = 80] = "US_SEMICOLON";\n    /**\n     * For any country/region, the \'+\' key\n     * For the US standard keyboard, the \'=+\' key\n     */\n    KeyCode[KeyCode["US_EQUAL"] = 81] = "US_EQUAL";\n    /**\n     * For any country/region, the \',\' key\n     * For the US standard keyboard, the \',<\' key\n     */\n    KeyCode[KeyCode["US_COMMA"] = 82] = "US_COMMA";\n    /**\n     * For any country/region, the \'-\' key\n     * For the US standard keyboard, the \'-_\' key\n     */\n    KeyCode[KeyCode["US_MINUS"] = 83] = "US_MINUS";\n    /**\n     * For any country/region, the \'.\' key\n     * For the US standard keyboard, the \'.>\' key\n     */\n    KeyCode[KeyCode["US_DOT"] = 84] = "US_DOT";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \'/?\' key\n     */\n    KeyCode[KeyCode["US_SLASH"] = 85] = "US_SLASH";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \'`~\' key\n     */\n    KeyCode[KeyCode["US_BACKTICK"] = 86] = "US_BACKTICK";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \'[{\' key\n     */\n    KeyCode[KeyCode["US_OPEN_SQUARE_BRACKET"] = 87] = "US_OPEN_SQUARE_BRACKET";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \'\\|\' key\n     */\n    KeyCode[KeyCode["US_BACKSLASH"] = 88] = "US_BACKSLASH";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \']}\' key\n     */\n    KeyCode[KeyCode["US_CLOSE_SQUARE_BRACKET"] = 89] = "US_CLOSE_SQUARE_BRACKET";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the \'\'"\' key\n     */\n    KeyCode[KeyCode["US_QUOTE"] = 90] = "US_QUOTE";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     */\n    KeyCode[KeyCode["OEM_8"] = 91] = "OEM_8";\n    /**\n     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n     */\n    KeyCode[KeyCode["OEM_102"] = 92] = "OEM_102";\n    KeyCode[KeyCode["NUMPAD_0"] = 93] = "NUMPAD_0";\n    KeyCode[KeyCode["NUMPAD_1"] = 94] = "NUMPAD_1";\n    KeyCode[KeyCode["NUMPAD_2"] = 95] = "NUMPAD_2";\n    KeyCode[KeyCode["NUMPAD_3"] = 96] = "NUMPAD_3";\n    KeyCode[KeyCode["NUMPAD_4"] = 97] = "NUMPAD_4";\n    KeyCode[KeyCode["NUMPAD_5"] = 98] = "NUMPAD_5";\n    KeyCode[KeyCode["NUMPAD_6"] = 99] = "NUMPAD_6";\n    KeyCode[KeyCode["NUMPAD_7"] = 100] = "NUMPAD_7";\n    KeyCode[KeyCode["NUMPAD_8"] = 101] = "NUMPAD_8";\n    KeyCode[KeyCode["NUMPAD_9"] = 102] = "NUMPAD_9";\n    KeyCode[KeyCode["NUMPAD_MULTIPLY"] = 103] = "NUMPAD_MULTIPLY";\n    KeyCode[KeyCode["NUMPAD_ADD"] = 104] = "NUMPAD_ADD";\n    KeyCode[KeyCode["NUMPAD_SEPARATOR"] = 105] = "NUMPAD_SEPARATOR";\n    KeyCode[KeyCode["NUMPAD_SUBTRACT"] = 106] = "NUMPAD_SUBTRACT";\n    KeyCode[KeyCode["NUMPAD_DECIMAL"] = 107] = "NUMPAD_DECIMAL";\n    KeyCode[KeyCode["NUMPAD_DIVIDE"] = 108] = "NUMPAD_DIVIDE";\n    /**\n     * Cover all key codes when IME is processing input.\n     */\n    KeyCode[KeyCode["KEY_IN_COMPOSITION"] = 109] = "KEY_IN_COMPOSITION";\n    KeyCode[KeyCode["ABNT_C1"] = 110] = "ABNT_C1";\n    KeyCode[KeyCode["ABNT_C2"] = 111] = "ABNT_C2";\n    /**\n     * Placed last to cover the length of the enum.\n     * Please do not depend on this value!\n     */\n    KeyCode[KeyCode["MAX_VALUE"] = 112] = "MAX_VALUE";\n})(KeyCode || (KeyCode = {}));\nvar MarkerSeverity;\n(function (MarkerSeverity) {\n    MarkerSeverity[MarkerSeverity["Hint"] = 1] = "Hint";\n    MarkerSeverity[MarkerSeverity["Info"] = 2] = "Info";\n    MarkerSeverity[MarkerSeverity["Warning"] = 4] = "Warning";\n    MarkerSeverity[MarkerSeverity["Error"] = 8] = "Error";\n})(MarkerSeverity || (MarkerSeverity = {}));\nvar MarkerTag;\n(function (MarkerTag) {\n    MarkerTag[MarkerTag["Unnecessary"] = 1] = "Unnecessary";\n    MarkerTag[MarkerTag["Deprecated"] = 2] = "Deprecated";\n})(MarkerTag || (MarkerTag = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nvar MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition["Inline"] = 1] = "Inline";\n    MinimapPosition[MinimapPosition["Gutter"] = 2] = "Gutter";\n})(MinimapPosition || (MinimapPosition = {}));\n/**\n * Type of hit element with the mouse in the editor.\n */\nvar MouseTargetType;\n(function (MouseTargetType) {\n    /**\n     * Mouse is on top of an unknown element.\n     */\n    MouseTargetType[MouseTargetType["UNKNOWN"] = 0] = "UNKNOWN";\n    /**\n     * Mouse is on top of the textarea used for input.\n     */\n    MouseTargetType[MouseTargetType["TEXTAREA"] = 1] = "TEXTAREA";\n    /**\n     * Mouse is on top of the glyph margin\n     */\n    MouseTargetType[MouseTargetType["GUTTER_GLYPH_MARGIN"] = 2] = "GUTTER_GLYPH_MARGIN";\n    /**\n     * Mouse is on top of the line numbers\n     */\n    MouseTargetType[MouseTargetType["GUTTER_LINE_NUMBERS"] = 3] = "GUTTER_LINE_NUMBERS";\n    /**\n     * Mouse is on top of the line decorations\n     */\n    MouseTargetType[MouseTargetType["GUTTER_LINE_DECORATIONS"] = 4] = "GUTTER_LINE_DECORATIONS";\n    /**\n     * Mouse is on top of the whitespace left in the gutter by a view zone.\n     */\n    MouseTargetType[MouseTargetType["GUTTER_VIEW_ZONE"] = 5] = "GUTTER_VIEW_ZONE";\n    /**\n     * Mouse is on top of text in the content.\n     */\n    MouseTargetType[MouseTargetType["CONTENT_TEXT"] = 6] = "CONTENT_TEXT";\n    /**\n     * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n     */\n    MouseTargetType[MouseTargetType["CONTENT_EMPTY"] = 7] = "CONTENT_EMPTY";\n    /**\n     * Mouse is on top of a view zone in the content.\n     */\n    MouseTargetType[MouseTargetType["CONTENT_VIEW_ZONE"] = 8] = "CONTENT_VIEW_ZONE";\n    /**\n     * Mouse is on top of a content widget.\n     */\n    MouseTargetType[MouseTargetType["CONTENT_WIDGET"] = 9] = "CONTENT_WIDGET";\n    /**\n     * Mouse is on top of the decorations overview ruler.\n     */\n    MouseTargetType[MouseTargetType["OVERVIEW_RULER"] = 10] = "OVERVIEW_RULER";\n    /**\n     * Mouse is on top of a scrollbar.\n     */\n    MouseTargetType[MouseTargetType["SCROLLBAR"] = 11] = "SCROLLBAR";\n    /**\n     * Mouse is on top of an overlay widget.\n     */\n    MouseTargetType[MouseTargetType["OVERLAY_WIDGET"] = 12] = "OVERLAY_WIDGET";\n    /**\n     * Mouse is outside of the editor.\n     */\n    MouseTargetType[MouseTargetType["OUTSIDE_EDITOR"] = 13] = "OUTSIDE_EDITOR";\n})(MouseTargetType || (MouseTargetType = {}));\n/**\n * A positioning preference for rendering overlay widgets.\n */\nvar OverlayWidgetPositionPreference;\n(function (OverlayWidgetPositionPreference) {\n    /**\n     * Position the overlay widget in the top right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["TOP_RIGHT_CORNER"] = 0] = "TOP_RIGHT_CORNER";\n    /**\n     * Position the overlay widget in the bottom right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["BOTTOM_RIGHT_CORNER"] = 1] = "BOTTOM_RIGHT_CORNER";\n    /**\n     * Position the overlay widget in the top center\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["TOP_CENTER"] = 2] = "TOP_CENTER";\n})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nvar OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane["Left"] = 1] = "Left";\n    OverviewRulerLane[OverviewRulerLane["Center"] = 2] = "Center";\n    OverviewRulerLane[OverviewRulerLane["Right"] = 4] = "Right";\n    OverviewRulerLane[OverviewRulerLane["Full"] = 7] = "Full";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\nvar RenderLineNumbersType;\n(function (RenderLineNumbersType) {\n    RenderLineNumbersType[RenderLineNumbersType["Off"] = 0] = "Off";\n    RenderLineNumbersType[RenderLineNumbersType["On"] = 1] = "On";\n    RenderLineNumbersType[RenderLineNumbersType["Relative"] = 2] = "Relative";\n    RenderLineNumbersType[RenderLineNumbersType["Interval"] = 3] = "Interval";\n    RenderLineNumbersType[RenderLineNumbersType["Custom"] = 4] = "Custom";\n})(RenderLineNumbersType || (RenderLineNumbersType = {}));\nvar RenderMinimap;\n(function (RenderMinimap) {\n    RenderMinimap[RenderMinimap["None"] = 0] = "None";\n    RenderMinimap[RenderMinimap["Text"] = 1] = "Text";\n    RenderMinimap[RenderMinimap["Blocks"] = 2] = "Blocks";\n})(RenderMinimap || (RenderMinimap = {}));\nvar ScrollType;\n(function (ScrollType) {\n    ScrollType[ScrollType["Smooth"] = 0] = "Smooth";\n    ScrollType[ScrollType["Immediate"] = 1] = "Immediate";\n})(ScrollType || (ScrollType = {}));\nvar ScrollbarVisibility;\n(function (ScrollbarVisibility) {\n    ScrollbarVisibility[ScrollbarVisibility["Auto"] = 1] = "Auto";\n    ScrollbarVisibility[ScrollbarVisibility["Hidden"] = 2] = "Hidden";\n    ScrollbarVisibility[ScrollbarVisibility["Visible"] = 3] = "Visible";\n})(ScrollbarVisibility || (ScrollbarVisibility = {}));\n/**\n * The direction of a selection.\n */\nvar SelectionDirection;\n(function (SelectionDirection) {\n    /**\n     * The selection starts above where it ends.\n     */\n    SelectionDirection[SelectionDirection["LTR"] = 0] = "LTR";\n    /**\n     * The selection starts below where it ends.\n     */\n    SelectionDirection[SelectionDirection["RTL"] = 1] = "RTL";\n})(SelectionDirection || (SelectionDirection = {}));\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"] = 1] = "Invoke";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"] = 3] = "ContentChange";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A symbol kind.\n */\nvar SymbolKind;\n(function (SymbolKind) {\n    SymbolKind[SymbolKind["File"] = 0] = "File";\n    SymbolKind[SymbolKind["Module"] = 1] = "Module";\n    SymbolKind[SymbolKind["Namespace"] = 2] = "Namespace";\n    SymbolKind[SymbolKind["Package"] = 3] = "Package";\n    SymbolKind[SymbolKind["Class"] = 4] = "Class";\n    SymbolKind[SymbolKind["Method"] = 5] = "Method";\n    SymbolKind[SymbolKind["Property"] = 6] = "Property";\n    SymbolKind[SymbolKind["Field"] = 7] = "Field";\n    SymbolKind[SymbolKind["Constructor"] = 8] = "Constructor";\n    SymbolKind[SymbolKind["Enum"] = 9] = "Enum";\n    SymbolKind[SymbolKind["Interface"] = 10] = "Interface";\n    SymbolKind[SymbolKind["Function"] = 11] = "Function";\n    SymbolKind[SymbolKind["Variable"] = 12] = "Variable";\n    SymbolKind[SymbolKind["Constant"] = 13] = "Constant";\n    SymbolKind[SymbolKind["String"] = 14] = "String";\n    SymbolKind[SymbolKind["Number"] = 15] = "Number";\n    SymbolKind[SymbolKind["Boolean"] = 16] = "Boolean";\n    SymbolKind[SymbolKind["Array"] = 17] = "Array";\n    SymbolKind[SymbolKind["Object"] = 18] = "Object";\n    SymbolKind[SymbolKind["Key"] = 19] = "Key";\n    SymbolKind[SymbolKind["Null"] = 20] = "Null";\n    SymbolKind[SymbolKind["EnumMember"] = 21] = "EnumMember";\n    SymbolKind[SymbolKind["Struct"] = 22] = "Struct";\n    SymbolKind[SymbolKind["Event"] = 23] = "Event";\n    SymbolKind[SymbolKind["Operator"] = 24] = "Operator";\n    SymbolKind[SymbolKind["TypeParameter"] = 25] = "TypeParameter";\n})(SymbolKind || (SymbolKind = {}));\nvar SymbolTag;\n(function (SymbolTag) {\n    SymbolTag[SymbolTag["Deprecated"] = 1] = "Deprecated";\n})(SymbolTag || (SymbolTag = {}));\n/**\n * The kind of animation in which the editor\'s cursor should be rendered.\n */\nvar TextEditorCursorBlinkingStyle;\n(function (TextEditorCursorBlinkingStyle) {\n    /**\n     * Hidden\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Hidden"] = 0] = "Hidden";\n    /**\n     * Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Blink"] = 1] = "Blink";\n    /**\n     * Blinking with smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Smooth"] = 2] = "Smooth";\n    /**\n     * Blinking with prolonged filled state and smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Phase"] = 3] = "Phase";\n    /**\n     * Expand collapse animation on the y axis\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Expand"] = 4] = "Expand";\n    /**\n     * No-Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Solid"] = 5] = "Solid";\n})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));\n/**\n * The style in which the editor\'s cursor should be rendered.\n */\nvar TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n    /**\n     * As a vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle["Line"] = 1] = "Line";\n    /**\n     * As a block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle["Block"] = 2] = "Block";\n    /**\n     * As a horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle["Underline"] = 3] = "Underline";\n    /**\n     * As a thin vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle["LineThin"] = 4] = "LineThin";\n    /**\n     * As an outlined block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle["BlockOutline"] = 5] = "BlockOutline";\n    /**\n     * As a thin horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle["UnderlineThin"] = 6] = "UnderlineThin";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nvar TrackedRangeStickiness;\n(function (TrackedRangeStickiness) {\n    TrackedRangeStickiness[TrackedRangeStickiness["AlwaysGrowsWhenTypingAtEdges"] = 0] = "AlwaysGrowsWhenTypingAtEdges";\n    TrackedRangeStickiness[TrackedRangeStickiness["NeverGrowsWhenTypingAtEdges"] = 1] = "NeverGrowsWhenTypingAtEdges";\n    TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingBefore"] = 2] = "GrowsOnlyWhenTypingBefore";\n    TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingAfter"] = 3] = "GrowsOnlyWhenTypingAfter";\n})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));\n/**\n * Describes how to indent wrapped lines.\n */\nvar WrappingIndent;\n(function (WrappingIndent) {\n    /**\n     * No indentation => wrapped lines begin at column 1.\n     */\n    WrappingIndent[WrappingIndent["None"] = 0] = "None";\n    /**\n     * Same => wrapped lines get the same indentation as the parent.\n     */\n    WrappingIndent[WrappingIndent["Same"] = 1] = "Same";\n    /**\n     * Indent => wrapped lines get +1 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent["Indent"] = 2] = "Indent";\n    /**\n     * DeepIndent => wrapped lines get +2 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent["DeepIndent"] = 3] = "DeepIndent";\n})(WrappingIndent || (WrappingIndent = {}));\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneBase.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\nclass KeyMod {\n    static chord(firstPart, secondPart) {\n        return KeyChord(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* CtrlCmd */;\nKeyMod.Shift = 1024 /* Shift */;\nKeyMod.Alt = 512 /* Alt */;\nKeyMod.WinCtrl = 256 /* WinCtrl */;\nfunction createMonacoBaseAPI() {\n    return {\n        editor: undefined,\n        languages: undefined,\n        CancellationTokenSource: CancellationTokenSource,\n        Emitter: Emitter,\n        KeyCode: KeyCode,\n        KeyMod: KeyMod,\n        Position: position_Position,\n        Range: Range,\n        Selection: Selection,\n        SelectionDirection: SelectionDirection,\n        MarkerSeverity: MarkerSeverity,\n        MarkerTag: MarkerTag,\n        Uri: URI,\n        Token: Token\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @internal\n */\nclass MirrorModel extends MirrorTextModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        let wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = \'\';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        let content = this._lines[lineNumber - 1];\n        let ranges = this._wordenize(content, wordDefinition);\n        let words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        let lineEnding = this._eol;\n        let startLineIndex = range.startLineNumber - 1;\n        let endLineIndex = range.endLineNumber - 1;\n        let resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getAccumulatedValue(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        let out = this._lineStarts.getIndexOf(offset);\n        let lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!position_Position.isIPosition(position)) {\n            throw new Error(\'bad position\');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            let maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nclass EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        let all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        let model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    computeDiff(originalUrl, modifiedUrl, ignoreTrimWhitespace, maxComputationTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const original = this._getModel(originalUrl);\n            const modified = this._getModel(modifiedUrl);\n            if (!original || !modified) {\n                return null;\n            }\n            const originalLines = original.getLinesContent();\n            const modifiedLines = modified.getLinesContent();\n            const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n                shouldComputeCharChanges: true,\n                shouldPostProcessCharChanges: true,\n                shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n                shouldMakePrettyDiff: true,\n                maxComputationTime: maxComputationTime\n            });\n            const diffResult = diffComputer.computeDiff();\n            const identical = (diffResult.changes.length > 0 ? false : this._modelsAreIdentical(original, modified));\n            return {\n                quitEarly: diffResult.quitEarly,\n                identical: identical,\n                changes: diffResult.changes\n            };\n        });\n    }\n    _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    computeMoreMinimalEdits(modelUrl, edits) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return edits;\n            }\n            const result = [];\n            let lastEol = undefined;\n            edits = edits.slice(0).sort((a, b) => {\n                if (a.range && b.range) {\n                    return Range.compareRangesUsingStarts(a.range, b.range);\n                }\n                // eol only changes should go to the end\n                let aRng = a.range ? 0 : 1;\n                let bRng = b.range ? 0 : 1;\n                return aRng - bRng;\n            });\n            for (let { range, text, eol } of edits) {\n                if (typeof eol === \'number\') {\n                    lastEol = eol;\n                }\n                if (Range.isEmpty(range) && !text) {\n                    // empty change\n                    continue;\n                }\n                const original = model.getValueInRange(range);\n                text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n                if (original === text) {\n                    // noop\n                    continue;\n                }\n                // make sure diff won\'t take too long\n                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                    result.push({ range, text });\n                    continue;\n                }\n                // compute diff between original and edit.text\n                const changes = stringDiff(original, text, false);\n                const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n                for (const change of changes) {\n                    const start = model.positionAt(editOffset + change.originalStart);\n                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                    const newEdit = {\n                        text: text.substr(change.modifiedStart, change.modifiedLength),\n                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                    };\n                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                        result.push(newEdit);\n                    }\n                }\n            }\n            if (typeof lastEol === \'number\') {\n                result.push({ eol: lastEol, text: \'\', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n            }\n            return result;\n        });\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    computeLinks(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeLinks(model);\n        });\n    }\n    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sw = new StopWatch(true);\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const seen = new Set();\n            outer: for (let url of modelUrls) {\n                const model = this._getModel(url);\n                if (!model) {\n                    continue;\n                }\n                for (let word of model.words(wordDefRegExp)) {\n                    if (word === leadingWord || !isNaN(Number(word))) {\n                        continue;\n                    }\n                    seen.add(word);\n                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                        break outer;\n                    }\n                }\n            }\n            return { words: Array.from(seen), duration: sw.elapsed() };\n        });\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let model = this._getModel(modelUrl);\n            if (!model) {\n                return Object.create(null);\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const result = Object.create(null);\n            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n                let words = model.getLineWords(line, wordDefRegExp);\n                for (const word of words) {\n                    if (!isNaN(Number(word.word))) {\n                        continue;\n                    }\n                    let array = result[word.word];\n                    if (!array) {\n                        array = [];\n                        result[word.word] = array;\n                    }\n                    array.push({\n                        startLineNumber: line,\n                        startColumn: word.startColumn,\n                        endLineNumber: line,\n                        endColumn: word.endColumn\n                    });\n                }\n            }\n            return result;\n        });\n    }\n    //#endregion\n    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            let wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            if (range.startColumn === range.endColumn) {\n                range = {\n                    startLineNumber: range.startLineNumber,\n                    startColumn: range.startColumn,\n                    endLineNumber: range.endLineNumber,\n                    endColumn: range.endColumn + 1\n                };\n            }\n            let selectionText = model.getValueInRange(range);\n            let wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n            if (!wordRange) {\n                return null;\n            }\n            let word = model.getValueInRange(wordRange);\n            let result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n            return result;\n        });\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n        let ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(types.getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== \'function\') {\n            return Promise.reject(new Error(\'Missing requestHandler or method: \' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nfunction editorSimpleWorker_create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === \'function\') {\n    // Running in a web worker\n    globals.monaco = createMonacoBaseAPI();\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nlet initialized = false;\nfunction initialize(foreignModule) {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    const simpleWorker = new SimpleWorkerServer((msg) => {\n        self.postMessage(msg);\n    }, (host) => new EditorSimpleWorker(host, foreignModule));\n    self.onmessage = (e) => {\n        simpleWorker.onmessage(e.data);\n    };\n}\nself.onmessage = (e) => {\n    // Ignore first message in this case and initialize if not yet initialized\n    if (!initialized) {\n        initialize(null);\n    }\n};\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/fillers/vscode-nls.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction vscode_nls_format(message, args) {\n    var result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n            var index = rest[0];\n            return typeof args[index] !== \'undefined\' ? args[index] : match;\n        });\n    }\n    return result;\n}\nfunction localize(key, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return vscode_nls_format(message, args);\n}\nfunction loadMessageBundle(file) {\n    return localize;\n}\nfunction config(opt) {\n    return loadMessageBundle;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-types/main.js\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nvar integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n})(integer || (integer = {}));\nvar uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nvar main_Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position\'s line.\n     * @param character The position\'s character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(main_Position || (main_Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nvar main_Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: main_Position.create(one, two), end: main_Position.create(three, four) };\n        }\n        else if (main_Position.is(one) && main_Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error("Range#create called with invalid arguments[" + one + ", " + two + ", " + three + ", " + four + "]");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && main_Position.is(candidate.start) && main_Position.is(candidate.end);\n    }\n    Range.is = is;\n})(main_Range || (main_Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nvar Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location\'s uri.\n     * @param range The location\'s range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && main_Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * [LocationLink](#LocationLink) literals.\n */\nvar LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition\'s uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [LocationLink](#LocationLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && main_Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && (main_Range.is(candidate.targetSelectionRange) || Is.undefined(candidate.targetSelectionRange))\n            && (main_Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [Color](#Color) literals.\n */\nvar Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * [ColorInformation](#ColorInformation) literals.\n */\nvar ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range: range,\n            color: color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return main_Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [ColorPresentation](#ColorPresentation) literals.\n */\nvar ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label: label,\n            textEdit: textEdit,\n            additionalTextEdits: additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * Enum of known range kinds\n */\nvar FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind["Comment"] = "comment";\n    /**\n     * Folding range for a imports or includes\n     */\n    FoldingRangeKind["Imports"] = "imports";\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind["Region"] = "region";\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * [FoldingRange](#FoldingRange) literals.\n */\nvar FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\n        var result = {\n            startLine: startLine,\n            endLine: endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\n */\nvar DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location: location,\n            message: message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic\'s severity.\n */\nvar DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nvar DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nvar CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        var candidate = value;\n        return candidate !== undefined && candidate !== null && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nvar Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var _a;\n        var candidate = value;\n        return Is.defined(candidate)\n            && main_Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nvar Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nvar TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: \'\' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && main_Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nvar ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        var result = { label: label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate !== undefined && Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nvar ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        var candidate = value;\n        return typeof candidate === \'string\';\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nvar AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range: range, newText: newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText: newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range: range, newText: \'\', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        var candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nvar TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        var result = {\n            kind: \'create\',\n            uri: uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && candidate.kind === \'create\' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nvar RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        var result = {\n            kind: \'rename\',\n            oldUri: oldUri,\n            newUri: newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && candidate.kind === \'rename\' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nvar DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        var result = {\n            kind: \'delete\',\n            uri: uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && candidate.kind === \'delete\' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nvar WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {\n        var edit;\n        var id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {\n        var edit;\n        var id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    };\n    TextEditChangeImpl.prototype.delete = function (range, annotation) {\n        var edit;\n        var id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {\n        if (value === undefined) {\n            throw new Error("Text edit change is not configured to manage change annotations.");\n        }\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A helper class\n */\nvar ChangeAnnotations = /** @class */ (function () {\n    function ChangeAnnotations(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    ChangeAnnotations.prototype.all = function () {\n        return this._annotations;\n    };\n    Object.defineProperty(ChangeAnnotations.prototype, "size", {\n        get: function () {\n            return this._size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {\n        var id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error("Id " + id + " is already in use.");\n        }\n        if (annotation === undefined) {\n            throw new Error("No annotation provided for id " + id);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    };\n    ChangeAnnotations.prototype.nextId = function () {\n        this._counter++;\n        return this._counter.toString();\n    };\n    return ChangeAnnotations;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach(function (change) {\n                    if (TextDocumentEdit.is(change)) {\n                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);\n                        _this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, "edit", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            this.initDocumentChanges();\n            if (this._changeAnnotations !== undefined) {\n                if (this._changeAnnotations.size === 0) {\n                    this._workspaceEdit.changeAnnotations = undefined;\n                }\n                else {\n                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                }\n            }\n            return this._workspaceEdit;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error(\'Workspace edit is not configured for document changes.\');\n            }\n            var textDocument = { uri: key.uri, version: key.version };\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error(\'Workspace edit is not configured for normal text edit changes.\');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    WorkspaceChange.prototype.initDocumentChanges = function () {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    };\n    WorkspaceChange.prototype.initChanges = function () {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    };\n    WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error(\'Workspace edit is not configured for document changes.\');\n        }\n        var annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        var operation;\n        var id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    };\n    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error(\'Workspace edit is not configured for document changes.\');\n        }\n        var annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        var operation;\n        var id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    };\n    WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error(\'Workspace edit is not configured for document changes.\');\n        }\n        var annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        var operation;\n        var id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    };\n    return WorkspaceChange;\n}());\n\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nvar TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document\'s uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nvar VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document\'s uri.\n     * @param uri The document\'s text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) literals.\n */\nvar OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document\'s uri.\n     * @param uri The document\'s text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nvar TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document\'s uri.\n     * @param languageId The document\'s language identifier.\n     * @param version The document\'s version number.\n     * @param text The document\'s text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nvar MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = \'plaintext\';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = \'markdown\';\n})(MarkupKind || (MarkupKind = {}));\n(function (MarkupKind) {\n    /**\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nvar MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nvar main_CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(main_CompletionItemKind || (main_CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nvar InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nvar main_CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(main_CompletionItemTag || (main_CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nvar InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText: newText, insert: insert, replace: replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the [InsertReplaceEdit](#InsertReplaceEdit) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate && Is.string(candidate.newText) && main_Range.is(candidate.insert) && main_Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nvar InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nvar CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item\'s label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nvar CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nvar MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \'\\\\$&\'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nvar Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || main_Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nvar ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nvar SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nvar main_DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(main_DocumentHighlightKind || (main_DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nvar DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nvar main_SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(main_SymbolKind || (main_SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n * @since 3.16\n */\nvar main_SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(main_SymbolTag || (main_SymbolTag = {}));\nvar SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nvar DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        var result = {\n            name: name,\n            detail: detail,\n            kind: kind,\n            range: range,\n            selectionRange: selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            main_Range.is(candidate.range) && main_Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nvar CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = \'\';\n    /**\n     * Base kind for quickfix actions: \'quickfix\'\n     */\n    CodeActionKind.QuickFix = \'quickfix\';\n    /**\n     * Base kind for refactoring actions: \'refactor\'\n     */\n    CodeActionKind.Refactor = \'refactor\';\n    /**\n     * Base kind for refactoring extraction actions: \'refactor.extract\'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = \'refactor.extract\';\n    /**\n     * Base kind for refactoring inline actions: \'refactor.inline\'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = \'refactor.inline\';\n    /**\n     * Base kind for refactoring rewrite actions: \'refactor.rewrite\'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = \'refactor.rewrite\';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = \'source\';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = \'source.organizeImports\';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = \'source.fixAll\';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nvar CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only) {\n        var result = { diagnostics: diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string));\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nvar CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        var result = { title: title };\n        var checkKind = true;\n        if (typeof kindOrCommandOrEdit === \'string\') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nvar CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && main_Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nvar FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\nvar DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range: range, target: target, data: data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && main_Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nvar SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range: range, parent: parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate !== undefined && main_Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\nvar EOL = (/* unused pure expression or super */ null && ([\'\\n\', \'\\r\\n\', \'\\r\']));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nvar TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document\'s uri.\n     * @param languageId  The document\'s language Id.\n     * @param content The document\'s content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error(\'Overlapping edit\');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    Object.defineProperty(FullTextDocument.prototype, "uri", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, "languageId", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, "version", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === undefined) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === \'\\r\' || ch === \'\\n\');\n                if (ch === \'\\r\' && i + 1 < text.length && text.charAt(i + 1) === \'\\n\') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return main_Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return main_Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, "lineCount", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== \'undefined\';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === \'undefined\';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === \'[object String]\';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === \'[object Number]\';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === \'[object Number]\' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === \'[object Number]\' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === \'[object Number]\' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === \'[object Function]\';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn\'t use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === \'object\';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-languageserver-textdocument/lib/esm/main.js\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nvar main_FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    Object.defineProperty(FullTextDocument.prototype, "uri", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, "languageId", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, "version", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (changes, version) {\n        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n            var change = changes_1[_i];\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                var range = getWellformedRange(change.range);\n                // update content\n                var startOffset = this.offsetAt(range.start);\n                var endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                var startLine = Math.max(range.start.line, 0);\n                var endLine = Math.max(range.end.line, 0);\n                var lineOffsets = this._lineOffsets;\n                var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (var i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice.apply(lineOffsets, [startLine + 1, endLine - startLine].concat(addedLineOffsets));\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                var diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error(\'Unknown change event received\');\n            }\n        }\n        this._version = version;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return { line: line, character: offset - lineOffsets[line] };\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, "lineCount", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.isIncremental = function (event) {\n        var candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === \'string\' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === \'number\');\n    };\n    FullTextDocument.isFull = function (event) {\n        var candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === \'string\' && candidate.range === undefined && candidate.rangeLength === undefined;\n    };\n    return FullTextDocument;\n}());\nvar main_TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document\'s uri.\n     * @param languageId  The document\'s language Id.\n     * @param version The document\'s initial version number.\n     * @param content The document\'s content.\n     */\n    function create(uri, languageId, version, content) {\n        return new main_FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifing its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @returns The updated TextDocument. Note: That\'s the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof main_FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error(\'TextDocument.update: document must be created by TextDocument.create\');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits.map(getWellformedEdit), function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        var lastModifiedOffset = 0;\n        var spans = [];\n        for (var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++) {\n            var e = sortedEdits_1[_i];\n            var startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error(\'Overlapping edit\');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join(\'\');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(main_TextDocument || (main_TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    var p = (data.length / 2) | 0;\n    var left = data.slice(0, p);\n    var right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    var leftIdx = 0;\n    var rightIdx = 0;\n    var i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        var ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset) {\n    if (textOffset === void 0) { textOffset = 0; }\n    var result = isAtLineStart ? [textOffset] : [];\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charCodeAt(i);\n        if (ch === 13 /* CarriageReturn */ || ch === 10 /* LineFeed */) {\n            if (ch === 13 /* CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction getWellformedRange(range) {\n    var start = range.start;\n    var end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    var range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range: range };\n    }\n    return textEdit;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/htmlLanguageTypes.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType["StartCommentTag"] = 0] = "StartCommentTag";\n    TokenType[TokenType["Comment"] = 1] = "Comment";\n    TokenType[TokenType["EndCommentTag"] = 2] = "EndCommentTag";\n    TokenType[TokenType["StartTagOpen"] = 3] = "StartTagOpen";\n    TokenType[TokenType["StartTagClose"] = 4] = "StartTagClose";\n    TokenType[TokenType["StartTagSelfClose"] = 5] = "StartTagSelfClose";\n    TokenType[TokenType["StartTag"] = 6] = "StartTag";\n    TokenType[TokenType["EndTagOpen"] = 7] = "EndTagOpen";\n    TokenType[TokenType["EndTagClose"] = 8] = "EndTagClose";\n    TokenType[TokenType["EndTag"] = 9] = "EndTag";\n    TokenType[TokenType["DelimiterAssign"] = 10] = "DelimiterAssign";\n    TokenType[TokenType["AttributeName"] = 11] = "AttributeName";\n    TokenType[TokenType["AttributeValue"] = 12] = "AttributeValue";\n    TokenType[TokenType["StartDoctypeTag"] = 13] = "StartDoctypeTag";\n    TokenType[TokenType["Doctype"] = 14] = "Doctype";\n    TokenType[TokenType["EndDoctypeTag"] = 15] = "EndDoctypeTag";\n    TokenType[TokenType["Content"] = 16] = "Content";\n    TokenType[TokenType["Whitespace"] = 17] = "Whitespace";\n    TokenType[TokenType["Unknown"] = 18] = "Unknown";\n    TokenType[TokenType["Script"] = 19] = "Script";\n    TokenType[TokenType["Styles"] = 20] = "Styles";\n    TokenType[TokenType["EOS"] = 21] = "EOS";\n})(TokenType || (TokenType = {}));\nvar ScannerState;\n(function (ScannerState) {\n    ScannerState[ScannerState["WithinContent"] = 0] = "WithinContent";\n    ScannerState[ScannerState["AfterOpeningStartTag"] = 1] = "AfterOpeningStartTag";\n    ScannerState[ScannerState["AfterOpeningEndTag"] = 2] = "AfterOpeningEndTag";\n    ScannerState[ScannerState["WithinDoctype"] = 3] = "WithinDoctype";\n    ScannerState[ScannerState["WithinTag"] = 4] = "WithinTag";\n    ScannerState[ScannerState["WithinEndTag"] = 5] = "WithinEndTag";\n    ScannerState[ScannerState["WithinComment"] = 6] = "WithinComment";\n    ScannerState[ScannerState["WithinScriptContent"] = 7] = "WithinScriptContent";\n    ScannerState[ScannerState["WithinStyleContent"] = 8] = "WithinStyleContent";\n    ScannerState[ScannerState["AfterAttributeName"] = 9] = "AfterAttributeName";\n    ScannerState[ScannerState["BeforeAttributeValue"] = 10] = "BeforeAttributeValue";\n})(ScannerState || (ScannerState = {}));\nvar ClientCapabilities;\n(function (ClientCapabilities) {\n    ClientCapabilities.LATEST = {\n        textDocument: {\n            completion: {\n                completionItem: {\n                    documentationFormat: [MarkupKind.Markdown, MarkupKind.PlainText]\n                }\n            },\n            hover: {\n                contentFormat: [MarkupKind.Markdown, MarkupKind.PlainText]\n            }\n        }\n    };\n})(ClientCapabilities || (ClientCapabilities = {}));\nvar FileType;\n(function (FileType) {\n    /**\n     * The file type is unknown.\n     */\n    FileType[FileType["Unknown"] = 0] = "Unknown";\n    /**\n     * A regular file.\n     */\n    FileType[FileType["File"] = 1] = "File";\n    /**\n     * A directory.\n     */\n    FileType[FileType["Directory"] = 2] = "Directory";\n    /**\n     * A symbolic link to a file.\n     */\n    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";\n})(FileType || (FileType = {}));\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlScanner.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nvar htmlScanner_localize = loadMessageBundle();\nvar MultiLineStream = /** @class */ (function () {\n    function MultiLineStream(source, position) {\n        this.source = source;\n        this.len = source.length;\n        this.position = position;\n    }\n    MultiLineStream.prototype.eos = function () {\n        return this.len <= this.position;\n    };\n    MultiLineStream.prototype.getSource = function () {\n        return this.source;\n    };\n    MultiLineStream.prototype.pos = function () {\n        return this.position;\n    };\n    MultiLineStream.prototype.goBackTo = function (pos) {\n        this.position = pos;\n    };\n    MultiLineStream.prototype.goBack = function (n) {\n        this.position -= n;\n    };\n    MultiLineStream.prototype.advance = function (n) {\n        this.position += n;\n    };\n    MultiLineStream.prototype.goToEnd = function () {\n        this.position = this.source.length;\n    };\n    MultiLineStream.prototype.nextChar = function () {\n        return this.source.charCodeAt(this.position++) || 0;\n    };\n    MultiLineStream.prototype.peekChar = function (n) {\n        if (n === void 0) { n = 0; }\n        return this.source.charCodeAt(this.position + n) || 0;\n    };\n    MultiLineStream.prototype.advanceIfChar = function (ch) {\n        if (ch === this.source.charCodeAt(this.position)) {\n            this.position++;\n            return true;\n        }\n        return false;\n    };\n    MultiLineStream.prototype.advanceIfChars = function (ch) {\n        var i;\n        if (this.position + ch.length > this.source.length) {\n            return false;\n        }\n        for (i = 0; i < ch.length; i++) {\n            if (this.source.charCodeAt(this.position + i) !== ch[i]) {\n                return false;\n            }\n        }\n        this.advance(i);\n        return true;\n    };\n    MultiLineStream.prototype.advanceIfRegExp = function (regex) {\n        var str = this.source.substr(this.position);\n        var match = str.match(regex);\n        if (match) {\n            this.position = this.position + match.index + match[0].length;\n            return match[0];\n        }\n        return \'\';\n    };\n    MultiLineStream.prototype.advanceUntilRegExp = function (regex) {\n        var str = this.source.substr(this.position);\n        var match = str.match(regex);\n        if (match) {\n            this.position = this.position + match.index;\n            return match[0];\n        }\n        else {\n            this.goToEnd();\n        }\n        return \'\';\n    };\n    MultiLineStream.prototype.advanceUntilChar = function (ch) {\n        while (this.position < this.source.length) {\n            if (this.source.charCodeAt(this.position) === ch) {\n                return true;\n            }\n            this.advance(1);\n        }\n        return false;\n    };\n    MultiLineStream.prototype.advanceUntilChars = function (ch) {\n        while (this.position + ch.length <= this.source.length) {\n            var i = 0;\n            for (; i < ch.length && this.source.charCodeAt(this.position + i) === ch[i]; i++) {\n            }\n            if (i === ch.length) {\n                return true;\n            }\n            this.advance(1);\n        }\n        this.goToEnd();\n        return false;\n    };\n    MultiLineStream.prototype.skipWhitespace = function () {\n        var n = this.advanceWhileChar(function (ch) {\n            return ch === _WSP || ch === _TAB || ch === _NWL || ch === _LFD || ch === _CAR;\n        });\n        return n > 0;\n    };\n    MultiLineStream.prototype.advanceWhileChar = function (condition) {\n        var posNow = this.position;\n        while (this.position < this.len && condition(this.source.charCodeAt(this.position))) {\n            this.position++;\n        }\n        return this.position - posNow;\n    };\n    return MultiLineStream;\n}());\nvar _BNG = \'!\'.charCodeAt(0);\nvar _MIN = \'-\'.charCodeAt(0);\nvar _LAN = \'<\'.charCodeAt(0);\nvar _RAN = \'>\'.charCodeAt(0);\nvar _FSL = \'/\'.charCodeAt(0);\nvar _EQS = \'=\'.charCodeAt(0);\nvar _DQO = \'"\'.charCodeAt(0);\nvar _SQO = \'\\\'\'.charCodeAt(0);\nvar _NWL = \'\\n\'.charCodeAt(0);\nvar _CAR = \'\\r\'.charCodeAt(0);\nvar _LFD = \'\\f\'.charCodeAt(0);\nvar _WSP = \' \'.charCodeAt(0);\nvar _TAB = \'\\t\'.charCodeAt(0);\nvar htmlScriptContents = {\n    \'text/x-handlebars-template\': true\n};\nfunction createScanner(input, initialOffset, initialState, emitPseudoCloseTags) {\n    if (initialOffset === void 0) { initialOffset = 0; }\n    if (initialState === void 0) { initialState = ScannerState.WithinContent; }\n    if (emitPseudoCloseTags === void 0) { emitPseudoCloseTags = false; }\n    var stream = new MultiLineStream(input, initialOffset);\n    var state = initialState;\n    var tokenOffset = 0;\n    var tokenType = TokenType.Unknown;\n    var tokenError;\n    var hasSpaceAfterTag;\n    var lastTag;\n    var lastAttributeName;\n    var lastTypeValue;\n    function nextElementName() {\n        return stream.advanceIfRegExp(/^[_:\\w][_:\\w-.\\d]*/).toLowerCase();\n    }\n    function nextAttributeName() {\n        return stream.advanceIfRegExp(/^[^\\s"\'></=\\x00-\\x0F\\x7F\\x80-\\x9F]*/).toLowerCase();\n    }\n    function finishToken(offset, type, errorMessage) {\n        tokenType = type;\n        tokenOffset = offset;\n        tokenError = errorMessage;\n        return type;\n    }\n    function scan() {\n        var offset = stream.pos();\n        var oldState = state;\n        var token = internalScan();\n        if (token !== TokenType.EOS && offset === stream.pos() && !(emitPseudoCloseTags && (token === TokenType.StartTagClose || token === TokenType.EndTagClose))) {\n            console.log(\'Scanner.scan has not advanced at offset \' + offset + \', state before: \' + oldState + \' after: \' + state);\n            stream.advance(1);\n            return finishToken(offset, TokenType.Unknown);\n        }\n        return token;\n    }\n    function internalScan() {\n        var offset = stream.pos();\n        if (stream.eos()) {\n            return finishToken(offset, TokenType.EOS);\n        }\n        var errorMessage;\n        switch (state) {\n            case ScannerState.WithinComment:\n                if (stream.advanceIfChars([_MIN, _MIN, _RAN])) { // --\x3e\n                    state = ScannerState.WithinContent;\n                    return finishToken(offset, TokenType.EndCommentTag);\n                }\n                stream.advanceUntilChars([_MIN, _MIN, _RAN]); // --\x3e\n                return finishToken(offset, TokenType.Comment);\n            case ScannerState.WithinDoctype:\n                if (stream.advanceIfChar(_RAN)) {\n                    state = ScannerState.WithinContent;\n                    return finishToken(offset, TokenType.EndDoctypeTag);\n                }\n                stream.advanceUntilChar(_RAN); // >\n                return finishToken(offset, TokenType.Doctype);\n            case ScannerState.WithinContent:\n                if (stream.advanceIfChar(_LAN)) { // <\n                    if (!stream.eos() && stream.peekChar() === _BNG) { // !\n                        if (stream.advanceIfChars([_BNG, _MIN, _MIN])) { // \x3c!--\n                            state = ScannerState.WithinComment;\n                            return finishToken(offset, TokenType.StartCommentTag);\n                        }\n                        if (stream.advanceIfRegExp(/^!doctype/i)) {\n                            state = ScannerState.WithinDoctype;\n                            return finishToken(offset, TokenType.StartDoctypeTag);\n                        }\n                    }\n                    if (stream.advanceIfChar(_FSL)) { // /\n                        state = ScannerState.AfterOpeningEndTag;\n                        return finishToken(offset, TokenType.EndTagOpen);\n                    }\n                    state = ScannerState.AfterOpeningStartTag;\n                    return finishToken(offset, TokenType.StartTagOpen);\n                }\n                stream.advanceUntilChar(_LAN);\n                return finishToken(offset, TokenType.Content);\n            case ScannerState.AfterOpeningEndTag:\n                var tagName = nextElementName();\n                if (tagName.length > 0) {\n                    state = ScannerState.WithinEndTag;\n                    return finishToken(offset, TokenType.EndTag);\n                }\n                if (stream.skipWhitespace()) { // white space is not valid here\n                    return finishToken(offset, TokenType.Whitespace, htmlScanner_localize(\'error.unexpectedWhitespace\', \'Tag name must directly follow the open bracket.\'));\n                }\n                state = ScannerState.WithinEndTag;\n                stream.advanceUntilChar(_RAN);\n                if (offset < stream.pos()) {\n                    return finishToken(offset, TokenType.Unknown, htmlScanner_localize(\'error.endTagNameExpected\', \'End tag name expected.\'));\n                }\n                return internalScan();\n            case ScannerState.WithinEndTag:\n                if (stream.skipWhitespace()) { // white space is valid here\n                    return finishToken(offset, TokenType.Whitespace);\n                }\n                if (stream.advanceIfChar(_RAN)) { // >\n                    state = ScannerState.WithinContent;\n                    return finishToken(offset, TokenType.EndTagClose);\n                }\n                if (emitPseudoCloseTags && stream.peekChar() === _LAN) { // <\n                    state = ScannerState.WithinContent;\n                    return finishToken(offset, TokenType.EndTagClose, htmlScanner_localize(\'error.closingBracketMissing\', \'Closing bracket missing.\'));\n                }\n                errorMessage = htmlScanner_localize(\'error.closingBracketExpected\', \'Closing bracket expected.\');\n                break;\n            case ScannerState.AfterOpeningStartTag:\n                lastTag = nextElementName();\n                lastTypeValue = void 0;\n                lastAttributeName = void 0;\n                if (lastTag.length > 0) {\n                    hasSpaceAfterTag = false;\n                    state = ScannerState.WithinTag;\n                    return finishToken(offset, TokenType.StartTag);\n                }\n                if (stream.skipWhitespace()) { // white space is not valid here\n                    return finishToken(offset, TokenType.Whitespace, htmlScanner_localize(\'error.unexpectedWhitespace\', \'Tag name must directly follow the open bracket.\'));\n                }\n                state = ScannerState.WithinTag;\n                stream.advanceUntilChar(_RAN);\n                if (offset < stream.pos()) {\n                    return finishToken(offset, TokenType.Unknown, htmlScanner_localize(\'error.startTagNameExpected\', \'Start tag name expected.\'));\n                }\n                return internalScan();\n            case ScannerState.WithinTag:\n                if (stream.skipWhitespace()) {\n                    hasSpaceAfterTag = true; // remember that we have seen a whitespace\n                    return finishToken(offset, TokenType.Whitespace);\n                }\n                if (hasSpaceAfterTag) {\n                    lastAttributeName = nextAttributeName();\n                    if (lastAttributeName.length > 0) {\n                        state = ScannerState.AfterAttributeName;\n                        hasSpaceAfterTag = false;\n                        return finishToken(offset, TokenType.AttributeName);\n                    }\n                }\n                if (stream.advanceIfChars([_FSL, _RAN])) { // />\n                    state = ScannerState.WithinContent;\n                    return finishToken(offset, TokenType.StartTagSelfClose);\n                }\n                if (stream.advanceIfChar(_RAN)) { // >\n                    if (lastTag === \'script\') {\n                        if (lastTypeValue && htmlScriptContents[lastTypeValue]) {\n                            // stay in html\n                            state = ScannerState.WithinContent;\n                        }\n                        else {\n                            state = ScannerState.WithinScriptContent;\n                        }\n                    }\n                    else if (lastTag === \'style\') {\n                        state = ScannerState.WithinStyleContent;\n                    }\n                    else {\n                        state = ScannerState.WithinContent;\n                    }\n                    return finishToken(offset, TokenType.StartTagClose);\n                }\n                if (emitPseudoCloseTags && stream.peekChar() === _LAN) { // <\n                    state = ScannerState.WithinContent;\n                    return finishToken(offset, TokenType.StartTagClose, htmlScanner_localize(\'error.closingBracketMissing\', \'Closing bracket missing.\'));\n                }\n                stream.advance(1);\n                return finishToken(offset, TokenType.Unknown, htmlScanner_localize(\'error.unexpectedCharacterInTag\', \'Unexpected character in tag.\'));\n            case ScannerState.AfterAttributeName:\n                if (stream.skipWhitespace()) {\n                    hasSpaceAfterTag = true;\n                    return finishToken(offset, TokenType.Whitespace);\n                }\n                if (stream.advanceIfChar(_EQS)) {\n                    state = ScannerState.BeforeAttributeValue;\n                    return finishToken(offset, TokenType.DelimiterAssign);\n                }\n                state = ScannerState.WithinTag;\n                return internalScan(); // no advance yet - jump to WithinTag\n            case ScannerState.BeforeAttributeValue:\n                if (stream.skipWhitespace()) {\n                    return finishToken(offset, TokenType.Whitespace);\n                }\n                var attributeValue = stream.advanceIfRegExp(/^[^\\s"\'`=<>]+/);\n                if (attributeValue.length > 0) {\n                    if (stream.peekChar() === _RAN && stream.peekChar(-1) === _FSL) { // <foo bar=http://foo/>\n                        stream.goBack(1);\n                        attributeValue = attributeValue.substr(0, attributeValue.length - 1);\n                    }\n                    if (lastAttributeName === \'type\') {\n                        lastTypeValue = attributeValue;\n                    }\n                    state = ScannerState.WithinTag;\n                    hasSpaceAfterTag = false;\n                    return finishToken(offset, TokenType.AttributeValue);\n                }\n                var ch = stream.peekChar();\n                if (ch === _SQO || ch === _DQO) {\n                    stream.advance(1); // consume quote\n                    if (stream.advanceUntilChar(ch)) {\n                        stream.advance(1); // consume quote\n                    }\n                    if (lastAttributeName === \'type\') {\n                        lastTypeValue = stream.getSource().substring(offset + 1, stream.pos() - 1);\n                    }\n                    state = ScannerState.WithinTag;\n                    hasSpaceAfterTag = false;\n                    return finishToken(offset, TokenType.AttributeValue);\n                }\n                state = ScannerState.WithinTag;\n                hasSpaceAfterTag = false;\n                return internalScan(); // no advance yet - jump to WithinTag\n            case ScannerState.WithinScriptContent:\n                // see http://stackoverflow.com/questions/14574471/how-do-browsers-parse-a-script-tag-exactly\n                var sciptState = 1;\n                while (!stream.eos()) {\n                    var match = stream.advanceIfRegExp(/\x3c!--|--\x3e|<\\/?script\\s*\\/?>?/i);\n                    if (match.length === 0) {\n                        stream.goToEnd();\n                        return finishToken(offset, TokenType.Script);\n                    }\n                    else if (match === \'\x3c!--\') {\n                        if (sciptState === 1) {\n                            sciptState = 2;\n                        }\n                    }\n                    else if (match === \'--\x3e\') {\n                        sciptState = 1;\n                    }\n                    else if (match[1] !== \'/\') { // <script\n                        if (sciptState === 2) {\n                            sciptState = 3;\n                        }\n                    }\n                    else { // </script\n                        if (sciptState === 3) {\n                            sciptState = 2;\n                        }\n                        else {\n                            stream.goBack(match.length); // to the beginning of the closing tag\n                            break;\n                        }\n                    }\n                }\n                state = ScannerState.WithinContent;\n                if (offset < stream.pos()) {\n                    return finishToken(offset, TokenType.Script);\n                }\n                return internalScan(); // no advance yet - jump to content\n            case ScannerState.WithinStyleContent:\n                stream.advanceUntilRegExp(/<\\/style/i);\n                state = ScannerState.WithinContent;\n                if (offset < stream.pos()) {\n                    return finishToken(offset, TokenType.Styles);\n                }\n                return internalScan(); // no advance yet - jump to content\n        }\n        stream.advance(1);\n        state = ScannerState.WithinContent;\n        return finishToken(offset, TokenType.Unknown, errorMessage);\n    }\n    return {\n        scan: scan,\n        getTokenType: function () { return tokenType; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return stream.pos() - tokenOffset; },\n        getTokenEnd: function () { return stream.pos(); },\n        getTokenText: function () { return stream.getSource().substring(tokenOffset, stream.pos()); },\n        getScannerState: function () { return state; },\n        getTokenError: function () { return tokenError; }\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/arrays.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false\n * are located before all elements where p(x) is true.\n * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.\n */\nfunction findFirst(array, p) {\n    var low = 0, high = array.length;\n    if (high === 0) {\n        return 0; // no children\n    }\n    while (low < high) {\n        var mid = Math.floor((low + high) / 2);\n        if (p(array[mid])) {\n            high = mid;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\nfunction binarySearch(array, key, comparator) {\n    var low = 0, high = array.length - 1;\n    while (low <= high) {\n        var mid = ((low + high) / 2) | 0;\n        var comp = comparator(array[mid], key);\n        if (comp < 0) {\n            low = mid + 1;\n        }\n        else if (comp > 0) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return -(low + 1);\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/languageFacts/fact.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// As defined in https://www.w3.org/TR/html5/syntax.html#void-elements\nvar VOID_ELEMENTS = [\'area\', \'base\', \'br\', \'col\', \'embed\', \'hr\', \'img\', \'input\', \'keygen\', \'link\', \'menuitem\', \'meta\', \'param\', \'source\', \'track\', \'wbr\'];\nfunction isVoidElement(e) {\n    return !!e && binarySearch(VOID_ELEMENTS, e.toLowerCase(), function (s1, s2) { return s1.localeCompare(s2); }) >= 0;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlParser.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\nvar htmlParser_Node = /** @class */ (function () {\n    function Node(start, end, children, parent) {\n        this.start = start;\n        this.end = end;\n        this.children = children;\n        this.parent = parent;\n        this.closed = false;\n    }\n    Object.defineProperty(Node.prototype, "attributeNames", {\n        get: function () { return this.attributes ? Object.keys(this.attributes) : []; },\n        enumerable: false,\n        configurable: true\n    });\n    Node.prototype.isSameTag = function (tagInLowerCase) {\n        if (this.tag === undefined) {\n            return tagInLowerCase === undefined;\n        }\n        else {\n            return tagInLowerCase !== undefined && this.tag.length === tagInLowerCase.length && this.tag.toLowerCase() === tagInLowerCase;\n        }\n    };\n    Object.defineProperty(Node.prototype, "firstChild", {\n        get: function () { return this.children[0]; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, "lastChild", {\n        get: function () { return this.children.length ? this.children[this.children.length - 1] : void 0; },\n        enumerable: false,\n        configurable: true\n    });\n    Node.prototype.findNodeBefore = function (offset) {\n        var idx = findFirst(this.children, function (c) { return offset <= c.start; }) - 1;\n        if (idx >= 0) {\n            var child = this.children[idx];\n            if (offset > child.start) {\n                if (offset < child.end) {\n                    return child.findNodeBefore(offset);\n                }\n                var lastChild = child.lastChild;\n                if (lastChild && lastChild.end === child.end) {\n                    return child.findNodeBefore(offset);\n                }\n                return child;\n            }\n        }\n        return this;\n    };\n    Node.prototype.findNodeAt = function (offset) {\n        var idx = findFirst(this.children, function (c) { return offset <= c.start; }) - 1;\n        if (idx >= 0) {\n            var child = this.children[idx];\n            if (offset > child.start && offset <= child.end) {\n                return child.findNodeAt(offset);\n            }\n        }\n        return this;\n    };\n    return Node;\n}());\n\nfunction parse(text) {\n    var scanner = createScanner(text, undefined, undefined, true);\n    var htmlDocument = new htmlParser_Node(0, text.length, [], void 0);\n    var curr = htmlDocument;\n    var endTagStart = -1;\n    var endTagName = undefined;\n    var pendingAttribute = null;\n    var token = scanner.scan();\n    while (token !== TokenType.EOS) {\n        switch (token) {\n            case TokenType.StartTagOpen:\n                var child = new htmlParser_Node(scanner.getTokenOffset(), text.length, [], curr);\n                curr.children.push(child);\n                curr = child;\n                break;\n            case TokenType.StartTag:\n                curr.tag = scanner.getTokenText();\n                break;\n            case TokenType.StartTagClose:\n                if (curr.parent) {\n                    curr.end = scanner.getTokenEnd(); // might be later set to end tag position\n                    if (scanner.getTokenLength()) {\n                        curr.startTagEnd = scanner.getTokenEnd();\n                        if (curr.tag && isVoidElement(curr.tag)) {\n                            curr.closed = true;\n                            curr = curr.parent;\n                        }\n                    }\n                    else {\n                        // pseudo close token from an incomplete start tag\n                        curr = curr.parent;\n                    }\n                }\n                break;\n            case TokenType.StartTagSelfClose:\n                if (curr.parent) {\n                    curr.closed = true;\n                    curr.end = scanner.getTokenEnd();\n                    curr.startTagEnd = scanner.getTokenEnd();\n                    curr = curr.parent;\n                }\n                break;\n            case TokenType.EndTagOpen:\n                endTagStart = scanner.getTokenOffset();\n                endTagName = undefined;\n                break;\n            case TokenType.EndTag:\n                endTagName = scanner.getTokenText().toLowerCase();\n                break;\n            case TokenType.EndTagClose:\n                var node = curr;\n                // see if we can find a matching tag\n                while (!node.isSameTag(endTagName) && node.parent) {\n                    node = node.parent;\n                }\n                if (node.parent) {\n                    while (curr !== node) {\n                        curr.end = endTagStart;\n                        curr.closed = false;\n                        curr = curr.parent;\n                    }\n                    curr.closed = true;\n                    curr.endTagStart = endTagStart;\n                    curr.end = scanner.getTokenEnd();\n                    curr = curr.parent;\n                }\n                break;\n            case TokenType.AttributeName: {\n                pendingAttribute = scanner.getTokenText();\n                var attributes = curr.attributes;\n                if (!attributes) {\n                    curr.attributes = attributes = {};\n                }\n                attributes[pendingAttribute] = null; // Support valueless attributes such as \'checked\'\n                break;\n            }\n            case TokenType.AttributeValue: {\n                var value = scanner.getTokenText();\n                var attributes = curr.attributes;\n                if (attributes && pendingAttribute) {\n                    attributes[pendingAttribute] = value;\n                    pendingAttribute = null;\n                }\n                break;\n            }\n        }\n        token = scanner.scan();\n    }\n    while (curr.parent) {\n        curr.end = text.length;\n        curr.closed = false;\n        curr = curr.parent;\n    }\n    return {\n        roots: htmlDocument.children,\n        findNodeBefore: htmlDocument.findNodeBefore.bind(htmlDocument),\n        findNodeAt: htmlDocument.findNodeAt.bind(htmlDocument)\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/parser/htmlEntities.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * HTML 5 character entities\n * https://www.w3.org/TR/html5/syntax.html#named-character-references\n */\nvar entities = {\n    "Aacute;": "\\u00C1",\n    "Aacute": "\\u00C1",\n    "aacute;": "\\u00E1",\n    "aacute": "\\u00E1",\n    "Abreve;": "\\u0102",\n    "abreve;": "\\u0103",\n    "ac;": "\\u223E",\n    "acd;": "\\u223F",\n    "acE;": "\\u223E\\u0333",\n    "Acirc;": "\\u00C2",\n    "Acirc": "\\u00C2",\n    "acirc;": "\\u00E2",\n    "acirc": "\\u00E2",\n    "acute;": "\\u00B4",\n    "acute": "\\u00B4",\n    "Acy;": "\\u0410",\n    "acy;": "\\u0430",\n    "AElig;": "\\u00C6",\n    "AElig": "\\u00C6",\n    "aelig;": "\\u00E6",\n    "aelig": "\\u00E6",\n    "af;": "\\u2061",\n    "Afr;": "\\uD835\\uDD04",\n    "afr;": "\\uD835\\uDD1E",\n    "Agrave;": "\\u00C0",\n    "Agrave": "\\u00C0",\n    "agrave;": "\\u00E0",\n    "agrave": "\\u00E0",\n    "alefsym;": "\\u2135",\n    "aleph;": "\\u2135",\n    "Alpha;": "\\u0391",\n    "alpha;": "\\u03B1",\n    "Amacr;": "\\u0100",\n    "amacr;": "\\u0101",\n    "amalg;": "\\u2A3F",\n    "AMP;": "\\u0026",\n    "AMP": "\\u0026",\n    "amp;": "\\u0026",\n    "amp": "\\u0026",\n    "And;": "\\u2A53",\n    "and;": "\\u2227",\n    "andand;": "\\u2A55",\n    "andd;": "\\u2A5C",\n    "andslope;": "\\u2A58",\n    "andv;": "\\u2A5A",\n    "ang;": "\\u2220",\n    "ange;": "\\u29A4",\n    "angle;": "\\u2220",\n    "angmsd;": "\\u2221",\n    "angmsdaa;": "\\u29A8",\n    "angmsdab;": "\\u29A9",\n    "angmsdac;": "\\u29AA",\n    "angmsdad;": "\\u29AB",\n    "angmsdae;": "\\u29AC",\n    "angmsdaf;": "\\u29AD",\n    "angmsdag;": "\\u29AE",\n    "angmsdah;": "\\u29AF",\n    "angrt;": "\\u221F",\n    "angrtvb;": "\\u22BE",\n    "angrtvbd;": "\\u299D",\n    "angsph;": "\\u2222",\n    "angst;": "\\u00C5",\n    "angzarr;": "\\u237C",\n    "Aogon;": "\\u0104",\n    "aogon;": "\\u0105",\n    "Aopf;": "\\uD835\\uDD38",\n    "aopf;": "\\uD835\\uDD52",\n    "ap;": "\\u2248",\n    "apacir;": "\\u2A6F",\n    "apE;": "\\u2A70",\n    "ape;": "\\u224A",\n    "apid;": "\\u224B",\n    "apos;": "\\u0027",\n    "ApplyFunction;": "\\u2061",\n    "approx;": "\\u2248",\n    "approxeq;": "\\u224A",\n    "Aring;": "\\u00C5",\n    "Aring": "\\u00C5",\n    "aring;": "\\u00E5",\n    "aring": "\\u00E5",\n    "Ascr;": "\\uD835\\uDC9C",\n    "ascr;": "\\uD835\\uDCB6",\n    "Assign;": "\\u2254",\n    "ast;": "\\u002A",\n    "asymp;": "\\u2248",\n    "asympeq;": "\\u224D",\n    "Atilde;": "\\u00C3",\n    "Atilde": "\\u00C3",\n    "atilde;": "\\u00E3",\n    "atilde": "\\u00E3",\n    "Auml;": "\\u00C4",\n    "Auml": "\\u00C4",\n    "auml;": "\\u00E4",\n    "auml": "\\u00E4",\n    "awconint;": "\\u2233",\n    "awint;": "\\u2A11",\n    "backcong;": "\\u224C",\n    "backepsilon;": "\\u03F6",\n    "backprime;": "\\u2035",\n    "backsim;": "\\u223D",\n    "backsimeq;": "\\u22CD",\n    "Backslash;": "\\u2216",\n    "Barv;": "\\u2AE7",\n    "barvee;": "\\u22BD",\n    "Barwed;": "\\u2306",\n    "barwed;": "\\u2305",\n    "barwedge;": "\\u2305",\n    "bbrk;": "\\u23B5",\n    "bbrktbrk;": "\\u23B6",\n    "bcong;": "\\u224C",\n    "Bcy;": "\\u0411",\n    "bcy;": "\\u0431",\n    "bdquo;": "\\u201E",\n    "becaus;": "\\u2235",\n    "Because;": "\\u2235",\n    "because;": "\\u2235",\n    "bemptyv;": "\\u29B0",\n    "bepsi;": "\\u03F6",\n    "bernou;": "\\u212C",\n    "Bernoullis;": "\\u212C",\n    "Beta;": "\\u0392",\n    "beta;": "\\u03B2",\n    "beth;": "\\u2136",\n    "between;": "\\u226C",\n    "Bfr;": "\\uD835\\uDD05",\n    "bfr;": "\\uD835\\uDD1F",\n    "bigcap;": "\\u22C2",\n    "bigcirc;": "\\u25EF",\n    "bigcup;": "\\u22C3",\n    "bigodot;": "\\u2A00",\n    "bigoplus;": "\\u2A01",\n    "bigotimes;": "\\u2A02",\n    "bigsqcup;": "\\u2A06",\n    "bigstar;": "\\u2605",\n    "bigtriangledown;": "\\u25BD",\n    "bigtriangleup;": "\\u25B3",\n    "biguplus;": "\\u2A04",\n    "bigvee;": "\\u22C1",\n    "bigwedge;": "\\u22C0",\n    "bkarow;": "\\u290D",\n    "blacklozenge;": "\\u29EB",\n    "blacksquare;": "\\u25AA",\n    "blacktriangle;": "\\u25B4",\n    "blacktriangledown;": "\\u25BE",\n    "blacktriangleleft;": "\\u25C2",\n    "blacktriangleright;": "\\u25B8",\n    "blank;": "\\u2423",\n    "blk12;": "\\u2592",\n    "blk14;": "\\u2591",\n    "blk34;": "\\u2593",\n    "block;": "\\u2588",\n    "bne;": "\\u003D\\u20E5",\n    "bnequiv;": "\\u2261\\u20E5",\n    "bNot;": "\\u2AED",\n    "bnot;": "\\u2310",\n    "Bopf;": "\\uD835\\uDD39",\n    "bopf;": "\\uD835\\uDD53",\n    "bot;": "\\u22A5",\n    "bottom;": "\\u22A5",\n    "bowtie;": "\\u22C8",\n    "boxbox;": "\\u29C9",\n    "boxDL;": "\\u2557",\n    "boxDl;": "\\u2556",\n    "boxdL;": "\\u2555",\n    "boxdl;": "\\u2510",\n    "boxDR;": "\\u2554",\n    "boxDr;": "\\u2553",\n    "boxdR;": "\\u2552",\n    "boxdr;": "\\u250C",\n    "boxH;": "\\u2550",\n    "boxh;": "\\u2500",\n    "boxHD;": "\\u2566",\n    "boxHd;": "\\u2564",\n    "boxhD;": "\\u2565",\n    "boxhd;": "\\u252C",\n    "boxHU;": "\\u2569",\n    "boxHu;": "\\u2567",\n    "boxhU;": "\\u2568",\n    "boxhu;": "\\u2534",\n    "boxminus;": "\\u229F",\n    "boxplus;": "\\u229E",\n    "boxtimes;": "\\u22A0",\n    "boxUL;": "\\u255D",\n    "boxUl;": "\\u255C",\n    "boxuL;": "\\u255B",\n    "boxul;": "\\u2518",\n    "boxUR;": "\\u255A",\n    "boxUr;": "\\u2559",\n    "boxuR;": "\\u2558",\n    "boxur;": "\\u2514",\n    "boxV;": "\\u2551",\n    "boxv;": "\\u2502",\n    "boxVH;": "\\u256C",\n    "boxVh;": "\\u256B",\n    "boxvH;": "\\u256A",\n    "boxvh;": "\\u253C",\n    "boxVL;": "\\u2563",\n    "boxVl;": "\\u2562",\n    "boxvL;": "\\u2561",\n    "boxvl;": "\\u2524",\n    "boxVR;": "\\u2560",\n    "boxVr;": "\\u255F",\n    "boxvR;": "\\u255E",\n    "boxvr;": "\\u251C",\n    "bprime;": "\\u2035",\n    "Breve;": "\\u02D8",\n    "breve;": "\\u02D8",\n    "brvbar;": "\\u00A6",\n    "brvbar": "\\u00A6",\n    "Bscr;": "\\u212C",\n    "bscr;": "\\uD835\\uDCB7",\n    "bsemi;": "\\u204F",\n    "bsim;": "\\u223D",\n    "bsime;": "\\u22CD",\n    "bsol;": "\\u005C",\n    "bsolb;": "\\u29C5",\n    "bsolhsub;": "\\u27C8",\n    "bull;": "\\u2022",\n    "bullet;": "\\u2022",\n    "bump;": "\\u224E",\n    "bumpE;": "\\u2AAE",\n    "bumpe;": "\\u224F",\n    "Bumpeq;": "\\u224E",\n    "bumpeq;": "\\u224F",\n    "Cacute;": "\\u0106",\n    "cacute;": "\\u0107",\n    "Cap;": "\\u22D2",\n    "cap;": "\\u2229",\n    "capand;": "\\u2A44",\n    "capbrcup;": "\\u2A49",\n    "capcap;": "\\u2A4B",\n    "capcup;": "\\u2A47",\n    "capdot;": "\\u2A40",\n    "CapitalDifferentialD;": "\\u2145",\n    "caps;": "\\u2229\\uFE00",\n    "caret;": "\\u2041",\n    "caron;": "\\u02C7",\n    "Cayleys;": "\\u212D",\n    "ccaps;": "\\u2A4D",\n    "Ccaron;": "\\u010C",\n    "ccaron;": "\\u010D",\n    "Ccedil;": "\\u00C7",\n    "Ccedil": "\\u00C7",\n    "ccedil;": "\\u00E7",\n    "ccedil": "\\u00E7",\n    "Ccirc;": "\\u0108",\n    "ccirc;": "\\u0109",\n    "Cconint;": "\\u2230",\n    "ccups;": "\\u2A4C",\n    "ccupssm;": "\\u2A50",\n    "Cdot;": "\\u010A",\n    "cdot;": "\\u010B",\n    "cedil;": "\\u00B8",\n    "cedil": "\\u00B8",\n    "Cedilla;": "\\u00B8",\n    "cemptyv;": "\\u29B2",\n    "cent;": "\\u00A2",\n    "cent": "\\u00A2",\n    "CenterDot;": "\\u00B7",\n    "centerdot;": "\\u00B7",\n    "Cfr;": "\\u212D",\n    "cfr;": "\\uD835\\uDD20",\n    "CHcy;": "\\u0427",\n    "chcy;": "\\u0447",\n    "check;": "\\u2713",\n    "checkmark;": "\\u2713",\n    "Chi;": "\\u03A7",\n    "chi;": "\\u03C7",\n    "cir;": "\\u25CB",\n    "circ;": "\\u02C6",\n    "circeq;": "\\u2257",\n    "circlearrowleft;": "\\u21BA",\n    "circlearrowright;": "\\u21BB",\n    "circledast;": "\\u229B",\n    "circledcirc;": "\\u229A",\n    "circleddash;": "\\u229D",\n    "CircleDot;": "\\u2299",\n    "circledR;": "\\u00AE",\n    "circledS;": "\\u24C8",\n    "CircleMinus;": "\\u2296",\n    "CirclePlus;": "\\u2295",\n    "CircleTimes;": "\\u2297",\n    "cirE;": "\\u29C3",\n    "cire;": "\\u2257",\n    "cirfnint;": "\\u2A10",\n    "cirmid;": "\\u2AEF",\n    "cirscir;": "\\u29C2",\n    "ClockwiseContourIntegral;": "\\u2232",\n    "CloseCurlyDoubleQuote;": "\\u201D",\n    "CloseCurlyQuote;": "\\u2019",\n    "clubs;": "\\u2663",\n    "clubsuit;": "\\u2663",\n    "Colon;": "\\u2237",\n    "colon;": "\\u003A",\n    "Colone;": "\\u2A74",\n    "colone;": "\\u2254",\n    "coloneq;": "\\u2254",\n    "comma;": "\\u002C",\n    "commat;": "\\u0040",\n    "comp;": "\\u2201",\n    "compfn;": "\\u2218",\n    "complement;": "\\u2201",\n    "complexes;": "\\u2102",\n    "cong;": "\\u2245",\n    "congdot;": "\\u2A6D",\n    "Congruent;": "\\u2261",\n    "Conint;": "\\u222F",\n    "conint;": "\\u222E",\n    "ContourIntegral;": "\\u222E",\n    "Copf;": "\\u2102",\n    "copf;": "\\uD835\\uDD54",\n    "coprod;": "\\u2210",\n    "Coproduct;": "\\u2210",\n    "COPY;": "\\u00A9",\n    "COPY": "\\u00A9",\n    "copy;": "\\u00A9",\n    "copy": "\\u00A9",\n    "copysr;": "\\u2117",\n    "CounterClockwiseContourIntegral;": "\\u2233",\n    "crarr;": "\\u21B5",\n    "Cross;": "\\u2A2F",\n    "cross;": "\\u2717",\n    "Cscr;": "\\uD835\\uDC9E",\n    "cscr;": "\\uD835\\uDCB8",\n    "csub;": "\\u2ACF",\n    "csube;": "\\u2AD1",\n    "csup;": "\\u2AD0",\n    "csupe;": "\\u2AD2",\n    "ctdot;": "\\u22EF",\n    "cudarrl;": "\\u2938",\n    "cudarrr;": "\\u2935",\n    "cuepr;": "\\u22DE",\n    "cuesc;": "\\u22DF",\n    "cularr;": "\\u21B6",\n    "cularrp;": "\\u293D",\n    "Cup;": "\\u22D3",\n    "cup;": "\\u222A",\n    "cupbrcap;": "\\u2A48",\n    "CupCap;": "\\u224D",\n    "cupcap;": "\\u2A46",\n    "cupcup;": "\\u2A4A",\n    "cupdot;": "\\u228D",\n    "cupor;": "\\u2A45",\n    "cups;": "\\u222A\\uFE00",\n    "curarr;": "\\u21B7",\n    "curarrm;": "\\u293C",\n    "curlyeqprec;": "\\u22DE",\n    "curlyeqsucc;": "\\u22DF",\n    "curlyvee;": "\\u22CE",\n    "curlywedge;": "\\u22CF",\n    "curren;": "\\u00A4",\n    "curren": "\\u00A4",\n    "curvearrowleft;": "\\u21B6",\n    "curvearrowright;": "\\u21B7",\n    "cuvee;": "\\u22CE",\n    "cuwed;": "\\u22CF",\n    "cwconint;": "\\u2232",\n    "cwint;": "\\u2231",\n    "cylcty;": "\\u232D",\n    "Dagger;": "\\u2021",\n    "dagger;": "\\u2020",\n    "daleth;": "\\u2138",\n    "Darr;": "\\u21A1",\n    "dArr;": "\\u21D3",\n    "darr;": "\\u2193",\n    "dash;": "\\u2010",\n    "Dashv;": "\\u2AE4",\n    "dashv;": "\\u22A3",\n    "dbkarow;": "\\u290F",\n    "dblac;": "\\u02DD",\n    "Dcaron;": "\\u010E",\n    "dcaron;": "\\u010F",\n    "Dcy;": "\\u0414",\n    "dcy;": "\\u0434",\n    "DD;": "\\u2145",\n    "dd;": "\\u2146",\n    "ddagger;": "\\u2021",\n    "ddarr;": "\\u21CA",\n    "DDotrahd;": "\\u2911",\n    "ddotseq;": "\\u2A77",\n    "deg;": "\\u00B0",\n    "deg": "\\u00B0",\n    "Del;": "\\u2207",\n    "Delta;": "\\u0394",\n    "delta;": "\\u03B4",\n    "demptyv;": "\\u29B1",\n    "dfisht;": "\\u297F",\n    "Dfr;": "\\uD835\\uDD07",\n    "dfr;": "\\uD835\\uDD21",\n    "dHar;": "\\u2965",\n    "dharl;": "\\u21C3",\n    "dharr;": "\\u21C2",\n    "DiacriticalAcute;": "\\u00B4",\n    "DiacriticalDot;": "\\u02D9",\n    "DiacriticalDoubleAcute;": "\\u02DD",\n    "DiacriticalGrave;": "\\u0060",\n    "DiacriticalTilde;": "\\u02DC",\n    "diam;": "\\u22C4",\n    "Diamond;": "\\u22C4",\n    "diamond;": "\\u22C4",\n    "diamondsuit;": "\\u2666",\n    "diams;": "\\u2666",\n    "die;": "\\u00A8",\n    "DifferentialD;": "\\u2146",\n    "digamma;": "\\u03DD",\n    "disin;": "\\u22F2",\n    "div;": "\\u00F7",\n    "divide;": "\\u00F7",\n    "divide": "\\u00F7",\n    "divideontimes;": "\\u22C7",\n    "divonx;": "\\u22C7",\n    "DJcy;": "\\u0402",\n    "djcy;": "\\u0452",\n    "dlcorn;": "\\u231E",\n    "dlcrop;": "\\u230D",\n    "dollar;": "\\u0024",\n    "Dopf;": "\\uD835\\uDD3B",\n    "dopf;": "\\uD835\\uDD55",\n    "Dot;": "\\u00A8",\n    "dot;": "\\u02D9",\n    "DotDot;": "\\u20DC",\n    "doteq;": "\\u2250",\n    "doteqdot;": "\\u2251",\n    "DotEqual;": "\\u2250",\n    "dotminus;": "\\u2238",\n    "dotplus;": "\\u2214",\n    "dotsquare;": "\\u22A1",\n    "doublebarwedge;": "\\u2306",\n    "DoubleContourIntegral;": "\\u222F",\n    "DoubleDot;": "\\u00A8",\n    "DoubleDownArrow;": "\\u21D3",\n    "DoubleLeftArrow;": "\\u21D0",\n    "DoubleLeftRightArrow;": "\\u21D4",\n    "DoubleLeftTee;": "\\u2AE4",\n    "DoubleLongLeftArrow;": "\\u27F8",\n    "DoubleLongLeftRightArrow;": "\\u27FA",\n    "DoubleLongRightArrow;": "\\u27F9",\n    "DoubleRightArrow;": "\\u21D2",\n    "DoubleRightTee;": "\\u22A8",\n    "DoubleUpArrow;": "\\u21D1",\n    "DoubleUpDownArrow;": "\\u21D5",\n    "DoubleVerticalBar;": "\\u2225",\n    "DownArrow;": "\\u2193",\n    "Downarrow;": "\\u21D3",\n    "downarrow;": "\\u2193",\n    "DownArrowBar;": "\\u2913",\n    "DownArrowUpArrow;": "\\u21F5",\n    "DownBreve;": "\\u0311",\n    "downdownarrows;": "\\u21CA",\n    "downharpoonleft;": "\\u21C3",\n    "downharpoonright;": "\\u21C2",\n    "DownLeftRightVector;": "\\u2950",\n    "DownLeftTeeVector;": "\\u295E",\n    "DownLeftVector;": "\\u21BD",\n    "DownLeftVectorBar;": "\\u2956",\n    "DownRightTeeVector;": "\\u295F",\n    "DownRightVector;": "\\u21C1",\n    "DownRightVectorBar;": "\\u2957",\n    "DownTee;": "\\u22A4",\n    "DownTeeArrow;": "\\u21A7",\n    "drbkarow;": "\\u2910",\n    "drcorn;": "\\u231F",\n    "drcrop;": "\\u230C",\n    "Dscr;": "\\uD835\\uDC9F",\n    "dscr;": "\\uD835\\uDCB9",\n    "DScy;": "\\u0405",\n    "dscy;": "\\u0455",\n    "dsol;": "\\u29F6",\n    "Dstrok;": "\\u0110",\n    "dstrok;": "\\u0111",\n    "dtdot;": "\\u22F1",\n    "dtri;": "\\u25BF",\n    "dtrif;": "\\u25BE",\n    "duarr;": "\\u21F5",\n    "duhar;": "\\u296F",\n    "dwangle;": "\\u29A6",\n    "DZcy;": "\\u040F",\n    "dzcy;": "\\u045F",\n    "dzigrarr;": "\\u27FF",\n    "Eacute;": "\\u00C9",\n    "Eacute": "\\u00C9",\n    "eacute;": "\\u00E9",\n    "eacute": "\\u00E9",\n    "easter;": "\\u2A6E",\n    "Ecaron;": "\\u011A",\n    "ecaron;": "\\u011B",\n    "ecir;": "\\u2256",\n    "Ecirc;": "\\u00CA",\n    "Ecirc": "\\u00CA",\n    "ecirc;": "\\u00EA",\n    "ecirc": "\\u00EA",\n    "ecolon;": "\\u2255",\n    "Ecy;": "\\u042D",\n    "ecy;": "\\u044D",\n    "eDDot;": "\\u2A77",\n    "Edot;": "\\u0116",\n    "eDot;": "\\u2251",\n    "edot;": "\\u0117",\n    "ee;": "\\u2147",\n    "efDot;": "\\u2252",\n    "Efr;": "\\uD835\\uDD08",\n    "efr;": "\\uD835\\uDD22",\n    "eg;": "\\u2A9A",\n    "Egrave;": "\\u00C8",\n    "Egrave": "\\u00C8",\n    "egrave;": "\\u00E8",\n    "egrave": "\\u00E8",\n    "egs;": "\\u2A96",\n    "egsdot;": "\\u2A98",\n    "el;": "\\u2A99",\n    "Element;": "\\u2208",\n    "elinters;": "\\u23E7",\n    "ell;": "\\u2113",\n    "els;": "\\u2A95",\n    "elsdot;": "\\u2A97",\n    "Emacr;": "\\u0112",\n    "emacr;": "\\u0113",\n    "empty;": "\\u2205",\n    "emptyset;": "\\u2205",\n    "EmptySmallSquare;": "\\u25FB",\n    "emptyv;": "\\u2205",\n    "EmptyVerySmallSquare;": "\\u25AB",\n    "emsp;": "\\u2003",\n    "emsp13;": "\\u2004",\n    "emsp14;": "\\u2005",\n    "ENG;": "\\u014A",\n    "eng;": "\\u014B",\n    "ensp;": "\\u2002",\n    "Eogon;": "\\u0118",\n    "eogon;": "\\u0119",\n    "Eopf;": "\\uD835\\uDD3C",\n    "eopf;": "\\uD835\\uDD56",\n    "epar;": "\\u22D5",\n    "eparsl;": "\\u29E3",\n    "eplus;": "\\u2A71",\n    "epsi;": "\\u03B5",\n    "Epsilon;": "\\u0395",\n    "epsilon;": "\\u03B5",\n    "epsiv;": "\\u03F5",\n    "eqcirc;": "\\u2256",\n    "eqcolon;": "\\u2255",\n    "eqsim;": "\\u2242",\n    "eqslantgtr;": "\\u2A96",\n    "eqslantless;": "\\u2A95",\n    "Equal;": "\\u2A75",\n    "equals;": "\\u003D",\n    "EqualTilde;": "\\u2242",\n    "equest;": "\\u225F",\n    "Equilibrium;": "\\u21CC",\n    "equiv;": "\\u2261",\n    "equivDD;": "\\u2A78",\n    "eqvparsl;": "\\u29E5",\n    "erarr;": "\\u2971",\n    "erDot;": "\\u2253",\n    "Escr;": "\\u2130",\n    "escr;": "\\u212F",\n    "esdot;": "\\u2250",\n    "Esim;": "\\u2A73",\n    "esim;": "\\u2242",\n    "Eta;": "\\u0397",\n    "eta;": "\\u03B7",\n    "ETH;": "\\u00D0",\n    "ETH": "\\u00D0",\n    "eth;": "\\u00F0",\n    "eth": "\\u00F0",\n    "Euml;": "\\u00CB",\n    "Euml": "\\u00CB",\n    "euml;": "\\u00EB",\n    "euml": "\\u00EB",\n    "euro;": "\\u20AC",\n    "excl;": "\\u0021",\n    "exist;": "\\u2203",\n    "Exists;": "\\u2203",\n    "expectation;": "\\u2130",\n    "ExponentialE;": "\\u2147",\n    "exponentiale;": "\\u2147",\n    "fallingdotseq;": "\\u2252",\n    "Fcy;": "\\u0424",\n    "fcy;": "\\u0444",\n    "female;": "\\u2640",\n    "ffilig;": "\\uFB03",\n    "fflig;": "\\uFB00",\n    "ffllig;": "\\uFB04",\n    "Ffr;": "\\uD835\\uDD09",\n    "ffr;": "\\uD835\\uDD23",\n    "filig;": "\\uFB01",\n    "FilledSmallSquare;": "\\u25FC",\n    "FilledVerySmallSquare;": "\\u25AA",\n    "fjlig;": "\\u0066\\u006A",\n    "flat;": "\\u266D",\n    "fllig;": "\\uFB02",\n    "fltns;": "\\u25B1",\n    "fnof;": "\\u0192",\n    "Fopf;": "\\uD835\\uDD3D",\n    "fopf;": "\\uD835\\uDD57",\n    "ForAll;": "\\u2200",\n    "forall;": "\\u2200",\n    "fork;": "\\u22D4",\n    "forkv;": "\\u2AD9",\n    "Fouriertrf;": "\\u2131",\n    "fpartint;": "\\u2A0D",\n    "frac12;": "\\u00BD",\n    "frac12": "\\u00BD",\n    "frac13;": "\\u2153",\n    "frac14;": "\\u00BC",\n    "frac14": "\\u00BC",\n    "frac15;": "\\u2155",\n    "frac16;": "\\u2159",\n    "frac18;": "\\u215B",\n    "frac23;": "\\u2154",\n    "frac25;": "\\u2156",\n    "frac34;": "\\u00BE",\n    "frac34": "\\u00BE",\n    "frac35;": "\\u2157",\n    "frac38;": "\\u215C",\n    "frac45;": "\\u2158",\n    "frac56;": "\\u215A",\n    "frac58;": "\\u215D",\n    "frac78;": "\\u215E",\n    "frasl;": "\\u2044",\n    "frown;": "\\u2322",\n    "Fscr;": "\\u2131",\n    "fscr;": "\\uD835\\uDCBB",\n    "gacute;": "\\u01F5",\n    "Gamma;": "\\u0393",\n    "gamma;": "\\u03B3",\n    "Gammad;": "\\u03DC",\n    "gammad;": "\\u03DD",\n    "gap;": "\\u2A86",\n    "Gbreve;": "\\u011E",\n    "gbreve;": "\\u011F",\n    "Gcedil;": "\\u0122",\n    "Gcirc;": "\\u011C",\n    "gcirc;": "\\u011D",\n    "Gcy;": "\\u0413",\n    "gcy;": "\\u0433",\n    "Gdot;": "\\u0120",\n    "gdot;": "\\u0121",\n    "gE;": "\\u2267",\n    "ge;": "\\u2265",\n    "gEl;": "\\u2A8C",\n    "gel;": "\\u22DB",\n    "geq;": "\\u2265",\n    "geqq;": "\\u2267",\n    "geqslant;": "\\u2A7E",\n    "ges;": "\\u2A7E",\n    "gescc;": "\\u2AA9",\n    "gesdot;": "\\u2A80",\n    "gesdoto;": "\\u2A82",\n    "gesdotol;": "\\u2A84",\n    "gesl;": "\\u22DB\\uFE00",\n    "gesles;": "\\u2A94",\n    "Gfr;": "\\uD835\\uDD0A",\n    "gfr;": "\\uD835\\uDD24",\n    "Gg;": "\\u22D9",\n    "gg;": "\\u226B",\n    "ggg;": "\\u22D9",\n    "gimel;": "\\u2137",\n    "GJcy;": "\\u0403",\n    "gjcy;": "\\u0453",\n    "gl;": "\\u2277",\n    "gla;": "\\u2AA5",\n    "glE;": "\\u2A92",\n    "glj;": "\\u2AA4",\n    "gnap;": "\\u2A8A",\n    "gnapprox;": "\\u2A8A",\n    "gnE;": "\\u2269",\n    "gne;": "\\u2A88",\n    "gneq;": "\\u2A88",\n    "gneqq;": "\\u2269",\n    "gnsim;": "\\u22E7",\n    "Gopf;": "\\uD835\\uDD3E",\n    "gopf;": "\\uD835\\uDD58",\n    "grave;": "\\u0060",\n    "GreaterEqual;": "\\u2265",\n    "GreaterEqualLess;": "\\u22DB",\n    "GreaterFullEqual;": "\\u2267",\n    "GreaterGreater;": "\\u2AA2",\n    "GreaterLess;": "\\u2277",\n    "GreaterSlantEqual;": "\\u2A7E",\n    "GreaterTilde;": "\\u2273",\n    "Gscr;": "\\uD835\\uDCA2",\n    "gscr;": "\\u210A",\n    "gsim;": "\\u2273",\n    "gsime;": "\\u2A8E",\n    "gsiml;": "\\u2A90",\n    "GT;": "\\u003E",\n    "GT": "\\u003E",\n    "Gt;": "\\u226B",\n    "gt;": "\\u003E",\n    "gt": "\\u003E",\n    "gtcc;": "\\u2AA7",\n    "gtcir;": "\\u2A7A",\n    "gtdot;": "\\u22D7",\n    "gtlPar;": "\\u2995",\n    "gtquest;": "\\u2A7C",\n    "gtrapprox;": "\\u2A86",\n    "gtrarr;": "\\u2978",\n    "gtrdot;": "\\u22D7",\n    "gtreqless;": "\\u22DB",\n    "gtreqqless;": "\\u2A8C",\n    "gtrless;": "\\u2277",\n    "gtrsim;": "\\u2273",\n    "gvertneqq;": "\\u2269\\uFE00",\n    "gvnE;": "\\u2269\\uFE00",\n    "Hacek;": "\\u02C7",\n    "hairsp;": "\\u200A",\n    "half;": "\\u00BD",\n    "hamilt;": "\\u210B",\n    "HARDcy;": "\\u042A",\n    "hardcy;": "\\u044A",\n    "hArr;": "\\u21D4",\n    "harr;": "\\u2194",\n    "harrcir;": "\\u2948",\n    "harrw;": "\\u21AD",\n    "Hat;": "\\u005E",\n    "hbar;": "\\u210F",\n    "Hcirc;": "\\u0124",\n    "hcirc;": "\\u0125",\n    "hearts;": "\\u2665",\n    "heartsuit;": "\\u2665",\n    "hellip;": "\\u2026",\n    "hercon;": "\\u22B9",\n    "Hfr;": "\\u210C",\n    "hfr;": "\\uD835\\uDD25",\n    "HilbertSpace;": "\\u210B",\n    "hksearow;": "\\u2925",\n    "hkswarow;": "\\u2926",\n    "hoarr;": "\\u21FF",\n    "homtht;": "\\u223B",\n    "hookleftarrow;": "\\u21A9",\n    "hookrightarrow;": "\\u21AA",\n    "Hopf;": "\\u210D",\n    "hopf;": "\\uD835\\uDD59",\n    "horbar;": "\\u2015",\n    "HorizontalLine;": "\\u2500",\n    "Hscr;": "\\u210B",\n    "hscr;": "\\uD835\\uDCBD",\n    "hslash;": "\\u210F",\n    "Hstrok;": "\\u0126",\n    "hstrok;": "\\u0127",\n    "HumpDownHump;": "\\u224E",\n    "HumpEqual;": "\\u224F",\n    "hybull;": "\\u2043",\n    "hyphen;": "\\u2010",\n    "Iacute;": "\\u00CD",\n    "Iacute": "\\u00CD",\n    "iacute;": "\\u00ED",\n    "iacute": "\\u00ED",\n    "ic;": "\\u2063",\n    "Icirc;": "\\u00CE",\n    "Icirc": "\\u00CE",\n    "icirc;": "\\u00EE",\n    "icirc": "\\u00EE",\n    "Icy;": "\\u0418",\n    "icy;": "\\u0438",\n    "Idot;": "\\u0130",\n    "IEcy;": "\\u0415",\n    "iecy;": "\\u0435",\n    "iexcl;": "\\u00A1",\n    "iexcl": "\\u00A1",\n    "iff;": "\\u21D4",\n    "Ifr;": "\\u2111",\n    "ifr;": "\\uD835\\uDD26",\n    "Igrave;": "\\u00CC",\n    "Igrave": "\\u00CC",\n    "igrave;": "\\u00EC",\n    "igrave": "\\u00EC",\n    "ii;": "\\u2148",\n    "iiiint;": "\\u2A0C",\n    "iiint;": "\\u222D",\n    "iinfin;": "\\u29DC",\n    "iiota;": "\\u2129",\n    "IJlig;": "\\u0132",\n    "ijlig;": "\\u0133",\n    "Im;": "\\u2111",\n    "Imacr;": "\\u012A",\n    "imacr;": "\\u012B",\n    "image;": "\\u2111",\n    "ImaginaryI;": "\\u2148",\n    "imagline;": "\\u2110",\n    "imagpart;": "\\u2111",\n    "imath;": "\\u0131",\n    "imof;": "\\u22B7",\n    "imped;": "\\u01B5",\n    "Implies;": "\\u21D2",\n    "in;": "\\u2208",\n    "incare;": "\\u2105",\n    "infin;": "\\u221E",\n    "infintie;": "\\u29DD",\n    "inodot;": "\\u0131",\n    "Int;": "\\u222C",\n    "int;": "\\u222B",\n    "intcal;": "\\u22BA",\n    "integers;": "\\u2124",\n    "Integral;": "\\u222B",\n    "intercal;": "\\u22BA",\n    "Intersection;": "\\u22C2",\n    "intlarhk;": "\\u2A17",\n    "intprod;": "\\u2A3C",\n    "InvisibleComma;": "\\u2063",\n    "InvisibleTimes;": "\\u2062",\n    "IOcy;": "\\u0401",\n    "iocy;": "\\u0451",\n    "Iogon;": "\\u012E",\n    "iogon;": "\\u012F",\n    "Iopf;": "\\uD835\\uDD40",\n    "iopf;": "\\uD835\\uDD5A",\n    "Iota;": "\\u0399",\n    "iota;": "\\u03B9",\n    "iprod;": "\\u2A3C",\n    "iquest;": "\\u00BF",\n    "iquest": "\\u00BF",\n    "Iscr;": "\\u2110",\n    "iscr;": "\\uD835\\uDCBE",\n    "isin;": "\\u2208",\n    "isindot;": "\\u22F5",\n    "isinE;": "\\u22F9",\n    "isins;": "\\u22F4",\n    "isinsv;": "\\u22F3",\n    "isinv;": "\\u2208",\n    "it;": "\\u2062",\n    "Itilde;": "\\u0128",\n    "itilde;": "\\u0129",\n    "Iukcy;": "\\u0406",\n    "iukcy;": "\\u0456",\n    "Iuml;": "\\u00CF",\n    "Iuml": "\\u00CF",\n    "iuml;": "\\u00EF",\n    "iuml": "\\u00EF",\n    "Jcirc;": "\\u0134",\n    "jcirc;": "\\u0135",\n    "Jcy;": "\\u0419",\n    "jcy;": "\\u0439",\n    "Jfr;": "\\uD835\\uDD0D",\n    "jfr;": "\\uD835\\uDD27",\n    "jmath;": "\\u0237",\n    "Jopf;": "\\uD835\\uDD41",\n    "jopf;": "\\uD835\\uDD5B",\n    "Jscr;": "\\uD835\\uDCA5",\n    "jscr;": "\\uD835\\uDCBF",\n    "Jsercy;": "\\u0408",\n    "jsercy;": "\\u0458",\n    "Jukcy;": "\\u0404",\n    "jukcy;": "\\u0454",\n    "Kappa;": "\\u039A",\n    "kappa;": "\\u03BA",\n    "kappav;": "\\u03F0",\n    "Kcedil;": "\\u0136",\n    "kcedil;": "\\u0137",\n    "Kcy;": "\\u041A",\n    "kcy;": "\\u043A",\n    "Kfr;": "\\uD835\\uDD0E",\n    "kfr;": "\\uD835\\uDD28",\n    "kgreen;": "\\u0138",\n    "KHcy;": "\\u0425",\n    "khcy;": "\\u0445",\n    "KJcy;": "\\u040C",\n    "kjcy;": "\\u045C",\n    "Kopf;": "\\uD835\\uDD42",\n    "kopf;": "\\uD835\\uDD5C",\n    "Kscr;": "\\uD835\\uDCA6",\n    "kscr;": "\\uD835\\uDCC0",\n    "lAarr;": "\\u21DA",\n    "Lacute;": "\\u0139",\n    "lacute;": "\\u013A",\n    "laemptyv;": "\\u29B4",\n    "lagran;": "\\u2112",\n    "Lambda;": "\\u039B",\n    "lambda;": "\\u03BB",\n    "Lang;": "\\u27EA",\n    "lang;": "\\u27E8",\n    "langd;": "\\u2991",\n    "langle;": "\\u27E8",\n    "lap;": "\\u2A85",\n    "Laplacetrf;": "\\u2112",\n    "laquo;": "\\u00AB",\n    "laquo": "\\u00AB",\n    "Larr;": "\\u219E",\n    "lArr;": "\\u21D0",\n    "larr;": "\\u2190",\n    "larrb;": "\\u21E4",\n    "larrbfs;": "\\u291F",\n    "larrfs;": "\\u291D",\n    "larrhk;": "\\u21A9",\n    "larrlp;": "\\u21AB",\n    "larrpl;": "\\u2939",\n    "larrsim;": "\\u2973",\n    "larrtl;": "\\u21A2",\n    "lat;": "\\u2AAB",\n    "lAtail;": "\\u291B",\n    "latail;": "\\u2919",\n    "late;": "\\u2AAD",\n    "lates;": "\\u2AAD\\uFE00",\n    "lBarr;": "\\u290E",\n    "lbarr;": "\\u290C",\n    "lbbrk;": "\\u2772",\n    "lbrace;": "\\u007B",\n    "lbrack;": "\\u005B",\n    "lbrke;": "\\u298B",\n    "lbrksld;": "\\u298F",\n    "lbrkslu;": "\\u298D",\n    "Lcaron;": "\\u013D",\n    "lcaron;": "\\u013E",\n    "Lcedil;": "\\u013B",\n    "lcedil;": "\\u013C",\n    "lceil;": "\\u2308",\n    "lcub;": "\\u007B",\n    "Lcy;": "\\u041B",\n    "lcy;": "\\u043B",\n    "ldca;": "\\u2936",\n    "ldquo;": "\\u201C",\n    "ldquor;": "\\u201E",\n    "ldrdhar;": "\\u2967",\n    "ldrushar;": "\\u294B",\n    "ldsh;": "\\u21B2",\n    "lE;": "\\u2266",\n    "le;": "\\u2264",\n    "LeftAngleBracket;": "\\u27E8",\n    "LeftArrow;": "\\u2190",\n    "Leftarrow;": "\\u21D0",\n    "leftarrow;": "\\u2190",\n    "LeftArrowBar;": "\\u21E4",\n    "LeftArrowRightArrow;": "\\u21C6",\n    "leftarrowtail;": "\\u21A2",\n    "LeftCeiling;": "\\u2308",\n    "LeftDoubleBracket;": "\\u27E6",\n    "LeftDownTeeVector;": "\\u2961",\n    "LeftDownVector;": "\\u21C3",\n    "LeftDownVectorBar;": "\\u2959",\n    "LeftFloor;": "\\u230A",\n    "leftharpoondown;": "\\u21BD",\n    "leftharpoonup;": "\\u21BC",\n    "leftleftarrows;": "\\u21C7",\n    "LeftRightArrow;": "\\u2194",\n    "Leftrightarrow;": "\\u21D4",\n    "leftrightarrow;": "\\u2194",\n    "leftrightarrows;": "\\u21C6",\n    "leftrightharpoons;": "\\u21CB",\n    "leftrightsquigarrow;": "\\u21AD",\n    "LeftRightVector;": "\\u294E",\n    "LeftTee;": "\\u22A3",\n    "LeftTeeArrow;": "\\u21A4",\n    "LeftTeeVector;": "\\u295A",\n    "leftthreetimes;": "\\u22CB",\n    "LeftTriangle;": "\\u22B2",\n    "LeftTriangleBar;": "\\u29CF",\n    "LeftTriangleEqual;": "\\u22B4",\n    "LeftUpDownVector;": "\\u2951",\n    "LeftUpTeeVector;": "\\u2960",\n    "LeftUpVector;": "\\u21BF",\n    "LeftUpVectorBar;": "\\u2958",\n    "LeftVector;": "\\u21BC",\n    "LeftVectorBar;": "\\u2952",\n    "lEg;": "\\u2A8B",\n    "leg;": "\\u22DA",\n    "leq;": "\\u2264",\n    "leqq;": "\\u2266",\n    "leqslant;": "\\u2A7D",\n    "les;": "\\u2A7D",\n    "lescc;": "\\u2AA8",\n    "lesdot;": "\\u2A7F",\n    "lesdoto;": "\\u2A81",\n    "lesdotor;": "\\u2A83",\n    "lesg;": "\\u22DA\\uFE00",\n    "lesges;": "\\u2A93",\n    "lessapprox;": "\\u2A85",\n    "lessdot;": "\\u22D6",\n    "lesseqgtr;": "\\u22DA",\n    "lesseqqgtr;": "\\u2A8B",\n    "LessEqualGreater;": "\\u22DA",\n    "LessFullEqual;": "\\u2266",\n    "LessGreater;": "\\u2276",\n    "lessgtr;": "\\u2276",\n    "LessLess;": "\\u2AA1",\n    "lesssim;": "\\u2272",\n    "LessSlantEqual;": "\\u2A7D",\n    "LessTilde;": "\\u2272",\n    "lfisht;": "\\u297C",\n    "lfloor;": "\\u230A",\n    "Lfr;": "\\uD835\\uDD0F",\n    "lfr;": "\\uD835\\uDD29",\n    "lg;": "\\u2276",\n    "lgE;": "\\u2A91",\n    "lHar;": "\\u2962",\n    "lhard;": "\\u21BD",\n    "lharu;": "\\u21BC",\n    "lharul;": "\\u296A",\n    "lhblk;": "\\u2584",\n    "LJcy;": "\\u0409",\n    "ljcy;": "\\u0459",\n    "Ll;": "\\u22D8",\n    "ll;": "\\u226A",\n    "llarr;": "\\u21C7",\n    "llcorner;": "\\u231E",\n    "Lleftarrow;": "\\u21DA",\n    "llhard;": "\\u296B",\n    "lltri;": "\\u25FA",\n    "Lmidot;": "\\u013F",\n    "lmidot;": "\\u0140",\n    "lmoust;": "\\u23B0",\n    "lmoustache;": "\\u23B0",\n    "lnap;": "\\u2A89",\n    "lnapprox;": "\\u2A89",\n    "lnE;": "\\u2268",\n    "lne;": "\\u2A87",\n    "lneq;": "\\u2A87",\n    "lneqq;": "\\u2268",\n    "lnsim;": "\\u22E6",\n    "loang;": "\\u27EC",\n    "loarr;": "\\u21FD",\n    "lobrk;": "\\u27E6",\n    "LongLeftArrow;": "\\u27F5",\n    "Longleftarrow;": "\\u27F8",\n    "longleftarrow;": "\\u27F5",\n    "LongLeftRightArrow;": "\\u27F7",\n    "Longleftrightarrow;": "\\u27FA",\n    "longleftrightarrow;": "\\u27F7",\n    "longmapsto;": "\\u27FC",\n    "LongRightArrow;": "\\u27F6",\n    "Longrightarrow;": "\\u27F9",\n    "longrightarrow;": "\\u27F6",\n    "looparrowleft;": "\\u21AB",\n    "looparrowright;": "\\u21AC",\n    "lopar;": "\\u2985",\n    "Lopf;": "\\uD835\\uDD43",\n    "lopf;": "\\uD835\\uDD5D",\n    "loplus;": "\\u2A2D",\n    "lotimes;": "\\u2A34",\n    "lowast;": "\\u2217",\n    "lowbar;": "\\u005F",\n    "LowerLeftArrow;": "\\u2199",\n    "LowerRightArrow;": "\\u2198",\n    "loz;": "\\u25CA",\n    "lozenge;": "\\u25CA",\n    "lozf;": "\\u29EB",\n    "lpar;": "\\u0028",\n    "lparlt;": "\\u2993",\n    "lrarr;": "\\u21C6",\n    "lrcorner;": "\\u231F",\n    "lrhar;": "\\u21CB",\n    "lrhard;": "\\u296D",\n    "lrm;": "\\u200E",\n    "lrtri;": "\\u22BF",\n    "lsaquo;": "\\u2039",\n    "Lscr;": "\\u2112",\n    "lscr;": "\\uD835\\uDCC1",\n    "Lsh;": "\\u21B0",\n    "lsh;": "\\u21B0",\n    "lsim;": "\\u2272",\n    "lsime;": "\\u2A8D",\n    "lsimg;": "\\u2A8F",\n    "lsqb;": "\\u005B",\n    "lsquo;": "\\u2018",\n    "lsquor;": "\\u201A",\n    "Lstrok;": "\\u0141",\n    "lstrok;": "\\u0142",\n    "LT;": "\\u003C",\n    "LT": "\\u003C",\n    "Lt;": "\\u226A",\n    "lt;": "\\u003C",\n    "lt": "\\u003C",\n    "ltcc;": "\\u2AA6",\n    "ltcir;": "\\u2A79",\n    "ltdot;": "\\u22D6",\n    "lthree;": "\\u22CB",\n    "ltimes;": "\\u22C9",\n    "ltlarr;": "\\u2976",\n    "ltquest;": "\\u2A7B",\n    "ltri;": "\\u25C3",\n    "ltrie;": "\\u22B4",\n    "ltrif;": "\\u25C2",\n    "ltrPar;": "\\u2996",\n    "lurdshar;": "\\u294A",\n    "luruhar;": "\\u2966",\n    "lvertneqq;": "\\u2268\\uFE00",\n    "lvnE;": "\\u2268\\uFE00",\n    "macr;": "\\u00AF",\n    "macr": "\\u00AF",\n    "male;": "\\u2642",\n    "malt;": "\\u2720",\n    "maltese;": "\\u2720",\n    "Map;": "\\u2905",\n    "map;": "\\u21A6",\n    "mapsto;": "\\u21A6",\n    "mapstodown;": "\\u21A7",\n    "mapstoleft;": "\\u21A4",\n    "mapstoup;": "\\u21A5",\n    "marker;": "\\u25AE",\n    "mcomma;": "\\u2A29",\n    "Mcy;": "\\u041C",\n    "mcy;": "\\u043C",\n    "mdash;": "\\u2014",\n    "mDDot;": "\\u223A",\n    "measuredangle;": "\\u2221",\n    "MediumSpace;": "\\u205F",\n    "Mellintrf;": "\\u2133",\n    "Mfr;": "\\uD835\\uDD10",\n    "mfr;": "\\uD835\\uDD2A",\n    "mho;": "\\u2127",\n    "micro;": "\\u00B5",\n    "micro": "\\u00B5",\n    "mid;": "\\u2223",\n    "midast;": "\\u002A",\n    "midcir;": "\\u2AF0",\n    "middot;": "\\u00B7",\n    "middot": "\\u00B7",\n    "minus;": "\\u2212",\n    "minusb;": "\\u229F",\n    "minusd;": "\\u2238",\n    "minusdu;": "\\u2A2A",\n    "MinusPlus;": "\\u2213",\n    "mlcp;": "\\u2ADB",\n    "mldr;": "\\u2026",\n    "mnplus;": "\\u2213",\n    "models;": "\\u22A7",\n    "Mopf;": "\\uD835\\uDD44",\n    "mopf;": "\\uD835\\uDD5E",\n    "mp;": "\\u2213",\n    "Mscr;": "\\u2133",\n    "mscr;": "\\uD835\\uDCC2",\n    "mstpos;": "\\u223E",\n    "Mu;": "\\u039C",\n    "mu;": "\\u03BC",\n    "multimap;": "\\u22B8",\n    "mumap;": "\\u22B8",\n    "nabla;": "\\u2207",\n    "Nacute;": "\\u0143",\n    "nacute;": "\\u0144",\n    "nang;": "\\u2220\\u20D2",\n    "nap;": "\\u2249",\n    "napE;": "\\u2A70\\u0338",\n    "napid;": "\\u224B\\u0338",\n    "napos;": "\\u0149",\n    "napprox;": "\\u2249",\n    "natur;": "\\u266E",\n    "natural;": "\\u266E",\n    "naturals;": "\\u2115",\n    "nbsp;": "\\u00A0",\n    "nbsp": "\\u00A0",\n    "nbump;": "\\u224E\\u0338",\n    "nbumpe;": "\\u224F\\u0338",\n    "ncap;": "\\u2A43",\n    "Ncaron;": "\\u0147",\n    "ncaron;": "\\u0148",\n    "Ncedil;": "\\u0145",\n    "ncedil;": "\\u0146",\n    "ncong;": "\\u2247",\n    "ncongdot;": "\\u2A6D\\u0338",\n    "ncup;": "\\u2A42",\n    "Ncy;": "\\u041D",\n    "ncy;": "\\u043D",\n    "ndash;": "\\u2013",\n    "ne;": "\\u2260",\n    "nearhk;": "\\u2924",\n    "neArr;": "\\u21D7",\n    "nearr;": "\\u2197",\n    "nearrow;": "\\u2197",\n    "nedot;": "\\u2250\\u0338",\n    "NegativeMediumSpace;": "\\u200B",\n    "NegativeThickSpace;": "\\u200B",\n    "NegativeThinSpace;": "\\u200B",\n    "NegativeVeryThinSpace;": "\\u200B",\n    "nequiv;": "\\u2262",\n    "nesear;": "\\u2928",\n    "nesim;": "\\u2242\\u0338",\n    "NestedGreaterGreater;": "\\u226B",\n    "NestedLessLess;": "\\u226A",\n    "NewLine;": "\\u000A",\n    "nexist;": "\\u2204",\n    "nexists;": "\\u2204",\n    "Nfr;": "\\uD835\\uDD11",\n    "nfr;": "\\uD835\\uDD2B",\n    "ngE;": "\\u2267\\u0338",\n    "nge;": "\\u2271",\n    "ngeq;": "\\u2271",\n    "ngeqq;": "\\u2267\\u0338",\n    "ngeqslant;": "\\u2A7E\\u0338",\n    "nges;": "\\u2A7E\\u0338",\n    "nGg;": "\\u22D9\\u0338",\n    "ngsim;": "\\u2275",\n    "nGt;": "\\u226B\\u20D2",\n    "ngt;": "\\u226F",\n    "ngtr;": "\\u226F",\n    "nGtv;": "\\u226B\\u0338",\n    "nhArr;": "\\u21CE",\n    "nharr;": "\\u21AE",\n    "nhpar;": "\\u2AF2",\n    "ni;": "\\u220B",\n    "nis;": "\\u22FC",\n    "nisd;": "\\u22FA",\n    "niv;": "\\u220B",\n    "NJcy;": "\\u040A",\n    "njcy;": "\\u045A",\n    "nlArr;": "\\u21CD",\n    "nlarr;": "\\u219A",\n    "nldr;": "\\u2025",\n    "nlE;": "\\u2266\\u0338",\n    "nle;": "\\u2270",\n    "nLeftarrow;": "\\u21CD",\n    "nleftarrow;": "\\u219A",\n    "nLeftrightarrow;": "\\u21CE",\n    "nleftrightarrow;": "\\u21AE",\n    "nleq;": "\\u2270",\n    "nleqq;": "\\u2266\\u0338",\n    "nleqslant;": "\\u2A7D\\u0338",\n    "nles;": "\\u2A7D\\u0338",\n    "nless;": "\\u226E",\n    "nLl;": "\\u22D8\\u0338",\n    "nlsim;": "\\u2274",\n    "nLt;": "\\u226A\\u20D2",\n    "nlt;": "\\u226E",\n    "nltri;": "\\u22EA",\n    "nltrie;": "\\u22EC",\n    "nLtv;": "\\u226A\\u0338",\n    "nmid;": "\\u2224",\n    "NoBreak;": "\\u2060",\n    "NonBreakingSpace;": "\\u00A0",\n    "Nopf;": "\\u2115",\n    "nopf;": "\\uD835\\uDD5F",\n    "Not;": "\\u2AEC",\n    "not;": "\\u00AC",\n    "not": "\\u00AC",\n    "NotCongruent;": "\\u2262",\n    "NotCupCap;": "\\u226D",\n    "NotDoubleVerticalBar;": "\\u2226",\n    "NotElement;": "\\u2209",\n    "NotEqual;": "\\u2260",\n    "NotEqualTilde;": "\\u2242\\u0338",\n    "NotExists;": "\\u2204",\n    "NotGreater;": "\\u226F",\n    "NotGreaterEqual;": "\\u2271",\n    "NotGreaterFullEqual;": "\\u2267\\u0338",\n    "NotGreaterGreater;": "\\u226B\\u0338",\n    "NotGreaterLess;": "\\u2279",\n    "NotGreaterSlantEqual;": "\\u2A7E\\u0338",\n    "NotGreaterTilde;": "\\u2275",\n    "NotHumpDownHump;": "\\u224E\\u0338",\n    "NotHumpEqual;": "\\u224F\\u0338",\n    "notin;": "\\u2209",\n    "notindot;": "\\u22F5\\u0338",\n    "notinE;": "\\u22F9\\u0338",\n    "notinva;": "\\u2209",\n    "notinvb;": "\\u22F7",\n    "notinvc;": "\\u22F6",\n    "NotLeftTriangle;": "\\u22EA",\n    "NotLeftTriangleBar;": "\\u29CF\\u0338",\n    "NotLeftTriangleEqual;": "\\u22EC",\n    "NotLess;": "\\u226E",\n    "NotLessEqual;": "\\u2270",\n    "NotLessGreater;": "\\u2278",\n    "NotLessLess;": "\\u226A\\u0338",\n    "NotLessSlantEqual;": "\\u2A7D\\u0338",\n    "NotLessTilde;": "\\u2274",\n    "NotNestedGreaterGreater;": "\\u2AA2\\u0338",\n    "NotNestedLessLess;": "\\u2AA1\\u0338",\n    "notni;": "\\u220C",\n    "notniva;": "\\u220C",\n    "notnivb;": "\\u22FE",\n    "notnivc;": "\\u22FD",\n    "NotPrecedes;": "\\u2280",\n    "NotPrecedesEqual;": "\\u2AAF\\u0338",\n    "NotPrecedesSlantEqual;": "\\u22E0",\n    "NotReverseElement;": "\\u220C",\n    "NotRightTriangle;": "\\u22EB",\n    "NotRightTriangleBar;": "\\u29D0\\u0338",\n    "NotRightTriangleEqual;": "\\u22ED",\n    "NotSquareSubset;": "\\u228F\\u0338",\n    "NotSquareSubsetEqual;": "\\u22E2",\n    "NotSquareSuperset;": "\\u2290\\u0338",\n    "NotSquareSupersetEqual;": "\\u22E3",\n    "NotSubset;": "\\u2282\\u20D2",\n    "NotSubsetEqual;": "\\u2288",\n    "NotSucceeds;": "\\u2281",\n    "NotSucceedsEqual;": "\\u2AB0\\u0338",\n    "NotSucceedsSlantEqual;": "\\u22E1",\n    "NotSucceedsTilde;": "\\u227F\\u0338",\n    "NotSuperset;": "\\u2283\\u20D2",\n    "NotSupersetEqual;": "\\u2289",\n    "NotTilde;": "\\u2241",\n    "NotTildeEqual;": "\\u2244",\n    "NotTildeFullEqual;": "\\u2247",\n    "NotTildeTilde;": "\\u2249",\n    "NotVerticalBar;": "\\u2224",\n    "npar;": "\\u2226",\n    "nparallel;": "\\u2226",\n    "nparsl;": "\\u2AFD\\u20E5",\n    "npart;": "\\u2202\\u0338",\n    "npolint;": "\\u2A14",\n    "npr;": "\\u2280",\n    "nprcue;": "\\u22E0",\n    "npre;": "\\u2AAF\\u0338",\n    "nprec;": "\\u2280",\n    "npreceq;": "\\u2AAF\\u0338",\n    "nrArr;": "\\u21CF",\n    "nrarr;": "\\u219B",\n    "nrarrc;": "\\u2933\\u0338",\n    "nrarrw;": "\\u219D\\u0338",\n    "nRightarrow;": "\\u21CF",\n    "nrightarrow;": "\\u219B",\n    "nrtri;": "\\u22EB",\n    "nrtrie;": "\\u22ED",\n    "nsc;": "\\u2281",\n    "nsccue;": "\\u22E1",\n    "nsce;": "\\u2AB0\\u0338",\n    "Nscr;": "\\uD835\\uDCA9",\n    "nscr;": "\\uD835\\uDCC3",\n    "nshortmid;": "\\u2224",\n    "nshortparallel;": "\\u2226",\n    "nsim;": "\\u2241",\n    "nsime;": "\\u2244",\n    "nsimeq;": "\\u2244",\n    "nsmid;": "\\u2224",\n    "nspar;": "\\u2226",\n    "nsqsube;": "\\u22E2",\n    "nsqsupe;": "\\u22E3",\n    "nsub;": "\\u2284",\n    "nsubE;": "\\u2AC5\\u0338",\n    "nsube;": "\\u2288",\n    "nsubset;": "\\u2282\\u20D2",\n    "nsubseteq;": "\\u2288",\n    "nsubseteqq;": "\\u2AC5\\u0338",\n    "nsucc;": "\\u2281",\n    "nsucceq;": "\\u2AB0\\u0338",\n    "nsup;": "\\u2285",\n    "nsupE;": "\\u2AC6\\u0338",\n    "nsupe;": "\\u2289",\n    "nsupset;": "\\u2283\\u20D2",\n    "nsupseteq;": "\\u2289",\n    "nsupseteqq;": "\\u2AC6\\u0338",\n    "ntgl;": "\\u2279",\n    "Ntilde;": "\\u00D1",\n    "Ntilde": "\\u00D1",\n    "ntilde;": "\\u00F1",\n    "ntilde": "\\u00F1",\n    "ntlg;": "\\u2278",\n    "ntriangleleft;": "\\u22EA",\n    "ntrianglelefteq;": "\\u22EC",\n    "ntriangleright;": "\\u22EB",\n    "ntrianglerighteq;": "\\u22ED",\n    "Nu;": "\\u039D",\n    "nu;": "\\u03BD",\n    "num;": "\\u0023",\n    "numero;": "\\u2116",\n    "numsp;": "\\u2007",\n    "nvap;": "\\u224D\\u20D2",\n    "nVDash;": "\\u22AF",\n    "nVdash;": "\\u22AE",\n    "nvDash;": "\\u22AD",\n    "nvdash;": "\\u22AC",\n    "nvge;": "\\u2265\\u20D2",\n    "nvgt;": "\\u003E\\u20D2",\n    "nvHarr;": "\\u2904",\n    "nvinfin;": "\\u29DE",\n    "nvlArr;": "\\u2902",\n    "nvle;": "\\u2264\\u20D2",\n    "nvlt;": "\\u003C\\u20D2",\n    "nvltrie;": "\\u22B4\\u20D2",\n    "nvrArr;": "\\u2903",\n    "nvrtrie;": "\\u22B5\\u20D2",\n    "nvsim;": "\\u223C\\u20D2",\n    "nwarhk;": "\\u2923",\n    "nwArr;": "\\u21D6",\n    "nwarr;": "\\u2196",\n    "nwarrow;": "\\u2196",\n    "nwnear;": "\\u2927",\n    "Oacute;": "\\u00D3",\n    "Oacute": "\\u00D3",\n    "oacute;": "\\u00F3",\n    "oacute": "\\u00F3",\n    "oast;": "\\u229B",\n    "ocir;": "\\u229A",\n    "Ocirc;": "\\u00D4",\n    "Ocirc": "\\u00D4",\n    "ocirc;": "\\u00F4",\n    "ocirc": "\\u00F4",\n    "Ocy;": "\\u041E",\n    "ocy;": "\\u043E",\n    "odash;": "\\u229D",\n    "Odblac;": "\\u0150",\n    "odblac;": "\\u0151",\n    "odiv;": "\\u2A38",\n    "odot;": "\\u2299",\n    "odsold;": "\\u29BC",\n    "OElig;": "\\u0152",\n    "oelig;": "\\u0153",\n    "ofcir;": "\\u29BF",\n    "Ofr;": "\\uD835\\uDD12",\n    "ofr;": "\\uD835\\uDD2C",\n    "ogon;": "\\u02DB",\n    "Ograve;": "\\u00D2",\n    "Ograve": "\\u00D2",\n    "ograve;": "\\u00F2",\n    "ograve": "\\u00F2",\n    "ogt;": "\\u29C1",\n    "ohbar;": "\\u29B5",\n    "ohm;": "\\u03A9",\n    "oint;": "\\u222E",\n    "olarr;": "\\u21BA",\n    "olcir;": "\\u29BE",\n    "olcross;": "\\u29BB",\n    "oline;": "\\u203E",\n    "olt;": "\\u29C0",\n    "Omacr;": "\\u014C",\n    "omacr;": "\\u014D",\n    "Omega;": "\\u03A9",\n    "omega;": "\\u03C9",\n    "Omicron;": "\\u039F",\n    "omicron;": "\\u03BF",\n    "omid;": "\\u29B6",\n    "ominus;": "\\u2296",\n    "Oopf;": "\\uD835\\uDD46",\n    "oopf;": "\\uD835\\uDD60",\n    "opar;": "\\u29B7",\n    "OpenCurlyDoubleQuote;": "\\u201C",\n    "OpenCurlyQuote;": "\\u2018",\n    "operp;": "\\u29B9",\n    "oplus;": "\\u2295",\n    "Or;": "\\u2A54",\n    "or;": "\\u2228",\n    "orarr;": "\\u21BB",\n    "ord;": "\\u2A5D",\n    "order;": "\\u2134",\n    "orderof;": "\\u2134",\n    "ordf;": "\\u00AA",\n    "ordf": "\\u00AA",\n    "ordm;": "\\u00BA",\n    "ordm": "\\u00BA",\n    "origof;": "\\u22B6",\n    "oror;": "\\u2A56",\n    "orslope;": "\\u2A57",\n    "orv;": "\\u2A5B",\n    "oS;": "\\u24C8",\n    "Oscr;": "\\uD835\\uDCAA",\n    "oscr;": "\\u2134",\n    "Oslash;": "\\u00D8",\n    "Oslash": "\\u00D8",\n    "oslash;": "\\u00F8",\n    "oslash": "\\u00F8",\n    "osol;": "\\u2298",\n    "Otilde;": "\\u00D5",\n    "Otilde": "\\u00D5",\n    "otilde;": "\\u00F5",\n    "otilde": "\\u00F5",\n    "Otimes;": "\\u2A37",\n    "otimes;": "\\u2297",\n    "otimesas;": "\\u2A36",\n    "Ouml;": "\\u00D6",\n    "Ouml": "\\u00D6",\n    "ouml;": "\\u00F6",\n    "ouml": "\\u00F6",\n    "ovbar;": "\\u233D",\n    "OverBar;": "\\u203E",\n    "OverBrace;": "\\u23DE",\n    "OverBracket;": "\\u23B4",\n    "OverParenthesis;": "\\u23DC",\n    "par;": "\\u2225",\n    "para;": "\\u00B6",\n    "para": "\\u00B6",\n    "parallel;": "\\u2225",\n    "parsim;": "\\u2AF3",\n    "parsl;": "\\u2AFD",\n    "part;": "\\u2202",\n    "PartialD;": "\\u2202",\n    "Pcy;": "\\u041F",\n    "pcy;": "\\u043F",\n    "percnt;": "\\u0025",\n    "period;": "\\u002E",\n    "permil;": "\\u2030",\n    "perp;": "\\u22A5",\n    "pertenk;": "\\u2031",\n    "Pfr;": "\\uD835\\uDD13",\n    "pfr;": "\\uD835\\uDD2D",\n    "Phi;": "\\u03A6",\n    "phi;": "\\u03C6",\n    "phiv;": "\\u03D5",\n    "phmmat;": "\\u2133",\n    "phone;": "\\u260E",\n    "Pi;": "\\u03A0",\n    "pi;": "\\u03C0",\n    "pitchfork;": "\\u22D4",\n    "piv;": "\\u03D6",\n    "planck;": "\\u210F",\n    "planckh;": "\\u210E",\n    "plankv;": "\\u210F",\n    "plus;": "\\u002B",\n    "plusacir;": "\\u2A23",\n    "plusb;": "\\u229E",\n    "pluscir;": "\\u2A22",\n    "plusdo;": "\\u2214",\n    "plusdu;": "\\u2A25",\n    "pluse;": "\\u2A72",\n    "PlusMinus;": "\\u00B1",\n    "plusmn;": "\\u00B1",\n    "plusmn": "\\u00B1",\n    "plussim;": "\\u2A26",\n    "plustwo;": "\\u2A27",\n    "pm;": "\\u00B1",\n    "Poincareplane;": "\\u210C",\n    "pointint;": "\\u2A15",\n    "Popf;": "\\u2119",\n    "popf;": "\\uD835\\uDD61",\n    "pound;": "\\u00A3",\n    "pound": "\\u00A3",\n    "Pr;": "\\u2ABB",\n    "pr;": "\\u227A",\n    "prap;": "\\u2AB7",\n    "prcue;": "\\u227C",\n    "prE;": "\\u2AB3",\n    "pre;": "\\u2AAF",\n    "prec;": "\\u227A",\n    "precapprox;": "\\u2AB7",\n    "preccurlyeq;": "\\u227C",\n    "Precedes;": "\\u227A",\n    "PrecedesEqual;": "\\u2AAF",\n    "PrecedesSlantEqual;": "\\u227C",\n    "PrecedesTilde;": "\\u227E",\n    "preceq;": "\\u2AAF",\n    "precnapprox;": "\\u2AB9",\n    "precneqq;": "\\u2AB5",\n    "precnsim;": "\\u22E8",\n    "precsim;": "\\u227E",\n    "Prime;": "\\u2033",\n    "prime;": "\\u2032",\n    "primes;": "\\u2119",\n    "prnap;": "\\u2AB9",\n    "prnE;": "\\u2AB5",\n    "prnsim;": "\\u22E8",\n    "prod;": "\\u220F",\n    "Product;": "\\u220F",\n    "profalar;": "\\u232E",\n    "profline;": "\\u2312",\n    "profsurf;": "\\u2313",\n    "prop;": "\\u221D",\n    "Proportion;": "\\u2237",\n    "Proportional;": "\\u221D",\n    "propto;": "\\u221D",\n    "prsim;": "\\u227E",\n    "prurel;": "\\u22B0",\n    "Pscr;": "\\uD835\\uDCAB",\n    "pscr;": "\\uD835\\uDCC5",\n    "Psi;": "\\u03A8",\n    "psi;": "\\u03C8",\n    "puncsp;": "\\u2008",\n    "Qfr;": "\\uD835\\uDD14",\n    "qfr;": "\\uD835\\uDD2E",\n    "qint;": "\\u2A0C",\n    "Qopf;": "\\u211A",\n    "qopf;": "\\uD835\\uDD62",\n    "qprime;": "\\u2057",\n    "Qscr;": "\\uD835\\uDCAC",\n    "qscr;": "\\uD835\\uDCC6",\n    "quaternions;": "\\u210D",\n    "quatint;": "\\u2A16",\n    "quest;": "\\u003F",\n    "questeq;": "\\u225F",\n    "QUOT;": "\\u0022",\n    "QUOT": "\\u0022",\n    "quot;": "\\u0022",\n    "quot": "\\u0022",\n    "rAarr;": "\\u21DB",\n    "race;": "\\u223D\\u0331",\n    "Racute;": "\\u0154",\n    "racute;": "\\u0155",\n    "radic;": "\\u221A",\n    "raemptyv;": "\\u29B3",\n    "Rang;": "\\u27EB",\n    "rang;": "\\u27E9",\n    "rangd;": "\\u2992",\n    "range;": "\\u29A5",\n    "rangle;": "\\u27E9",\n    "raquo;": "\\u00BB",\n    "raquo": "\\u00BB",\n    "Rarr;": "\\u21A0",\n    "rArr;": "\\u21D2",\n    "rarr;": "\\u2192",\n    "rarrap;": "\\u2975",\n    "rarrb;": "\\u21E5",\n    "rarrbfs;": "\\u2920",\n    "rarrc;": "\\u2933",\n    "rarrfs;": "\\u291E",\n    "rarrhk;": "\\u21AA",\n    "rarrlp;": "\\u21AC",\n    "rarrpl;": "\\u2945",\n    "rarrsim;": "\\u2974",\n    "Rarrtl;": "\\u2916",\n    "rarrtl;": "\\u21A3",\n    "rarrw;": "\\u219D",\n    "rAtail;": "\\u291C",\n    "ratail;": "\\u291A",\n    "ratio;": "\\u2236",\n    "rationals;": "\\u211A",\n    "RBarr;": "\\u2910",\n    "rBarr;": "\\u290F",\n    "rbarr;": "\\u290D",\n    "rbbrk;": "\\u2773",\n    "rbrace;": "\\u007D",\n    "rbrack;": "\\u005D",\n    "rbrke;": "\\u298C",\n    "rbrksld;": "\\u298E",\n    "rbrkslu;": "\\u2990",\n    "Rcaron;": "\\u0158",\n    "rcaron;": "\\u0159",\n    "Rcedil;": "\\u0156",\n    "rcedil;": "\\u0157",\n    "rceil;": "\\u2309",\n    "rcub;": "\\u007D",\n    "Rcy;": "\\u0420",\n    "rcy;": "\\u0440",\n    "rdca;": "\\u2937",\n    "rdldhar;": "\\u2969",\n    "rdquo;": "\\u201D",\n    "rdquor;": "\\u201D",\n    "rdsh;": "\\u21B3",\n    "Re;": "\\u211C",\n    "real;": "\\u211C",\n    "realine;": "\\u211B",\n    "realpart;": "\\u211C",\n    "reals;": "\\u211D",\n    "rect;": "\\u25AD",\n    "REG;": "\\u00AE",\n    "REG": "\\u00AE",\n    "reg;": "\\u00AE",\n    "reg": "\\u00AE",\n    "ReverseElement;": "\\u220B",\n    "ReverseEquilibrium;": "\\u21CB",\n    "ReverseUpEquilibrium;": "\\u296F",\n    "rfisht;": "\\u297D",\n    "rfloor;": "\\u230B",\n    "Rfr;": "\\u211C",\n    "rfr;": "\\uD835\\uDD2F",\n    "rHar;": "\\u2964",\n    "rhard;": "\\u21C1",\n    "rharu;": "\\u21C0",\n    "rharul;": "\\u296C",\n    "Rho;": "\\u03A1",\n    "rho;": "\\u03C1",\n    "rhov;": "\\u03F1",\n    "RightAngleBracket;": "\\u27E9",\n    "RightArrow;": "\\u2192",\n    "Rightarrow;": "\\u21D2",\n    "rightarrow;": "\\u2192",\n    "RightArrowBar;": "\\u21E5",\n    "RightArrowLeftArrow;": "\\u21C4",\n    "rightarrowtail;": "\\u21A3",\n    "RightCeiling;": "\\u2309",\n    "RightDoubleBracket;": "\\u27E7",\n    "RightDownTeeVector;": "\\u295D",\n    "RightDownVector;": "\\u21C2",\n    "RightDownVectorBar;": "\\u2955",\n    "RightFloor;": "\\u230B",\n    "rightharpoondown;": "\\u21C1",\n    "rightharpoonup;": "\\u21C0",\n    "rightleftarrows;": "\\u21C4",\n    "rightleftharpoons;": "\\u21CC",\n    "rightrightarrows;": "\\u21C9",\n    "rightsquigarrow;": "\\u219D",\n    "RightTee;": "\\u22A2",\n    "RightTeeArrow;": "\\u21A6",\n    "RightTeeVector;": "\\u295B",\n    "rightthreetimes;": "\\u22CC",\n    "RightTriangle;": "\\u22B3",\n    "RightTriangleBar;": "\\u29D0",\n    "RightTriangleEqual;": "\\u22B5",\n    "RightUpDownVector;": "\\u294F",\n    "RightUpTeeVector;": "\\u295C",\n    "RightUpVector;": "\\u21BE",\n    "RightUpVectorBar;": "\\u2954",\n    "RightVector;": "\\u21C0",\n    "RightVectorBar;": "\\u2953",\n    "ring;": "\\u02DA",\n    "risingdotseq;": "\\u2253",\n    "rlarr;": "\\u21C4",\n    "rlhar;": "\\u21CC",\n    "rlm;": "\\u200F",\n    "rmoust;": "\\u23B1",\n    "rmoustache;": "\\u23B1",\n    "rnmid;": "\\u2AEE",\n    "roang;": "\\u27ED",\n    "roarr;": "\\u21FE",\n    "robrk;": "\\u27E7",\n    "ropar;": "\\u2986",\n    "Ropf;": "\\u211D",\n    "ropf;": "\\uD835\\uDD63",\n    "roplus;": "\\u2A2E",\n    "rotimes;": "\\u2A35",\n    "RoundImplies;": "\\u2970",\n    "rpar;": "\\u0029",\n    "rpargt;": "\\u2994",\n    "rppolint;": "\\u2A12",\n    "rrarr;": "\\u21C9",\n    "Rrightarrow;": "\\u21DB",\n    "rsaquo;": "\\u203A",\n    "Rscr;": "\\u211B",\n    "rscr;": "\\uD835\\uDCC7",\n    "Rsh;": "\\u21B1",\n    "rsh;": "\\u21B1",\n    "rsqb;": "\\u005D",\n    "rsquo;": "\\u2019",\n    "rsquor;": "\\u2019",\n    "rthree;": "\\u22CC",\n    "rtimes;": "\\u22CA",\n    "rtri;": "\\u25B9",\n    "rtrie;": "\\u22B5",\n    "rtrif;": "\\u25B8",\n    "rtriltri;": "\\u29CE",\n    "RuleDelayed;": "\\u29F4",\n    "ruluhar;": "\\u2968",\n    "rx;": "\\u211E",\n    "Sacute;": "\\u015A",\n    "sacute;": "\\u015B",\n    "sbquo;": "\\u201A",\n    "Sc;": "\\u2ABC",\n    "sc;": "\\u227B",\n    "scap;": "\\u2AB8",\n    "Scaron;": "\\u0160",\n    "scaron;": "\\u0161",\n    "sccue;": "\\u227D",\n    "scE;": "\\u2AB4",\n    "sce;": "\\u2AB0",\n    "Scedil;": "\\u015E",\n    "scedil;": "\\u015F",\n    "Scirc;": "\\u015C",\n    "scirc;": "\\u015D",\n    "scnap;": "\\u2ABA",\n    "scnE;": "\\u2AB6",\n    "scnsim;": "\\u22E9",\n    "scpolint;": "\\u2A13",\n    "scsim;": "\\u227F",\n    "Scy;": "\\u0421",\n    "scy;": "\\u0441",\n    "sdot;": "\\u22C5",\n    "sdotb;": "\\u22A1",\n    "sdote;": "\\u2A66",\n    "searhk;": "\\u2925",\n    "seArr;": "\\u21D8",\n    "searr;": "\\u2198",\n    "searrow;": "\\u2198",\n    "sect;": "\\u00A7",\n    "sect": "\\u00A7",\n    "semi;": "\\u003B",\n    "seswar;": "\\u2929",\n    "setminus;": "\\u2216",\n    "setmn;": "\\u2216",\n    "sext;": "\\u2736",\n    "Sfr;": "\\uD835\\uDD16",\n    "sfr;": "\\uD835\\uDD30",\n    "sfrown;": "\\u2322",\n    "sharp;": "\\u266F",\n    "SHCHcy;": "\\u0429",\n    "shchcy;": "\\u0449",\n    "SHcy;": "\\u0428",\n    "shcy;": "\\u0448",\n    "ShortDownArrow;": "\\u2193",\n    "ShortLeftArrow;": "\\u2190",\n    "shortmid;": "\\u2223",\n    "shortparallel;": "\\u2225",\n    "ShortRightArrow;": "\\u2192",\n    "ShortUpArrow;": "\\u2191",\n    "shy;": "\\u00AD",\n    "shy": "\\u00AD",\n    "Sigma;": "\\u03A3",\n    "sigma;": "\\u03C3",\n    "sigmaf;": "\\u03C2",\n    "sigmav;": "\\u03C2",\n    "sim;": "\\u223C",\n    "simdot;": "\\u2A6A",\n    "sime;": "\\u2243",\n    "simeq;": "\\u2243",\n    "simg;": "\\u2A9E",\n    "simgE;": "\\u2AA0",\n    "siml;": "\\u2A9D",\n    "simlE;": "\\u2A9F",\n    "simne;": "\\u2246",\n    "simplus;": "\\u2A24",\n    "simrarr;": "\\u2972",\n    "slarr;": "\\u2190",\n    "SmallCircle;": "\\u2218",\n    "smallsetminus;": "\\u2216",\n    "smashp;": "\\u2A33",\n    "smeparsl;": "\\u29E4",\n    "smid;": "\\u2223",\n    "smile;": "\\u2323",\n    "smt;": "\\u2AAA",\n    "smte;": "\\u2AAC",\n    "smtes;": "\\u2AAC\\uFE00",\n    "SOFTcy;": "\\u042C",\n    "softcy;": "\\u044C",\n    "sol;": "\\u002F",\n    "solb;": "\\u29C4",\n    "solbar;": "\\u233F",\n    "Sopf;": "\\uD835\\uDD4A",\n    "sopf;": "\\uD835\\uDD64",\n    "spades;": "\\u2660",\n    "spadesuit;": "\\u2660",\n    "spar;": "\\u2225",\n    "sqcap;": "\\u2293",\n    "sqcaps;": "\\u2293\\uFE00",\n    "sqcup;": "\\u2294",\n    "sqcups;": "\\u2294\\uFE00",\n    "Sqrt;": "\\u221A",\n    "sqsub;": "\\u228F",\n    "sqsube;": "\\u2291",\n    "sqsubset;": "\\u228F",\n    "sqsubseteq;": "\\u2291",\n    "sqsup;": "\\u2290",\n    "sqsupe;": "\\u2292",\n    "sqsupset;": "\\u2290",\n    "sqsupseteq;": "\\u2292",\n    "squ;": "\\u25A1",\n    "Square;": "\\u25A1",\n    "square;": "\\u25A1",\n    "SquareIntersection;": "\\u2293",\n    "SquareSubset;": "\\u228F",\n    "SquareSubsetEqual;": "\\u2291",\n    "SquareSuperset;": "\\u2290",\n    "SquareSupersetEqual;": "\\u2292",\n    "SquareUnion;": "\\u2294",\n    "squarf;": "\\u25AA",\n    "squf;": "\\u25AA",\n    "srarr;": "\\u2192",\n    "Sscr;": "\\uD835\\uDCAE",\n    "sscr;": "\\uD835\\uDCC8",\n    "ssetmn;": "\\u2216",\n    "ssmile;": "\\u2323",\n    "sstarf;": "\\u22C6",\n    "Star;": "\\u22C6",\n    "star;": "\\u2606",\n    "starf;": "\\u2605",\n    "straightepsilon;": "\\u03F5",\n    "straightphi;": "\\u03D5",\n    "strns;": "\\u00AF",\n    "Sub;": "\\u22D0",\n    "sub;": "\\u2282",\n    "subdot;": "\\u2ABD",\n    "subE;": "\\u2AC5",\n    "sube;": "\\u2286",\n    "subedot;": "\\u2AC3",\n    "submult;": "\\u2AC1",\n    "subnE;": "\\u2ACB",\n    "subne;": "\\u228A",\n    "subplus;": "\\u2ABF",\n    "subrarr;": "\\u2979",\n    "Subset;": "\\u22D0",\n    "subset;": "\\u2282",\n    "subseteq;": "\\u2286",\n    "subseteqq;": "\\u2AC5",\n    "SubsetEqual;": "\\u2286",\n    "subsetneq;": "\\u228A",\n    "subsetneqq;": "\\u2ACB",\n    "subsim;": "\\u2AC7",\n    "subsub;": "\\u2AD5",\n    "subsup;": "\\u2AD3",\n    "succ;": "\\u227B",\n    "succapprox;": "\\u2AB8",\n    "succcurlyeq;": "\\u227D",\n    "Succeeds;": "\\u227B",\n    "SucceedsEqual;": "\\u2AB0",\n    "SucceedsSlantEqual;": "\\u227D",\n    "SucceedsTilde;": "\\u227F",\n    "succeq;": "\\u2AB0",\n    "succnapprox;": "\\u2ABA",\n    "succneqq;": "\\u2AB6",\n    "succnsim;": "\\u22E9",\n    "succsim;": "\\u227F",\n    "SuchThat;": "\\u220B",\n    "Sum;": "\\u2211",\n    "sum;": "\\u2211",\n    "sung;": "\\u266A",\n    "Sup;": "\\u22D1",\n    "sup;": "\\u2283",\n    "sup1;": "\\u00B9",\n    "sup1": "\\u00B9",\n    "sup2;": "\\u00B2",\n    "sup2": "\\u00B2",\n    "sup3;": "\\u00B3",\n    "sup3": "\\u00B3",\n    "supdot;": "\\u2ABE",\n    "supdsub;": "\\u2AD8",\n    "supE;": "\\u2AC6",\n    "supe;": "\\u2287",\n    "supedot;": "\\u2AC4",\n    "Superset;": "\\u2283",\n    "SupersetEqual;": "\\u2287",\n    "suphsol;": "\\u27C9",\n    "suphsub;": "\\u2AD7",\n    "suplarr;": "\\u297B",\n    "supmult;": "\\u2AC2",\n    "supnE;": "\\u2ACC",\n    "supne;": "\\u228B",\n    "supplus;": "\\u2AC0",\n    "Supset;": "\\u22D1",\n    "supset;": "\\u2283",\n    "supseteq;": "\\u2287",\n    "supseteqq;": "\\u2AC6",\n    "supsetneq;": "\\u228B",\n    "supsetneqq;": "\\u2ACC",\n    "supsim;": "\\u2AC8",\n    "supsub;": "\\u2AD4",\n    "supsup;": "\\u2AD6",\n    "swarhk;": "\\u2926",\n    "swArr;": "\\u21D9",\n    "swarr;": "\\u2199",\n    "swarrow;": "\\u2199",\n    "swnwar;": "\\u292A",\n    "szlig;": "\\u00DF",\n    "szlig": "\\u00DF",\n    "Tab;": "\\u0009",\n    "target;": "\\u2316",\n    "Tau;": "\\u03A4",\n    "tau;": "\\u03C4",\n    "tbrk;": "\\u23B4",\n    "Tcaron;": "\\u0164",\n    "tcaron;": "\\u0165",\n    "Tcedil;": "\\u0162",\n    "tcedil;": "\\u0163",\n    "Tcy;": "\\u0422",\n    "tcy;": "\\u0442",\n    "tdot;": "\\u20DB",\n    "telrec;": "\\u2315",\n    "Tfr;": "\\uD835\\uDD17",\n    "tfr;": "\\uD835\\uDD31",\n    "there4;": "\\u2234",\n    "Therefore;": "\\u2234",\n    "therefore;": "\\u2234",\n    "Theta;": "\\u0398",\n    "theta;": "\\u03B8",\n    "thetasym;": "\\u03D1",\n    "thetav;": "\\u03D1",\n    "thickapprox;": "\\u2248",\n    "thicksim;": "\\u223C",\n    "ThickSpace;": "\\u205F\\u200A",\n    "thinsp;": "\\u2009",\n    "ThinSpace;": "\\u2009",\n    "thkap;": "\\u2248",\n    "thksim;": "\\u223C",\n    "THORN;": "\\u00DE",\n    "THORN": "\\u00DE",\n    "thorn;": "\\u00FE",\n    "thorn": "\\u00FE",\n    "Tilde;": "\\u223C",\n    "tilde;": "\\u02DC",\n    "TildeEqual;": "\\u2243",\n    "TildeFullEqual;": "\\u2245",\n    "TildeTilde;": "\\u2248",\n    "times;": "\\u00D7",\n    "times": "\\u00D7",\n    "timesb;": "\\u22A0",\n    "timesbar;": "\\u2A31",\n    "timesd;": "\\u2A30",\n    "tint;": "\\u222D",\n    "toea;": "\\u2928",\n    "top;": "\\u22A4",\n    "topbot;": "\\u2336",\n    "topcir;": "\\u2AF1",\n    "Topf;": "\\uD835\\uDD4B",\n    "topf;": "\\uD835\\uDD65",\n    "topfork;": "\\u2ADA",\n    "tosa;": "\\u2929",\n    "tprime;": "\\u2034",\n    "TRADE;": "\\u2122",\n    "trade;": "\\u2122",\n    "triangle;": "\\u25B5",\n    "triangledown;": "\\u25BF",\n    "triangleleft;": "\\u25C3",\n    "trianglelefteq;": "\\u22B4",\n    "triangleq;": "\\u225C",\n    "triangleright;": "\\u25B9",\n    "trianglerighteq;": "\\u22B5",\n    "tridot;": "\\u25EC",\n    "trie;": "\\u225C",\n    "triminus;": "\\u2A3A",\n    "TripleDot;": "\\u20DB",\n    "triplus;": "\\u2A39",\n    "trisb;": "\\u29CD",\n    "tritime;": "\\u2A3B",\n    "trpezium;": "\\u23E2",\n    "Tscr;": "\\uD835\\uDCAF",\n    "tscr;": "\\uD835\\uDCC9",\n    "TScy;": "\\u0426",\n    "tscy;": "\\u0446",\n    "TSHcy;": "\\u040B",\n    "tshcy;": "\\u045B",\n    "Tstrok;": "\\u0166",\n    "tstrok;": "\\u0167",\n    "twixt;": "\\u226C",\n    "twoheadleftarrow;": "\\u219E",\n    "twoheadrightarrow;": "\\u21A0",\n    "Uacute;": "\\u00DA",\n    "Uacute": "\\u00DA",\n    "uacute;": "\\u00FA",\n    "uacute": "\\u00FA",\n    "Uarr;": "\\u219F",\n    "uArr;": "\\u21D1",\n    "uarr;": "\\u2191",\n    "Uarrocir;": "\\u2949",\n    "Ubrcy;": "\\u040E",\n    "ubrcy;": "\\u045E",\n    "Ubreve;": "\\u016C",\n    "ubreve;": "\\u016D",\n    "Ucirc;": "\\u00DB",\n    "Ucirc": "\\u00DB",\n    "ucirc;": "\\u00FB",\n    "ucirc": "\\u00FB",\n    "Ucy;": "\\u0423",\n    "ucy;": "\\u0443",\n    "udarr;": "\\u21C5",\n    "Udblac;": "\\u0170",\n    "udblac;": "\\u0171",\n    "udhar;": "\\u296E",\n    "ufisht;": "\\u297E",\n    "Ufr;": "\\uD835\\uDD18",\n    "ufr;": "\\uD835\\uDD32",\n    "Ugrave;": "\\u00D9",\n    "Ugrave": "\\u00D9",\n    "ugrave;": "\\u00F9",\n    "ugrave": "\\u00F9",\n    "uHar;": "\\u2963",\n    "uharl;": "\\u21BF",\n    "uharr;": "\\u21BE",\n    "uhblk;": "\\u2580",\n    "ulcorn;": "\\u231C",\n    "ulcorner;": "\\u231C",\n    "ulcrop;": "\\u230F",\n    "ultri;": "\\u25F8",\n    "Umacr;": "\\u016A",\n    "umacr;": "\\u016B",\n    "uml;": "\\u00A8",\n    "uml": "\\u00A8",\n    "UnderBar;": "\\u005F",\n    "UnderBrace;": "\\u23DF",\n    "UnderBracket;": "\\u23B5",\n    "UnderParenthesis;": "\\u23DD",\n    "Union;": "\\u22C3",\n    "UnionPlus;": "\\u228E",\n    "Uogon;": "\\u0172",\n    "uogon;": "\\u0173",\n    "Uopf;": "\\uD835\\uDD4C",\n    "uopf;": "\\uD835\\uDD66",\n    "UpArrow;": "\\u2191",\n    "Uparrow;": "\\u21D1",\n    "uparrow;": "\\u2191",\n    "UpArrowBar;": "\\u2912",\n    "UpArrowDownArrow;": "\\u21C5",\n    "UpDownArrow;": "\\u2195",\n    "Updownarrow;": "\\u21D5",\n    "updownarrow;": "\\u2195",\n    "UpEquilibrium;": "\\u296E",\n    "upharpoonleft;": "\\u21BF",\n    "upharpoonright;": "\\u21BE",\n    "uplus;": "\\u228E",\n    "UpperLeftArrow;": "\\u2196",\n    "UpperRightArrow;": "\\u2197",\n    "Upsi;": "\\u03D2",\n    "upsi;": "\\u03C5",\n    "upsih;": "\\u03D2",\n    "Upsilon;": "\\u03A5",\n    "upsilon;": "\\u03C5",\n    "UpTee;": "\\u22A5",\n    "UpTeeArrow;": "\\u21A5",\n    "upuparrows;": "\\u21C8",\n    "urcorn;": "\\u231D",\n    "urcorner;": "\\u231D",\n    "urcrop;": "\\u230E",\n    "Uring;": "\\u016E",\n    "uring;": "\\u016F",\n    "urtri;": "\\u25F9",\n    "Uscr;": "\\uD835\\uDCB0",\n    "uscr;": "\\uD835\\uDCCA",\n    "utdot;": "\\u22F0",\n    "Utilde;": "\\u0168",\n    "utilde;": "\\u0169",\n    "utri;": "\\u25B5",\n    "utrif;": "\\u25B4",\n    "uuarr;": "\\u21C8",\n    "Uuml;": "\\u00DC",\n    "Uuml": "\\u00DC",\n    "uuml;": "\\u00FC",\n    "uuml": "\\u00FC",\n    "uwangle;": "\\u29A7",\n    "vangrt;": "\\u299C",\n    "varepsilon;": "\\u03F5",\n    "varkappa;": "\\u03F0",\n    "varnothing;": "\\u2205",\n    "varphi;": "\\u03D5",\n    "varpi;": "\\u03D6",\n    "varpropto;": "\\u221D",\n    "vArr;": "\\u21D5",\n    "varr;": "\\u2195",\n    "varrho;": "\\u03F1",\n    "varsigma;": "\\u03C2",\n    "varsubsetneq;": "\\u228A\\uFE00",\n    "varsubsetneqq;": "\\u2ACB\\uFE00",\n    "varsupsetneq;": "\\u228B\\uFE00",\n    "varsupsetneqq;": "\\u2ACC\\uFE00",\n    "vartheta;": "\\u03D1",\n    "vartriangleleft;": "\\u22B2",\n    "vartriangleright;": "\\u22B3",\n    "Vbar;": "\\u2AEB",\n    "vBar;": "\\u2AE8",\n    "vBarv;": "\\u2AE9",\n    "Vcy;": "\\u0412",\n    "vcy;": "\\u0432",\n    "VDash;": "\\u22AB",\n    "Vdash;": "\\u22A9",\n    "vDash;": "\\u22A8",\n    "vdash;": "\\u22A2",\n    "Vdashl;": "\\u2AE6",\n    "Vee;": "\\u22C1",\n    "vee;": "\\u2228",\n    "veebar;": "\\u22BB",\n    "veeeq;": "\\u225A",\n    "vellip;": "\\u22EE",\n    "Verbar;": "\\u2016",\n    "verbar;": "\\u007C",\n    "Vert;": "\\u2016",\n    "vert;": "\\u007C",\n    "VerticalBar;": "\\u2223",\n    "VerticalLine;": "\\u007C",\n    "VerticalSeparator;": "\\u2758",\n    "VerticalTilde;": "\\u2240",\n    "VeryThinSpace;": "\\u200A",\n    "Vfr;": "\\uD835\\uDD19",\n    "vfr;": "\\uD835\\uDD33",\n    "vltri;": "\\u22B2",\n    "vnsub;": "\\u2282\\u20D2",\n    "vnsup;": "\\u2283\\u20D2",\n    "Vopf;": "\\uD835\\uDD4D",\n    "vopf;": "\\uD835\\uDD67",\n    "vprop;": "\\u221D",\n    "vrtri;": "\\u22B3",\n    "Vscr;": "\\uD835\\uDCB1",\n    "vscr;": "\\uD835\\uDCCB",\n    "vsubnE;": "\\u2ACB\\uFE00",\n    "vsubne;": "\\u228A\\uFE00",\n    "vsupnE;": "\\u2ACC\\uFE00",\n    "vsupne;": "\\u228B\\uFE00",\n    "Vvdash;": "\\u22AA",\n    "vzigzag;": "\\u299A",\n    "Wcirc;": "\\u0174",\n    "wcirc;": "\\u0175",\n    "wedbar;": "\\u2A5F",\n    "Wedge;": "\\u22C0",\n    "wedge;": "\\u2227",\n    "wedgeq;": "\\u2259",\n    "weierp;": "\\u2118",\n    "Wfr;": "\\uD835\\uDD1A",\n    "wfr;": "\\uD835\\uDD34",\n    "Wopf;": "\\uD835\\uDD4E",\n    "wopf;": "\\uD835\\uDD68",\n    "wp;": "\\u2118",\n    "wr;": "\\u2240",\n    "wreath;": "\\u2240",\n    "Wscr;": "\\uD835\\uDCB2",\n    "wscr;": "\\uD835\\uDCCC",\n    "xcap;": "\\u22C2",\n    "xcirc;": "\\u25EF",\n    "xcup;": "\\u22C3",\n    "xdtri;": "\\u25BD",\n    "Xfr;": "\\uD835\\uDD1B",\n    "xfr;": "\\uD835\\uDD35",\n    "xhArr;": "\\u27FA",\n    "xharr;": "\\u27F7",\n    "Xi;": "\\u039E",\n    "xi;": "\\u03BE",\n    "xlArr;": "\\u27F8",\n    "xlarr;": "\\u27F5",\n    "xmap;": "\\u27FC",\n    "xnis;": "\\u22FB",\n    "xodot;": "\\u2A00",\n    "Xopf;": "\\uD835\\uDD4F",\n    "xopf;": "\\uD835\\uDD69",\n    "xoplus;": "\\u2A01",\n    "xotime;": "\\u2A02",\n    "xrArr;": "\\u27F9",\n    "xrarr;": "\\u27F6",\n    "Xscr;": "\\uD835\\uDCB3",\n    "xscr;": "\\uD835\\uDCCD",\n    "xsqcup;": "\\u2A06",\n    "xuplus;": "\\u2A04",\n    "xutri;": "\\u25B3",\n    "xvee;": "\\u22C1",\n    "xwedge;": "\\u22C0",\n    "Yacute;": "\\u00DD",\n    "Yacute": "\\u00DD",\n    "yacute;": "\\u00FD",\n    "yacute": "\\u00FD",\n    "YAcy;": "\\u042F",\n    "yacy;": "\\u044F",\n    "Ycirc;": "\\u0176",\n    "ycirc;": "\\u0177",\n    "Ycy;": "\\u042B",\n    "ycy;": "\\u044B",\n    "yen;": "\\u00A5",\n    "yen": "\\u00A5",\n    "Yfr;": "\\uD835\\uDD1C",\n    "yfr;": "\\uD835\\uDD36",\n    "YIcy;": "\\u0407",\n    "yicy;": "\\u0457",\n    "Yopf;": "\\uD835\\uDD50",\n    "yopf;": "\\uD835\\uDD6A",\n    "Yscr;": "\\uD835\\uDCB4",\n    "yscr;": "\\uD835\\uDCCE",\n    "YUcy;": "\\u042E",\n    "yucy;": "\\u044E",\n    "Yuml;": "\\u0178",\n    "yuml;": "\\u00FF",\n    "yuml": "\\u00FF",\n    "Zacute;": "\\u0179",\n    "zacute;": "\\u017A",\n    "Zcaron;": "\\u017D",\n    "zcaron;": "\\u017E",\n    "Zcy;": "\\u0417",\n    "zcy;": "\\u0437",\n    "Zdot;": "\\u017B",\n    "zdot;": "\\u017C",\n    "zeetrf;": "\\u2128",\n    "ZeroWidthSpace;": "\\u200B",\n    "Zeta;": "\\u0396",\n    "zeta;": "\\u03B6",\n    "Zfr;": "\\u2128",\n    "zfr;": "\\uD835\\uDD37",\n    "ZHcy;": "\\u0416",\n    "zhcy;": "\\u0436",\n    "zigrarr;": "\\u21DD",\n    "Zopf;": "\\u2124",\n    "zopf;": "\\uD835\\uDD6B",\n    "Zscr;": "\\uD835\\uDCB5",\n    "zscr;": "\\uD835\\uDCCF",\n    "zwj;": "\\u200D",\n    "zwnj;": "\\u200C"\n};\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/strings.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction startsWith(haystack, needle) {\n    if (haystack.length < needle.length) {\n        return false;\n    }\n    for (var i = 0; i < needle.length; i++) {\n        if (haystack[i] !== needle[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\nfunction endsWith(haystack, needle) {\n    var diff = haystack.length - needle.length;\n    if (diff > 0) {\n        return haystack.lastIndexOf(needle) === diff;\n    }\n    else if (diff === 0) {\n        return haystack === needle;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * @returns the length of the common prefix of the two strings.\n */\nfunction strings_commonPrefixLength(a, b) {\n    var i;\n    var len = Math.min(a.length, b.length);\n    for (i = 0; i < len; i++) {\n        if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n            return i;\n        }\n    }\n    return len;\n}\nfunction repeat(value, count) {\n    var s = \'\';\n    while (count > 0) {\n        if ((count & 1) === 1) {\n            s += value;\n        }\n        value += value;\n        count = count >>> 1;\n    }\n    return s;\n}\nvar strings_a = \'a\'.charCodeAt(0);\nvar _z = \'z\'.charCodeAt(0);\nvar _A = \'A\'.charCodeAt(0);\nvar _Z = \'Z\'.charCodeAt(0);\nvar _0 = \'0\'.charCodeAt(0);\nvar _9 = \'9\'.charCodeAt(0);\nfunction isLetterOrDigit(text, index) {\n    var c = text.charCodeAt(index);\n    return (strings_a <= c && c <= _z) || (_A <= c && c <= _Z) || (_0 <= c && c <= _9);\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/object.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction isDefined(obj) {\n    return typeof obj !== \'undefined\';\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/utils/markup.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction normalizeMarkupContent(input) {\n    if (!input) {\n        return undefined;\n    }\n    if (typeof input === \'string\') {\n        return {\n            kind: \'markdown\',\n            value: input\n        };\n    }\n    return {\n        kind: \'markdown\',\n        value: input.value\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/languageFacts/dataProvider.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nvar dataProvider_HTMLDataProvider = /** @class */ (function () {\n    /**\n     * Currently, unversioned data uses the V1 implementation\n     * In the future when the provider handles multiple versions of HTML custom data,\n     * use the latest implementation for unversioned data\n     */\n    function HTMLDataProvider(id, customData) {\n        var _this = this;\n        this.id = id;\n        this._tags = [];\n        this._tagMap = {};\n        this._valueSetMap = {};\n        this._tags = customData.tags || [];\n        this._globalAttributes = customData.globalAttributes || [];\n        this._tags.forEach(function (t) {\n            _this._tagMap[t.name.toLowerCase()] = t;\n        });\n        if (customData.valueSets) {\n            customData.valueSets.forEach(function (vs) {\n                _this._valueSetMap[vs.name] = vs.values;\n            });\n        }\n    }\n    HTMLDataProvider.prototype.isApplicable = function () {\n        return true;\n    };\n    HTMLDataProvider.prototype.getId = function () {\n        return this.id;\n    };\n    HTMLDataProvider.prototype.provideTags = function () {\n        return this._tags;\n    };\n    HTMLDataProvider.prototype.provideAttributes = function (tag) {\n        var attributes = [];\n        var processAttribute = function (a) {\n            attributes.push(a);\n        };\n        var tagEntry = this._tagMap[tag.toLowerCase()];\n        if (tagEntry) {\n            tagEntry.attributes.forEach(processAttribute);\n        }\n        this._globalAttributes.forEach(processAttribute);\n        return attributes;\n    };\n    HTMLDataProvider.prototype.provideValues = function (tag, attribute) {\n        var _this = this;\n        var values = [];\n        attribute = attribute.toLowerCase();\n        var processAttributes = function (attributes) {\n            attributes.forEach(function (a) {\n                if (a.name.toLowerCase() === attribute) {\n                    if (a.values) {\n                        a.values.forEach(function (v) {\n                            values.push(v);\n                        });\n                    }\n                    if (a.valueSet) {\n                        if (_this._valueSetMap[a.valueSet]) {\n                            _this._valueSetMap[a.valueSet].forEach(function (v) {\n                                values.push(v);\n                            });\n                        }\n                    }\n                }\n            });\n        };\n        var tagEntry = this._tagMap[tag.toLowerCase()];\n        if (!tagEntry) {\n            return [];\n        }\n        processAttributes(tagEntry.attributes);\n        processAttributes(this._globalAttributes);\n        return values;\n    };\n    return HTMLDataProvider;\n}());\n\n/**\n * Generate Documentation used in hover/complete\n * From `documentation` and `references`\n */\nfunction generateDocumentation(item, settings, doesSupportMarkdown) {\n    if (settings === void 0) { settings = {}; }\n    var result = {\n        kind: doesSupportMarkdown ? \'markdown\' : \'plaintext\',\n        value: \'\'\n    };\n    if (item.description && settings.documentation !== false) {\n        var normalizedDescription = normalizeMarkupContent(item.description);\n        if (normalizedDescription) {\n            result.value += normalizedDescription.value;\n        }\n    }\n    if (item.references && item.references.length > 0 && settings.references !== false) {\n        if (result.value.length) {\n            result.value += "\\n\\n";\n        }\n        if (doesSupportMarkdown) {\n            result.value += item.references.map(function (r) {\n                return "[" + r.name + "](" + r.url + ")";\n            }).join(\' | \');\n        }\n        else {\n            result.value += item.references.map(function (r) {\n                return r.name + ": " + r.url;\n            }).join(\'\\n\');\n        }\n    }\n    if (result.value === \'\') {\n        return undefined;\n    }\n    return result;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/pathCompletion.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar pathCompletion_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\nvar PathCompletionParticipant = /** @class */ (function () {\n    function PathCompletionParticipant(readDirectory) {\n        this.readDirectory = readDirectory;\n        this.atributeCompletions = [];\n    }\n    PathCompletionParticipant.prototype.onHtmlAttributeValue = function (context) {\n        if (isPathAttribute(context.tag, context.attribute)) {\n            this.atributeCompletions.push(context);\n        }\n    };\n    PathCompletionParticipant.prototype.computeCompletions = function (document, documentContext) {\n        return pathCompletion_awaiter(this, void 0, void 0, function () {\n            var result, _i, _a, attributeCompletion, fullValue, replaceRange, suggestions, _b, suggestions_1, item;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        result = { items: [], isIncomplete: false };\n                        _i = 0, _a = this.atributeCompletions;\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 5];\n                        attributeCompletion = _a[_i];\n                        fullValue = stripQuotes(document.getText(attributeCompletion.range));\n                        if (!isCompletablePath(fullValue)) return [3 /*break*/, 4];\n                        if (!(fullValue === \'.\' || fullValue === \'..\')) return [3 /*break*/, 2];\n                        result.isIncomplete = true;\n                        return [3 /*break*/, 4];\n                    case 2:\n                        replaceRange = pathToReplaceRange(attributeCompletion.value, fullValue, attributeCompletion.range);\n                        return [4 /*yield*/, this.providePathSuggestions(attributeCompletion.value, replaceRange, document, documentContext)];\n                    case 3:\n                        suggestions = _c.sent();\n                        for (_b = 0, suggestions_1 = suggestions; _b < suggestions_1.length; _b++) {\n                            item = suggestions_1[_b];\n                            result.items.push(item);\n                        }\n                        _c.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 5: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    PathCompletionParticipant.prototype.providePathSuggestions = function (valueBeforeCursor, replaceRange, document, documentContext) {\n        return pathCompletion_awaiter(this, void 0, void 0, function () {\n            var valueBeforeLastSlash, parentDir, result, infos, _i, infos_1, _a, name, type, e_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        valueBeforeLastSlash = valueBeforeCursor.substring(0, valueBeforeCursor.lastIndexOf(\'/\') + 1);\n                        parentDir = documentContext.resolveReference(valueBeforeLastSlash || \'.\', document.uri);\n                        if (!parentDir) return [3 /*break*/, 4];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        result = [];\n                        return [4 /*yield*/, this.readDirectory(parentDir)];\n                    case 2:\n                        infos = _b.sent();\n                        for (_i = 0, infos_1 = infos; _i < infos_1.length; _i++) {\n                            _a = infos_1[_i], name = _a[0], type = _a[1];\n                            // Exclude paths that start with `.`\n                            if (name.charCodeAt(0) !== CharCode_dot) {\n                                result.push(createCompletionItem(name, type === FileType.Directory, replaceRange));\n                            }\n                        }\n                        return [2 /*return*/, result];\n                    case 3:\n                        e_1 = _b.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/, []];\n                }\n            });\n        });\n    };\n    return PathCompletionParticipant;\n}());\n\nvar CharCode_dot = \'.\'.charCodeAt(0);\nfunction stripQuotes(fullValue) {\n    if (startsWith(fullValue, "\'") || startsWith(fullValue, "\\"")) {\n        return fullValue.slice(1, -1);\n    }\n    else {\n        return fullValue;\n    }\n}\nfunction isCompletablePath(value) {\n    if (startsWith(value, \'http\') || startsWith(value, \'https\') || startsWith(value, \'//\')) {\n        return false;\n    }\n    return true;\n}\nfunction isPathAttribute(tag, attr) {\n    var a = PATH_TAG_AND_ATTR[tag];\n    if (a) {\n        if (typeof a === \'string\') {\n            return a === attr;\n        }\n        else {\n            return a.indexOf(attr) !== -1;\n        }\n    }\n    return false;\n}\nfunction pathToReplaceRange(valueBeforeCursor, fullValue, range) {\n    var replaceRange;\n    var lastIndexOfSlash = valueBeforeCursor.lastIndexOf(\'/\');\n    if (lastIndexOfSlash === -1) {\n        replaceRange = shiftRange(range, 1, -1);\n    }\n    else {\n        // For cases where cursor is in the middle of attribute value, like <script src="./s|rc/test.js">\n        // Find the last slash before cursor, and calculate the start of replace range from there\n        var valueAfterLastSlash = fullValue.slice(lastIndexOfSlash + 1);\n        var startPos = shiftPosition(range.end, -1 - valueAfterLastSlash.length);\n        // If whitespace exists, replace until there is no more\n        var whitespaceIndex = valueAfterLastSlash.indexOf(\' \');\n        var endPos = void 0;\n        if (whitespaceIndex !== -1) {\n            endPos = shiftPosition(startPos, whitespaceIndex);\n        }\n        else {\n            endPos = shiftPosition(range.end, -1);\n        }\n        replaceRange = main_Range.create(startPos, endPos);\n    }\n    return replaceRange;\n}\nfunction createCompletionItem(p, isDir, replaceRange) {\n    if (isDir) {\n        p = p + \'/\';\n        return {\n            label: p,\n            kind: main_CompletionItemKind.Folder,\n            textEdit: TextEdit.replace(replaceRange, p),\n            command: {\n                title: \'Suggest\',\n                command: \'editor.action.triggerSuggest\'\n            }\n        };\n    }\n    else {\n        return {\n            label: p,\n            kind: main_CompletionItemKind.File,\n            textEdit: TextEdit.replace(replaceRange, p)\n        };\n    }\n}\nfunction shiftPosition(pos, offset) {\n    return main_Position.create(pos.line, pos.character + offset);\n}\nfunction shiftRange(range, startOffset, endOffset) {\n    var start = shiftPosition(range.start, startOffset);\n    var end = shiftPosition(range.end, endOffset);\n    return main_Range.create(start, end);\n}\n// Selected from https://stackoverflow.com/a/2725168/1780148\nvar PATH_TAG_AND_ATTR = {\n    // HTML 4\n    a: \'href\',\n    area: \'href\',\n    body: \'background\',\n    del: \'cite\',\n    form: \'action\',\n    frame: [\'src\', \'longdesc\'],\n    img: [\'src\', \'longdesc\'],\n    ins: \'cite\',\n    link: \'href\',\n    object: \'data\',\n    q: \'cite\',\n    script: \'src\',\n    // HTML 5\n    audio: \'src\',\n    button: \'formaction\',\n    command: \'icon\',\n    embed: \'src\',\n    html: \'manifest\',\n    input: [\'src\', \'formaction\'],\n    source: \'src\',\n    track: \'src\',\n    video: [\'src\', \'poster\']\n};\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlCompletion.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar htmlCompletion_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar htmlCompletion_generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n\n\n\nvar htmlCompletion_localize = loadMessageBundle();\nvar HTMLCompletion = /** @class */ (function () {\n    function HTMLCompletion(lsOptions, dataManager) {\n        this.lsOptions = lsOptions;\n        this.dataManager = dataManager;\n        this.completionParticipants = [];\n    }\n    HTMLCompletion.prototype.setCompletionParticipants = function (registeredCompletionParticipants) {\n        this.completionParticipants = registeredCompletionParticipants || [];\n    };\n    HTMLCompletion.prototype.doComplete2 = function (document, position, htmlDocument, documentContext, settings) {\n        return htmlCompletion_awaiter(this, void 0, void 0, function () {\n            var participant, contributedParticipants, result, pathCompletionResult;\n            return htmlCompletion_generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.lsOptions.fileSystemProvider || !this.lsOptions.fileSystemProvider.readDirectory) {\n                            return [2 /*return*/, this.doComplete(document, position, htmlDocument, settings)];\n                        }\n                        participant = new PathCompletionParticipant(this.lsOptions.fileSystemProvider.readDirectory);\n                        contributedParticipants = this.completionParticipants;\n                        this.completionParticipants = [participant].concat(contributedParticipants);\n                        result = this.doComplete(document, position, htmlDocument, settings);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 4]);\n                        return [4 /*yield*/, participant.computeCompletions(document, documentContext)];\n                    case 2:\n                        pathCompletionResult = _a.sent();\n                        return [2 /*return*/, {\n                                isIncomplete: result.isIncomplete || pathCompletionResult.isIncomplete,\n                                items: pathCompletionResult.items.concat(result.items)\n                            }];\n                    case 3:\n                        this.completionParticipants = contributedParticipants;\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    HTMLCompletion.prototype.doComplete = function (document, position, htmlDocument, settings) {\n        var result = this._doComplete(document, position, htmlDocument, settings);\n        return this.convertCompletionList(result);\n    };\n    HTMLCompletion.prototype._doComplete = function (document, position, htmlDocument, settings) {\n        var result = {\n            isIncomplete: false,\n            items: []\n        };\n        var completionParticipants = this.completionParticipants;\n        var dataProviders = this.dataManager.getDataProviders().filter(function (p) { return p.isApplicable(document.languageId) && (!settings || settings[p.getId()] !== false); });\n        var doesSupportMarkdown = this.doesSupportMarkdown();\n        var text = document.getText();\n        var offset = document.offsetAt(position);\n        var node = htmlDocument.findNodeBefore(offset);\n        if (!node) {\n            return result;\n        }\n        var scanner = createScanner(text, node.start);\n        var currentTag = \'\';\n        var currentAttributeName;\n        function getReplaceRange(replaceStart, replaceEnd) {\n            if (replaceEnd === void 0) { replaceEnd = offset; }\n            if (replaceStart > offset) {\n                replaceStart = offset;\n            }\n            return { start: document.positionAt(replaceStart), end: document.positionAt(replaceEnd) };\n        }\n        function collectOpenTagSuggestions(afterOpenBracket, tagNameEnd) {\n            var range = getReplaceRange(afterOpenBracket, tagNameEnd);\n            dataProviders.forEach(function (provider) {\n                provider.provideTags().forEach(function (tag) {\n                    result.items.push({\n                        label: tag.name,\n                        kind: main_CompletionItemKind.Property,\n                        documentation: generateDocumentation(tag, undefined, doesSupportMarkdown),\n                        textEdit: TextEdit.replace(range, tag.name),\n                        insertTextFormat: InsertTextFormat.PlainText\n                    });\n                });\n            });\n            return result;\n        }\n        function getLineIndent(offset) {\n            var start = offset;\n            while (start > 0) {\n                var ch = text.charAt(start - 1);\n                if ("\\n\\r".indexOf(ch) >= 0) {\n                    return text.substring(start, offset);\n                }\n                if (!isWhiteSpace(ch)) {\n                    return null;\n                }\n                start--;\n            }\n            return text.substring(0, offset);\n        }\n        function collectCloseTagSuggestions(afterOpenBracket, inOpenTag, tagNameEnd) {\n            if (tagNameEnd === void 0) { tagNameEnd = offset; }\n            var range = getReplaceRange(afterOpenBracket, tagNameEnd);\n            var closeTag = isFollowedBy(text, tagNameEnd, ScannerState.WithinEndTag, TokenType.EndTagClose) ? \'\' : \'>\';\n            var curr = node;\n            if (inOpenTag) {\n                curr = curr.parent; // don\'t suggest the own tag, it\'s not yet open\n            }\n            while (curr) {\n                var tag = curr.tag;\n                if (tag && (!curr.closed || curr.endTagStart && (curr.endTagStart > offset))) {\n                    var item = {\n                        label: \'/\' + tag,\n                        kind: main_CompletionItemKind.Property,\n                        filterText: \'/\' + tag,\n                        textEdit: TextEdit.replace(range, \'/\' + tag + closeTag),\n                        insertTextFormat: InsertTextFormat.PlainText\n                    };\n                    var startIndent = getLineIndent(curr.start);\n                    var endIndent = getLineIndent(afterOpenBracket - 1);\n                    if (startIndent !== null && endIndent !== null && startIndent !== endIndent) {\n                        var insertText = startIndent + \'</\' + tag + closeTag;\n                        item.textEdit = TextEdit.replace(getReplaceRange(afterOpenBracket - 1 - endIndent.length), insertText);\n                        item.filterText = endIndent + \'</\' + tag;\n                    }\n                    result.items.push(item);\n                    return result;\n                }\n                curr = curr.parent;\n            }\n            if (inOpenTag) {\n                return result;\n            }\n            dataProviders.forEach(function (provider) {\n                provider.provideTags().forEach(function (tag) {\n                    result.items.push({\n                        label: \'/\' + tag.name,\n                        kind: main_CompletionItemKind.Property,\n                        documentation: generateDocumentation(tag, undefined, doesSupportMarkdown),\n                        filterText: \'/\' + tag.name + closeTag,\n                        textEdit: TextEdit.replace(range, \'/\' + tag.name + closeTag),\n                        insertTextFormat: InsertTextFormat.PlainText\n                    });\n                });\n            });\n            return result;\n        }\n        function collectAutoCloseTagSuggestion(tagCloseEnd, tag) {\n            if (settings && settings.hideAutoCompleteProposals) {\n                return result;\n            }\n            if (!isVoidElement(tag)) {\n                var pos = document.positionAt(tagCloseEnd);\n                result.items.push({\n                    label: \'</\' + tag + \'>\',\n                    kind: main_CompletionItemKind.Property,\n                    filterText: \'</\' + tag + \'>\',\n                    textEdit: TextEdit.insert(pos, \'$0</\' + tag + \'>\'),\n                    insertTextFormat: InsertTextFormat.Snippet\n                });\n            }\n            return result;\n        }\n        function collectTagSuggestions(tagStart, tagEnd) {\n            collectOpenTagSuggestions(tagStart, tagEnd);\n            collectCloseTagSuggestions(tagStart, true, tagEnd);\n            return result;\n        }\n        function collectAttributeNameSuggestions(nameStart, nameEnd) {\n            if (nameEnd === void 0) { nameEnd = offset; }\n            var replaceEnd = offset;\n            while (replaceEnd < nameEnd && text[replaceEnd] !== \'<\') { // < is a valid attribute name character, but we rather assume the attribute name ends. See #23236.\n                replaceEnd++;\n            }\n            var range = getReplaceRange(nameStart, replaceEnd);\n            var value = isFollowedBy(text, nameEnd, ScannerState.AfterAttributeName, TokenType.DelimiterAssign) ? \'\' : \'="$1"\';\n            var seenAttributes = Object.create(null);\n            dataProviders.forEach(function (provider) {\n                provider.provideAttributes(currentTag).forEach(function (attr) {\n                    if (seenAttributes[attr.name]) {\n                        return;\n                    }\n                    seenAttributes[attr.name] = true;\n                    var codeSnippet = attr.name;\n                    var command;\n                    if (attr.valueSet !== \'v\' && value.length) {\n                        codeSnippet = codeSnippet + value;\n                        if (attr.valueSet || attr.name === \'style\') {\n                            command = {\n                                title: \'Suggest\',\n                                command: \'editor.action.triggerSuggest\'\n                            };\n                        }\n                    }\n                    result.items.push({\n                        label: attr.name,\n                        kind: attr.valueSet === \'handler\' ? main_CompletionItemKind.Function : main_CompletionItemKind.Value,\n                        documentation: generateDocumentation(attr, undefined, doesSupportMarkdown),\n                        textEdit: TextEdit.replace(range, codeSnippet),\n                        insertTextFormat: InsertTextFormat.Snippet,\n                        command: command\n                    });\n                });\n            });\n            collectDataAttributesSuggestions(range, seenAttributes);\n            return result;\n        }\n        function collectDataAttributesSuggestions(range, seenAttributes) {\n            var dataAttr = \'data-\';\n            var dataAttributes = {};\n            dataAttributes[dataAttr] = dataAttr + "$1=\\"$2\\"";\n            function addNodeDataAttributes(node) {\n                node.attributeNames.forEach(function (attr) {\n                    if (startsWith(attr, dataAttr) && !dataAttributes[attr] && !seenAttributes[attr]) {\n                        dataAttributes[attr] = attr + \'="$1"\';\n                    }\n                });\n                node.children.forEach(function (child) { return addNodeDataAttributes(child); });\n            }\n            if (htmlDocument) {\n                htmlDocument.roots.forEach(function (root) { return addNodeDataAttributes(root); });\n            }\n            Object.keys(dataAttributes).forEach(function (attr) { return result.items.push({\n                label: attr,\n                kind: main_CompletionItemKind.Value,\n                textEdit: TextEdit.replace(range, dataAttributes[attr]),\n                insertTextFormat: InsertTextFormat.Snippet\n            }); });\n        }\n        function collectAttributeValueSuggestions(valueStart, valueEnd) {\n            if (valueEnd === void 0) { valueEnd = offset; }\n            var range;\n            var addQuotes;\n            var valuePrefix;\n            if (offset > valueStart && offset <= valueEnd && isQuote(text[valueStart])) {\n                // inside quoted attribute\n                var valueContentStart = valueStart + 1;\n                var valueContentEnd = valueEnd;\n                // valueEnd points to the char after quote, which encloses the replace range\n                if (valueEnd > valueStart && text[valueEnd - 1] === text[valueStart]) {\n                    valueContentEnd--;\n                }\n                var wsBefore = getWordStart(text, offset, valueContentStart);\n                var wsAfter = getWordEnd(text, offset, valueContentEnd);\n                range = getReplaceRange(wsBefore, wsAfter);\n                valuePrefix = offset >= valueContentStart && offset <= valueContentEnd ? text.substring(valueContentStart, offset) : \'\';\n                addQuotes = false;\n            }\n            else {\n                range = getReplaceRange(valueStart, valueEnd);\n                valuePrefix = text.substring(valueStart, offset);\n                addQuotes = true;\n            }\n            if (completionParticipants.length > 0) {\n                var tag = currentTag.toLowerCase();\n                var attribute = currentAttributeName.toLowerCase();\n                var fullRange = getReplaceRange(valueStart, valueEnd);\n                for (var _i = 0, completionParticipants_1 = completionParticipants; _i < completionParticipants_1.length; _i++) {\n                    var participant = completionParticipants_1[_i];\n                    if (participant.onHtmlAttributeValue) {\n                        participant.onHtmlAttributeValue({ document: document, position: position, tag: tag, attribute: attribute, value: valuePrefix, range: fullRange });\n                    }\n                }\n            }\n            dataProviders.forEach(function (provider) {\n                provider.provideValues(currentTag, currentAttributeName).forEach(function (value) {\n                    var insertText = addQuotes ? \'"\' + value.name + \'"\' : value.name;\n                    result.items.push({\n                        label: value.name,\n                        filterText: insertText,\n                        kind: main_CompletionItemKind.Unit,\n                        documentation: generateDocumentation(value, undefined, doesSupportMarkdown),\n                        textEdit: TextEdit.replace(range, insertText),\n                        insertTextFormat: InsertTextFormat.PlainText\n                    });\n                });\n            });\n            collectCharacterEntityProposals();\n            return result;\n        }\n        function scanNextForEndPos(nextToken) {\n            if (offset === scanner.getTokenEnd()) {\n                token = scanner.scan();\n                if (token === nextToken && scanner.getTokenOffset() === offset) {\n                    return scanner.getTokenEnd();\n                }\n            }\n            return offset;\n        }\n        function collectInsideContent() {\n            for (var _i = 0, completionParticipants_2 = completionParticipants; _i < completionParticipants_2.length; _i++) {\n                var participant = completionParticipants_2[_i];\n                if (participant.onHtmlContent) {\n                    participant.onHtmlContent({ document: document, position: position });\n                }\n            }\n            return collectCharacterEntityProposals();\n        }\n        function collectCharacterEntityProposals() {\n            // character entities\n            var k = offset - 1;\n            var characterStart = position.character;\n            while (k >= 0 && isLetterOrDigit(text, k)) {\n                k--;\n                characterStart--;\n            }\n            if (k >= 0 && text[k] === \'&\') {\n                var range = main_Range.create(main_Position.create(position.line, characterStart - 1), position);\n                for (var entity in entities) {\n                    if (endsWith(entity, \';\')) {\n                        var label = \'&\' + entity;\n                        result.items.push({\n                            label: label,\n                            kind: main_CompletionItemKind.Keyword,\n                            documentation: htmlCompletion_localize(\'entity.propose\', "Character entity representing \'" + entities[entity] + "\'"),\n                            textEdit: TextEdit.replace(range, label),\n                            insertTextFormat: InsertTextFormat.PlainText\n                        });\n                    }\n                }\n            }\n            return result;\n        }\n        function suggestDoctype(replaceStart, replaceEnd) {\n            var range = getReplaceRange(replaceStart, replaceEnd);\n            result.items.push({\n                label: \'!DOCTYPE\',\n                kind: main_CompletionItemKind.Property,\n                documentation: \'A preamble for an HTML document.\',\n                textEdit: TextEdit.replace(range, \'!DOCTYPE html>\'),\n                insertTextFormat: InsertTextFormat.PlainText\n            });\n        }\n        var token = scanner.scan();\n        while (token !== TokenType.EOS && scanner.getTokenOffset() <= offset) {\n            switch (token) {\n                case TokenType.StartTagOpen:\n                    if (scanner.getTokenEnd() === offset) {\n                        var endPos = scanNextForEndPos(TokenType.StartTag);\n                        if (position.line === 0) {\n                            suggestDoctype(offset, endPos);\n                        }\n                        return collectTagSuggestions(offset, endPos);\n                    }\n                    break;\n                case TokenType.StartTag:\n                    if (scanner.getTokenOffset() <= offset && offset <= scanner.getTokenEnd()) {\n                        return collectOpenTagSuggestions(scanner.getTokenOffset(), scanner.getTokenEnd());\n                    }\n                    currentTag = scanner.getTokenText();\n                    break;\n                case TokenType.AttributeName:\n                    if (scanner.getTokenOffset() <= offset && offset <= scanner.getTokenEnd()) {\n                        return collectAttributeNameSuggestions(scanner.getTokenOffset(), scanner.getTokenEnd());\n                    }\n                    currentAttributeName = scanner.getTokenText();\n                    break;\n                case TokenType.DelimiterAssign:\n                    if (scanner.getTokenEnd() === offset) {\n                        var endPos = scanNextForEndPos(TokenType.AttributeValue);\n                        return collectAttributeValueSuggestions(offset, endPos);\n                    }\n                    break;\n                case TokenType.AttributeValue:\n                    if (scanner.getTokenOffset() <= offset && offset <= scanner.getTokenEnd()) {\n                        return collectAttributeValueSuggestions(scanner.getTokenOffset(), scanner.getTokenEnd());\n                    }\n                    break;\n                case TokenType.Whitespace:\n                    if (offset <= scanner.getTokenEnd()) {\n                        switch (scanner.getScannerState()) {\n                            case ScannerState.AfterOpeningStartTag:\n                                var startPos = scanner.getTokenOffset();\n                                var endTagPos = scanNextForEndPos(TokenType.StartTag);\n                                return collectTagSuggestions(startPos, endTagPos);\n                            case ScannerState.WithinTag:\n                            case ScannerState.AfterAttributeName:\n                                return collectAttributeNameSuggestions(scanner.getTokenEnd());\n                            case ScannerState.BeforeAttributeValue:\n                                return collectAttributeValueSuggestions(scanner.getTokenEnd());\n                            case ScannerState.AfterOpeningEndTag:\n                                return collectCloseTagSuggestions(scanner.getTokenOffset() - 1, false);\n                            case ScannerState.WithinContent:\n                                return collectInsideContent();\n                        }\n                    }\n                    break;\n                case TokenType.EndTagOpen:\n                    if (offset <= scanner.getTokenEnd()) {\n                        var afterOpenBracket = scanner.getTokenOffset() + 1;\n                        var endOffset = scanNextForEndPos(TokenType.EndTag);\n                        return collectCloseTagSuggestions(afterOpenBracket, false, endOffset);\n                    }\n                    break;\n                case TokenType.EndTag:\n                    if (offset <= scanner.getTokenEnd()) {\n                        var start = scanner.getTokenOffset() - 1;\n                        while (start >= 0) {\n                            var ch = text.charAt(start);\n                            if (ch === \'/\') {\n                                return collectCloseTagSuggestions(start, false, scanner.getTokenEnd());\n                            }\n                            else if (!isWhiteSpace(ch)) {\n                                break;\n                            }\n                            start--;\n                        }\n                    }\n                    break;\n                case TokenType.StartTagClose:\n                    if (offset <= scanner.getTokenEnd()) {\n                        if (currentTag) {\n                            return collectAutoCloseTagSuggestion(scanner.getTokenEnd(), currentTag);\n                        }\n                    }\n                    break;\n                case TokenType.Content:\n                    if (offset <= scanner.getTokenEnd()) {\n                        return collectInsideContent();\n                    }\n                    break;\n                default:\n                    if (offset <= scanner.getTokenEnd()) {\n                        return result;\n                    }\n                    break;\n            }\n            token = scanner.scan();\n        }\n        return result;\n    };\n    HTMLCompletion.prototype.doTagComplete = function (document, position, htmlDocument) {\n        var offset = document.offsetAt(position);\n        if (offset <= 0) {\n            return null;\n        }\n        var char = document.getText().charAt(offset - 1);\n        if (char === \'>\') {\n            var node = htmlDocument.findNodeBefore(offset);\n            if (node && node.tag && !isVoidElement(node.tag) && node.start < offset && (!node.endTagStart || node.endTagStart > offset)) {\n                var scanner = createScanner(document.getText(), node.start);\n                var token = scanner.scan();\n                while (token !== TokenType.EOS && scanner.getTokenEnd() <= offset) {\n                    if (token === TokenType.StartTagClose && scanner.getTokenEnd() === offset) {\n                        return "$0</" + node.tag + ">";\n                    }\n                    token = scanner.scan();\n                }\n            }\n        }\n        else if (char === \'/\') {\n            var node = htmlDocument.findNodeBefore(offset);\n            while (node && node.closed) {\n                node = node.parent;\n            }\n            if (node && node.tag) {\n                var scanner = createScanner(document.getText(), node.start);\n                var token = scanner.scan();\n                while (token !== TokenType.EOS && scanner.getTokenEnd() <= offset) {\n                    if (token === TokenType.EndTagOpen && scanner.getTokenEnd() === offset) {\n                        return node.tag + ">";\n                    }\n                    token = scanner.scan();\n                }\n            }\n        }\n        return null;\n    };\n    HTMLCompletion.prototype.convertCompletionList = function (list) {\n        if (!this.doesSupportMarkdown()) {\n            list.items.forEach(function (item) {\n                if (item.documentation && typeof item.documentation !== \'string\') {\n                    item.documentation = {\n                        kind: \'plaintext\',\n                        value: item.documentation.value\n                    };\n                }\n            });\n        }\n        return list;\n    };\n    HTMLCompletion.prototype.doesSupportMarkdown = function () {\n        var _a, _b, _c;\n        if (!isDefined(this.supportsMarkdown)) {\n            if (!isDefined(this.lsOptions.clientCapabilities)) {\n                this.supportsMarkdown = true;\n                return this.supportsMarkdown;\n            }\n            var documentationFormat = (_c = (_b = (_a = this.lsOptions.clientCapabilities.textDocument) === null || _a === void 0 ? void 0 : _a.completion) === null || _b === void 0 ? void 0 : _b.completionItem) === null || _c === void 0 ? void 0 : _c.documentationFormat;\n            this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    return HTMLCompletion;\n}());\n\nfunction isQuote(s) {\n    return /^["\']*$/.test(s);\n}\nfunction isWhiteSpace(s) {\n    return /^\\s*$/.test(s);\n}\nfunction isFollowedBy(s, offset, intialState, expectedToken) {\n    var scanner = createScanner(s, offset, intialState);\n    var token = scanner.scan();\n    while (token === TokenType.Whitespace) {\n        token = scanner.scan();\n    }\n    return token === expectedToken;\n}\nfunction getWordStart(s, offset, limit) {\n    while (offset > limit && !isWhiteSpace(s[offset - 1])) {\n        offset--;\n    }\n    return offset;\n}\nfunction getWordEnd(s, offset, limit) {\n    while (offset < limit && !isWhiteSpace(s[offset])) {\n        offset++;\n    }\n    return offset;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHover.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\nvar htmlHover_localize = loadMessageBundle();\nvar HTMLHover = /** @class */ (function () {\n    function HTMLHover(lsOptions, dataManager) {\n        this.lsOptions = lsOptions;\n        this.dataManager = dataManager;\n    }\n    HTMLHover.prototype.doHover = function (document, position, htmlDocument, options) {\n        var convertContents = this.convertContents.bind(this);\n        var doesSupportMarkdown = this.doesSupportMarkdown();\n        var offset = document.offsetAt(position);\n        var node = htmlDocument.findNodeAt(offset);\n        var text = document.getText();\n        if (!node || !node.tag) {\n            return null;\n        }\n        var dataProviders = this.dataManager.getDataProviders().filter(function (p) { return p.isApplicable(document.languageId); });\n        function getTagHover(currTag, range, open) {\n            var _loop_1 = function (provider) {\n                var hover = null;\n                provider.provideTags().forEach(function (tag) {\n                    if (tag.name.toLowerCase() === currTag.toLowerCase()) {\n                        var markupContent = generateDocumentation(tag, options, doesSupportMarkdown);\n                        if (!markupContent) {\n                            markupContent = {\n                                kind: doesSupportMarkdown ? \'markdown\' : \'plaintext\',\n                                value: \'\'\n                            };\n                        }\n                        hover = { contents: markupContent, range: range };\n                    }\n                });\n                if (hover) {\n                    hover.contents = convertContents(hover.contents);\n                    return { value: hover };\n                }\n            };\n            for (var _i = 0, dataProviders_1 = dataProviders; _i < dataProviders_1.length; _i++) {\n                var provider = dataProviders_1[_i];\n                var state_1 = _loop_1(provider);\n                if (typeof state_1 === "object")\n                    return state_1.value;\n            }\n            return null;\n        }\n        function getAttrHover(currTag, currAttr, range) {\n            var _loop_2 = function (provider) {\n                var hover = null;\n                provider.provideAttributes(currTag).forEach(function (attr) {\n                    if (currAttr === attr.name && attr.description) {\n                        var contentsDoc = generateDocumentation(attr, options, doesSupportMarkdown);\n                        if (contentsDoc) {\n                            hover = { contents: contentsDoc, range: range };\n                        }\n                        else {\n                            hover = null;\n                        }\n                    }\n                });\n                if (hover) {\n                    hover.contents = convertContents(hover.contents);\n                    return { value: hover };\n                }\n            };\n            for (var _i = 0, dataProviders_2 = dataProviders; _i < dataProviders_2.length; _i++) {\n                var provider = dataProviders_2[_i];\n                var state_2 = _loop_2(provider);\n                if (typeof state_2 === "object")\n                    return state_2.value;\n            }\n            return null;\n        }\n        function getAttrValueHover(currTag, currAttr, currAttrValue, range) {\n            var _loop_3 = function (provider) {\n                var hover = null;\n                provider.provideValues(currTag, currAttr).forEach(function (attrValue) {\n                    if (currAttrValue === attrValue.name && attrValue.description) {\n                        var contentsDoc = generateDocumentation(attrValue, options, doesSupportMarkdown);\n                        if (contentsDoc) {\n                            hover = { contents: contentsDoc, range: range };\n                        }\n                        else {\n                            hover = null;\n                        }\n                    }\n                });\n                if (hover) {\n                    hover.contents = convertContents(hover.contents);\n                    return { value: hover };\n                }\n            };\n            for (var _i = 0, dataProviders_3 = dataProviders; _i < dataProviders_3.length; _i++) {\n                var provider = dataProviders_3[_i];\n                var state_3 = _loop_3(provider);\n                if (typeof state_3 === "object")\n                    return state_3.value;\n            }\n            return null;\n        }\n        function getEntityHover(text, range) {\n            var currEntity = filterEntity(text);\n            for (var entity in entities) {\n                var hover = null;\n                var label = \'&\' + entity;\n                if (currEntity === label) {\n                    var code = entities[entity].charCodeAt(0).toString(16).toUpperCase();\n                    var hex = \'U+\';\n                    if (code.length < 4) {\n                        var zeroes = 4 - code.length;\n                        var k = 0;\n                        while (k < zeroes) {\n                            hex += \'0\';\n                            k += 1;\n                        }\n                    }\n                    hex += code;\n                    var contentsDoc = htmlHover_localize(\'entity.propose\', "Character entity representing \'" + entities[entity] + "\', unicode equivalent \'" + hex + "\'");\n                    if (contentsDoc) {\n                        hover = { contents: contentsDoc, range: range };\n                    }\n                    else {\n                        hover = null;\n                    }\n                }\n                if (hover) {\n                    hover.contents = convertContents(hover.contents);\n                    return hover;\n                }\n            }\n            return null;\n        }\n        function getTagNameRange(tokenType, startOffset) {\n            var scanner = createScanner(document.getText(), startOffset);\n            var token = scanner.scan();\n            while (token !== TokenType.EOS && (scanner.getTokenEnd() < offset || scanner.getTokenEnd() === offset && token !== tokenType)) {\n                token = scanner.scan();\n            }\n            if (token === tokenType && offset <= scanner.getTokenEnd()) {\n                return { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };\n            }\n            return null;\n        }\n        function getEntityRange() {\n            var k = offset - 1;\n            var characterStart = position.character;\n            while (k >= 0 && isLetterOrDigit(text, k)) {\n                k--;\n                characterStart--;\n            }\n            var n = k + 1;\n            var characterEnd = characterStart;\n            while (isLetterOrDigit(text, n)) {\n                n++;\n                characterEnd++;\n            }\n            if (k >= 0 && text[k] === \'&\') {\n                var range = null;\n                if (text[n] === \';\') {\n                    range = main_Range.create(main_Position.create(position.line, characterStart), main_Position.create(position.line, characterEnd + 1));\n                }\n                else {\n                    range = main_Range.create(main_Position.create(position.line, characterStart), main_Position.create(position.line, characterEnd));\n                }\n                return range;\n            }\n            return null;\n        }\n        function filterEntity(text) {\n            var k = offset - 1;\n            var newText = \'&\';\n            while (k >= 0 && isLetterOrDigit(text, k)) {\n                k--;\n            }\n            k = k + 1;\n            while (isLetterOrDigit(text, k)) {\n                newText += text[k];\n                k += 1;\n            }\n            newText += \';\';\n            return newText;\n        }\n        if (node.endTagStart && offset >= node.endTagStart) {\n            var tagRange_1 = getTagNameRange(TokenType.EndTag, node.endTagStart);\n            if (tagRange_1) {\n                return getTagHover(node.tag, tagRange_1, false);\n            }\n            return null;\n        }\n        var tagRange = getTagNameRange(TokenType.StartTag, node.start);\n        if (tagRange) {\n            return getTagHover(node.tag, tagRange, true);\n        }\n        var attrRange = getTagNameRange(TokenType.AttributeName, node.start);\n        if (attrRange) {\n            var tag = node.tag;\n            var attr = document.getText(attrRange);\n            return getAttrHover(tag, attr, attrRange);\n        }\n        var entityRange = getEntityRange();\n        if (entityRange) {\n            return getEntityHover(text, entityRange);\n        }\n        function scanAttrAndAttrValue(nodeStart, attrValueStart) {\n            var scanner = createScanner(document.getText(), nodeStart);\n            var token = scanner.scan();\n            var prevAttr = undefined;\n            while (token !== TokenType.EOS && (scanner.getTokenEnd() <= attrValueStart)) {\n                token = scanner.scan();\n                if (token === TokenType.AttributeName) {\n                    prevAttr = scanner.getTokenText();\n                }\n            }\n            return prevAttr;\n        }\n        var attrValueRange = getTagNameRange(TokenType.AttributeValue, node.start);\n        if (attrValueRange) {\n            var tag = node.tag;\n            var attrValue = trimQuotes(document.getText(attrValueRange));\n            var matchAttr = scanAttrAndAttrValue(node.start, document.offsetAt(attrValueRange.start));\n            if (matchAttr) {\n                return getAttrValueHover(tag, matchAttr, attrValue, attrValueRange);\n            }\n        }\n        return null;\n    };\n    HTMLHover.prototype.convertContents = function (contents) {\n        if (!this.doesSupportMarkdown()) {\n            if (typeof contents === \'string\') {\n                return contents;\n            }\n            // MarkupContent\n            else if (\'kind\' in contents) {\n                return {\n                    kind: \'plaintext\',\n                    value: contents.value\n                };\n            }\n            // MarkedString[]\n            else if (Array.isArray(contents)) {\n                contents.map(function (c) {\n                    return typeof c === \'string\' ? c : c.value;\n                });\n            }\n            // MarkedString\n            else {\n                return contents.value;\n            }\n        }\n        return contents;\n    };\n    HTMLHover.prototype.doesSupportMarkdown = function () {\n        var _a, _b, _c;\n        if (!isDefined(this.supportsMarkdown)) {\n            if (!isDefined(this.lsOptions.clientCapabilities)) {\n                this.supportsMarkdown = true;\n                return this.supportsMarkdown;\n            }\n            var contentFormat = (_c = (_b = (_a = this.lsOptions.clientCapabilities) === null || _a === void 0 ? void 0 : _a.textDocument) === null || _b === void 0 ? void 0 : _b.hover) === null || _c === void 0 ? void 0 : _c.contentFormat;\n            this.supportsMarkdown = Array.isArray(contentFormat) && contentFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    return HTMLHover;\n}());\n\nfunction trimQuotes(s) {\n    if (s.length <= 1) {\n        return s.replace(/[\'"]/, \'\');\n    }\n    if (s[0] === "\'" || s[0] === "\\"") {\n        s = s.slice(1);\n    }\n    if (s[s.length - 1] === "\'" || s[s.length - 1] === "\\"") {\n        s = s.slice(0, -1);\n    }\n    return s;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*\n * Mock for the JS formatter. Ignore formatting of JS content in HTML.\n */\nfunction js_beautify(js_source_text, options) {\n    // no formatting\n    return js_source_text;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-css.js\n// copied from js-beautify/js/lib/beautify-css.js\n// version: 1.13.4\n/* AUTO-GENERATED. DO NOT MODIFY. */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n CSS Beautifier\n---------------\n\n    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)\n\n    Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>\n        https://beautifier.io/\n\n    Usage:\n        css_beautify(source_text);\n        css_beautify(source_text, options);\n\n    The options are (default in brackets):\n        indent_size (4)                         — indentation size,\n        indent_char (space)                     — character to indent with,\n        selector_separator_newline (true)       - separate selectors with newline or\n                                                  not (e.g. "a,\\nbr" or "a, br")\n        end_with_newline (false)                - end with a newline\n        newline_between_rules (true)            - add a new line after every css rule\n        space_around_selector_separator (false) - ensure space around selector separators:\n                                                  \'>\', \'+\', \'~\' (e.g. "a>b" -> "a > b")\n    e.g\n\n    css_beautify(css_source_text, {\n      \'indent_size\': 1,\n      \'indent_char\': \'\\t\',\n      \'selector_separator\': \' \',\n      \'end_with_newline\': false,\n      \'newline_between_rules\': true,\n      \'space_around_selector_separator\': true\n    });\n*/\n\n// http://www.w3.org/TR/CSS21/syndata.html#tokenization\n// http://www.w3.org/TR/css3-syntax/\n\nvar legacy_beautify_css =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_2800__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_2800__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_2800__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_2800__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_2800__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_2800__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_2800__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, \'__esModule\', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_2800__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_2800__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === \'object\' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_2800__.r(ns);\n/******/ \t\tObject.defineProperty(ns, \'default\', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != \'string\') for(var key in value) __nested_webpack_require_2800__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_2800__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module[\'default\']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_2800__.d(getter, \'a\', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_2800__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_2800__.p = "";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_2800__(__nested_webpack_require_2800__.s = 15);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */,\n/* 1 */,\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction OutputLine(parent) {\n  this.__parent = parent;\n  this.__character_count = 0;\n  // use indent_count as a marker for this.__lines that have preserved indentation\n  this.__indent_count = -1;\n  this.__alignment_count = 0;\n  this.__wrap_point_index = 0;\n  this.__wrap_point_character_count = 0;\n  this.__wrap_point_indent_count = -1;\n  this.__wrap_point_alignment_count = 0;\n\n  this.__items = [];\n}\n\nOutputLine.prototype.clone_empty = function() {\n  var line = new OutputLine(this.__parent);\n  line.set_indent(this.__indent_count, this.__alignment_count);\n  return line;\n};\n\nOutputLine.prototype.item = function(index) {\n  if (index < 0) {\n    return this.__items[this.__items.length + index];\n  } else {\n    return this.__items[index];\n  }\n};\n\nOutputLine.prototype.has_match = function(pattern) {\n  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n    if (this.__items[lastCheckedOutput].match(pattern)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nOutputLine.prototype.set_indent = function(indent, alignment) {\n  if (this.is_empty()) {\n    this.__indent_count = indent || 0;\n    this.__alignment_count = alignment || 0;\n    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n  }\n};\n\nOutputLine.prototype._set_wrap_point = function() {\n  if (this.__parent.wrap_line_length) {\n    this.__wrap_point_index = this.__items.length;\n    this.__wrap_point_character_count = this.__character_count;\n    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n  }\n};\n\nOutputLine.prototype._should_wrap = function() {\n  return this.__wrap_point_index &&\n    this.__character_count > this.__parent.wrap_line_length &&\n    this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n};\n\nOutputLine.prototype._allow_wrap = function() {\n  if (this._should_wrap()) {\n    this.__parent.add_new_line();\n    var next = this.__parent.current_line;\n    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n    next.__items = this.__items.slice(this.__wrap_point_index);\n    this.__items = this.__items.slice(0, this.__wrap_point_index);\n\n    next.__character_count += this.__character_count - this.__wrap_point_character_count;\n    this.__character_count = this.__wrap_point_character_count;\n\n    if (next.__items[0] === " ") {\n      next.__items.splice(0, 1);\n      next.__character_count -= 1;\n    }\n    return true;\n  }\n  return false;\n};\n\nOutputLine.prototype.is_empty = function() {\n  return this.__items.length === 0;\n};\n\nOutputLine.prototype.last = function() {\n  if (!this.is_empty()) {\n    return this.__items[this.__items.length - 1];\n  } else {\n    return null;\n  }\n};\n\nOutputLine.prototype.push = function(item) {\n  this.__items.push(item);\n  var last_newline_index = item.lastIndexOf(\'\\n\');\n  if (last_newline_index !== -1) {\n    this.__character_count = item.length - last_newline_index;\n  } else {\n    this.__character_count += item.length;\n  }\n};\n\nOutputLine.prototype.pop = function() {\n  var item = null;\n  if (!this.is_empty()) {\n    item = this.__items.pop();\n    this.__character_count -= item.length;\n  }\n  return item;\n};\n\n\nOutputLine.prototype._remove_indent = function() {\n  if (this.__indent_count > 0) {\n    this.__indent_count -= 1;\n    this.__character_count -= this.__parent.indent_size;\n  }\n};\n\nOutputLine.prototype._remove_wrap_indent = function() {\n  if (this.__wrap_point_indent_count > 0) {\n    this.__wrap_point_indent_count -= 1;\n  }\n};\nOutputLine.prototype.trim = function() {\n  while (this.last() === \' \') {\n    this.__items.pop();\n    this.__character_count -= 1;\n  }\n};\n\nOutputLine.prototype.toString = function() {\n  var result = \'\';\n  if (this.is_empty()) {\n    if (this.__parent.indent_empty_lines) {\n      result = this.__parent.get_indent_string(this.__indent_count);\n    }\n  } else {\n    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n    result += this.__items.join(\'\');\n  }\n  return result;\n};\n\nfunction IndentStringCache(options, baseIndentString) {\n  this.__cache = [\'\'];\n  this.__indent_size = options.indent_size;\n  this.__indent_string = options.indent_char;\n  if (!options.indent_with_tabs) {\n    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n  }\n\n  // Set to null to continue support for auto detection of base indent\n  baseIndentString = baseIndentString || \'\';\n  if (options.indent_level > 0) {\n    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n  }\n\n  this.__base_string = baseIndentString;\n  this.__base_string_length = baseIndentString.length;\n}\n\nIndentStringCache.prototype.get_indent_size = function(indent, column) {\n  var result = this.__base_string_length;\n  column = column || 0;\n  if (indent < 0) {\n    result = 0;\n  }\n  result += indent * this.__indent_size;\n  result += column;\n  return result;\n};\n\nIndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n  var result = this.__base_string;\n  column = column || 0;\n  if (indent_level < 0) {\n    indent_level = 0;\n    result = \'\';\n  }\n  column += indent_level * this.__indent_size;\n  this.__ensure_cache(column);\n  result += this.__cache[column];\n  return result;\n};\n\nIndentStringCache.prototype.__ensure_cache = function(column) {\n  while (column >= this.__cache.length) {\n    this.__add_column();\n  }\n};\n\nIndentStringCache.prototype.__add_column = function() {\n  var column = this.__cache.length;\n  var indent = 0;\n  var result = \'\';\n  if (this.__indent_size && column >= this.__indent_size) {\n    indent = Math.floor(column / this.__indent_size);\n    column -= indent * this.__indent_size;\n    result = new Array(indent + 1).join(this.__indent_string);\n  }\n  if (column) {\n    result += new Array(column + 1).join(\' \');\n  }\n\n  this.__cache.push(result);\n};\n\nfunction Output(options, baseIndentString) {\n  this.__indent_cache = new IndentStringCache(options, baseIndentString);\n  this.raw = false;\n  this._end_with_newline = options.end_with_newline;\n  this.indent_size = options.indent_size;\n  this.wrap_line_length = options.wrap_line_length;\n  this.indent_empty_lines = options.indent_empty_lines;\n  this.__lines = [];\n  this.previous_line = null;\n  this.current_line = null;\n  this.next_line = new OutputLine(this);\n  this.space_before_token = false;\n  this.non_breaking_space = false;\n  this.previous_token_wrapped = false;\n  // initialize\n  this.__add_outputline();\n}\n\nOutput.prototype.__add_outputline = function() {\n  this.previous_line = this.current_line;\n  this.current_line = this.next_line.clone_empty();\n  this.__lines.push(this.current_line);\n};\n\nOutput.prototype.get_line_number = function() {\n  return this.__lines.length;\n};\n\nOutput.prototype.get_indent_string = function(indent, column) {\n  return this.__indent_cache.get_indent_string(indent, column);\n};\n\nOutput.prototype.get_indent_size = function(indent, column) {\n  return this.__indent_cache.get_indent_size(indent, column);\n};\n\nOutput.prototype.is_empty = function() {\n  return !this.previous_line && this.current_line.is_empty();\n};\n\nOutput.prototype.add_new_line = function(force_newline) {\n  // never newline at the start of file\n  // otherwise, newline only if we didn\'t just add one or we\'re forced\n  if (this.is_empty() ||\n    (!force_newline && this.just_added_newline())) {\n    return false;\n  }\n\n  // if raw output is enabled, don\'t print additional newlines,\n  // but still return True as though you had\n  if (!this.raw) {\n    this.__add_outputline();\n  }\n  return true;\n};\n\nOutput.prototype.get_code = function(eol) {\n  this.trim(true);\n\n  // handle some edge cases where the last tokens\n  // has text that ends with newline(s)\n  var last_item = this.current_line.pop();\n  if (last_item) {\n    if (last_item[last_item.length - 1] === \'\\n\') {\n      last_item = last_item.replace(/\\n+$/g, \'\');\n    }\n    this.current_line.push(last_item);\n  }\n\n  if (this._end_with_newline) {\n    this.__add_outputline();\n  }\n\n  var sweet_code = this.__lines.join(\'\\n\');\n\n  if (eol !== \'\\n\') {\n    sweet_code = sweet_code.replace(/[\\n]/g, eol);\n  }\n  return sweet_code;\n};\n\nOutput.prototype.set_wrap_point = function() {\n  this.current_line._set_wrap_point();\n};\n\nOutput.prototype.set_indent = function(indent, alignment) {\n  indent = indent || 0;\n  alignment = alignment || 0;\n\n  // Next line stores alignment values\n  this.next_line.set_indent(indent, alignment);\n\n  // Never indent your first output indent at the start of the file\n  if (this.__lines.length > 1) {\n    this.current_line.set_indent(indent, alignment);\n    return true;\n  }\n\n  this.current_line.set_indent();\n  return false;\n};\n\nOutput.prototype.add_raw_token = function(token) {\n  for (var x = 0; x < token.newlines; x++) {\n    this.__add_outputline();\n  }\n  this.current_line.set_indent(-1);\n  this.current_line.push(token.whitespace_before);\n  this.current_line.push(token.text);\n  this.space_before_token = false;\n  this.non_breaking_space = false;\n  this.previous_token_wrapped = false;\n};\n\nOutput.prototype.add_token = function(printable_token) {\n  this.__add_space_before_token();\n  this.current_line.push(printable_token);\n  this.space_before_token = false;\n  this.non_breaking_space = false;\n  this.previous_token_wrapped = this.current_line._allow_wrap();\n};\n\nOutput.prototype.__add_space_before_token = function() {\n  if (this.space_before_token && !this.just_added_newline()) {\n    if (!this.non_breaking_space) {\n      this.set_wrap_point();\n    }\n    this.current_line.push(\' \');\n  }\n};\n\nOutput.prototype.remove_indent = function(index) {\n  var output_length = this.__lines.length;\n  while (index < output_length) {\n    this.__lines[index]._remove_indent();\n    index++;\n  }\n  this.current_line._remove_wrap_indent();\n};\n\nOutput.prototype.trim = function(eat_newlines) {\n  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n  this.current_line.trim();\n\n  while (eat_newlines && this.__lines.length > 1 &&\n    this.current_line.is_empty()) {\n    this.__lines.pop();\n    this.current_line = this.__lines[this.__lines.length - 1];\n    this.current_line.trim();\n  }\n\n  this.previous_line = this.__lines.length > 1 ?\n    this.__lines[this.__lines.length - 2] : null;\n};\n\nOutput.prototype.just_added_newline = function() {\n  return this.current_line.is_empty();\n};\n\nOutput.prototype.just_added_blankline = function() {\n  return this.is_empty() ||\n    (this.current_line.is_empty() && this.previous_line.is_empty());\n};\n\nOutput.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n  var index = this.__lines.length - 2;\n  while (index >= 0) {\n    var potentialEmptyLine = this.__lines[index];\n    if (potentialEmptyLine.is_empty()) {\n      break;\n    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&\n      potentialEmptyLine.item(-1) !== ends_with) {\n      this.__lines.splice(index + 1, 0, new OutputLine(this));\n      this.previous_line = this.__lines[this.__lines.length - 2];\n      break;\n    }\n    index--;\n  }\n};\n\nmodule.exports.Output = Output;\n\n\n/***/ }),\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction Options(options, merge_child_field) {\n  this.raw_options = _mergeOpts(options, merge_child_field);\n\n  // Support passing the source text back with no change\n  this.disabled = this._get_boolean(\'disabled\');\n\n  this.eol = this._get_characters(\'eol\', \'auto\');\n  this.end_with_newline = this._get_boolean(\'end_with_newline\');\n  this.indent_size = this._get_number(\'indent_size\', 4);\n  this.indent_char = this._get_characters(\'indent_char\', \' \');\n  this.indent_level = this._get_number(\'indent_level\');\n\n  this.preserve_newlines = this._get_boolean(\'preserve_newlines\', true);\n  this.max_preserve_newlines = this._get_number(\'max_preserve_newlines\', 32786);\n  if (!this.preserve_newlines) {\n    this.max_preserve_newlines = 0;\n  }\n\n  this.indent_with_tabs = this._get_boolean(\'indent_with_tabs\', this.indent_char === \'\\t\');\n  if (this.indent_with_tabs) {\n    this.indent_char = \'\\t\';\n\n    // indent_size behavior changed after 1.8.6\n    // It used to be that indent_size would be\n    // set to 1 for indent_with_tabs. That is no longer needed and\n    // actually doesn\'t make sense - why not use spaces? Further,\n    // that might produce unexpected behavior - tabs being used\n    // for single-column alignment. So, when indent_with_tabs is true\n    // and indent_size is 1, reset indent_size to 4.\n    if (this.indent_size === 1) {\n      this.indent_size = 4;\n    }\n  }\n\n  // Backwards compat with 1.3.x\n  this.wrap_line_length = this._get_number(\'wrap_line_length\', this._get_number(\'max_char\'));\n\n  this.indent_empty_lines = this._get_boolean(\'indent_empty_lines\');\n\n  // valid templating languages [\'django\', \'erb\', \'handlebars\', \'php\', \'smarty\']\n  // For now, \'auto\' = all off for javascript, all on for html (and inline javascript).\n  // other values ignored\n  this.templating = this._get_selection_list(\'templating\', [\'auto\', \'none\', \'django\', \'erb\', \'handlebars\', \'php\', \'smarty\'], [\'auto\']);\n}\n\nOptions.prototype._get_array = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  var result = default_value || [];\n  if (typeof option_value === \'object\') {\n    if (option_value !== null && typeof option_value.concat === \'function\') {\n      result = option_value.concat();\n    }\n  } else if (typeof option_value === \'string\') {\n    result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n  }\n  return result;\n};\n\nOptions.prototype._get_boolean = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  var result = option_value === undefined ? !!default_value : !!option_value;\n  return result;\n};\n\nOptions.prototype._get_characters = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  var result = default_value || \'\';\n  if (typeof option_value === \'string\') {\n    result = option_value.replace(/\\\\r/, \'\\r\').replace(/\\\\n/, \'\\n\').replace(/\\\\t/, \'\\t\');\n  }\n  return result;\n};\n\nOptions.prototype._get_number = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  default_value = parseInt(default_value, 10);\n  if (isNaN(default_value)) {\n    default_value = 0;\n  }\n  var result = parseInt(option_value, 10);\n  if (isNaN(result)) {\n    result = default_value;\n  }\n  return result;\n};\n\nOptions.prototype._get_selection = function(name, selection_list, default_value) {\n  var result = this._get_selection_list(name, selection_list, default_value);\n  if (result.length !== 1) {\n    throw new Error(\n      "Invalid Option Value: The option \'" + name + "\' can only be one of the following values:\\n" +\n      selection_list + "\\nYou passed in: \'" + this.raw_options[name] + "\'");\n  }\n\n  return result[0];\n};\n\n\nOptions.prototype._get_selection_list = function(name, selection_list, default_value) {\n  if (!selection_list || selection_list.length === 0) {\n    throw new Error("Selection list cannot be empty.");\n  }\n\n  default_value = default_value || [selection_list[0]];\n  if (!this._is_valid_selection(default_value, selection_list)) {\n    throw new Error("Invalid Default Value!");\n  }\n\n  var result = this._get_array(name, default_value);\n  if (!this._is_valid_selection(result, selection_list)) {\n    throw new Error(\n      "Invalid Option Value: The option \'" + name + "\' can contain only the following values:\\n" +\n      selection_list + "\\nYou passed in: \'" + this.raw_options[name] + "\'");\n  }\n\n  return result;\n};\n\nOptions.prototype._is_valid_selection = function(result, selection_list) {\n  return result.length && selection_list.length &&\n    !result.some(function(item) { return selection_list.indexOf(item) === -1; });\n};\n\n\n// merges child options up with the parent options object\n// Example: obj = {a: 1, b: {a: 2}}\n//          mergeOpts(obj, \'b\')\n//\n//          Returns: {a: 2}\nfunction _mergeOpts(allOptions, childFieldName) {\n  var finalOpts = {};\n  allOptions = _normalizeOpts(allOptions);\n  var name;\n\n  for (name in allOptions) {\n    if (name !== childFieldName) {\n      finalOpts[name] = allOptions[name];\n    }\n  }\n\n  //merge in the per type settings for the childFieldName\n  if (childFieldName && allOptions[childFieldName]) {\n    for (name in allOptions[childFieldName]) {\n      finalOpts[name] = allOptions[childFieldName][name];\n    }\n  }\n  return finalOpts;\n}\n\nfunction _normalizeOpts(options) {\n  var convertedOpts = {};\n  var key;\n\n  for (key in options) {\n    var newKey = key.replace(/-/g, "_");\n    convertedOpts[newKey] = options[key];\n  }\n  return convertedOpts;\n}\n\nmodule.exports.Options = Options;\nmodule.exports.normalizeOpts = _normalizeOpts;\nmodule.exports.mergeOpts = _mergeOpts;\n\n\n/***/ }),\n/* 7 */,\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar regexp_has_sticky = RegExp.prototype.hasOwnProperty(\'sticky\');\n\nfunction InputScanner(input_string) {\n  this.__input = input_string || \'\';\n  this.__input_length = this.__input.length;\n  this.__position = 0;\n}\n\nInputScanner.prototype.restart = function() {\n  this.__position = 0;\n};\n\nInputScanner.prototype.back = function() {\n  if (this.__position > 0) {\n    this.__position -= 1;\n  }\n};\n\nInputScanner.prototype.hasNext = function() {\n  return this.__position < this.__input_length;\n};\n\nInputScanner.prototype.next = function() {\n  var val = null;\n  if (this.hasNext()) {\n    val = this.__input.charAt(this.__position);\n    this.__position += 1;\n  }\n  return val;\n};\n\nInputScanner.prototype.peek = function(index) {\n  var val = null;\n  index = index || 0;\n  index += this.__position;\n  if (index >= 0 && index < this.__input_length) {\n    val = this.__input.charAt(index);\n  }\n  return val;\n};\n\n// This is a JavaScript only helper function (not in python)\n// Javascript doesn\'t have a match method\n// and not all implementation support "sticky" flag.\n// If they do not support sticky then both this.match() and this.test() method\n// must get the match and check the index of the match.\n// If sticky is supported and set, this method will use it.\n// Otherwise it will check that global is set, and fall back to the slower method.\nInputScanner.prototype.__match = function(pattern, index) {\n  pattern.lastIndex = index;\n  var pattern_match = pattern.exec(this.__input);\n\n  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n    if (pattern_match.index !== index) {\n      pattern_match = null;\n    }\n  }\n\n  return pattern_match;\n};\n\nInputScanner.prototype.test = function(pattern, index) {\n  index = index || 0;\n  index += this.__position;\n\n  if (index >= 0 && index < this.__input_length) {\n    return !!this.__match(pattern, index);\n  } else {\n    return false;\n  }\n};\n\nInputScanner.prototype.testChar = function(pattern, index) {\n  // test one character regex match\n  var val = this.peek(index);\n  pattern.lastIndex = 0;\n  return val !== null && pattern.test(val);\n};\n\nInputScanner.prototype.match = function(pattern) {\n  var pattern_match = this.__match(pattern, this.__position);\n  if (pattern_match) {\n    this.__position += pattern_match[0].length;\n  } else {\n    pattern_match = null;\n  }\n  return pattern_match;\n};\n\nInputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n  var val = \'\';\n  var match;\n  if (starting_pattern) {\n    match = this.match(starting_pattern);\n    if (match) {\n      val += match[0];\n    }\n  }\n  if (until_pattern && (match || !starting_pattern)) {\n    val += this.readUntil(until_pattern, until_after);\n  }\n  return val;\n};\n\nInputScanner.prototype.readUntil = function(pattern, until_after) {\n  var val = \'\';\n  var match_index = this.__position;\n  pattern.lastIndex = this.__position;\n  var pattern_match = pattern.exec(this.__input);\n  if (pattern_match) {\n    match_index = pattern_match.index;\n    if (until_after) {\n      match_index += pattern_match[0].length;\n    }\n  } else {\n    match_index = this.__input_length;\n  }\n\n  val = this.__input.substring(this.__position, match_index);\n  this.__position = match_index;\n  return val;\n};\n\nInputScanner.prototype.readUntilAfter = function(pattern) {\n  return this.readUntil(pattern, true);\n};\n\nInputScanner.prototype.get_regexp = function(pattern, match_from) {\n  var result = null;\n  var flags = \'g\';\n  if (match_from && regexp_has_sticky) {\n    flags = \'y\';\n  }\n  // strings are converted to regexp\n  if (typeof pattern === "string" && pattern !== \'\') {\n    // result = new RegExp(pattern.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \'\\\\$&\'), flags);\n    result = new RegExp(pattern, flags);\n  } else if (pattern) {\n    result = new RegExp(pattern.source, flags);\n  }\n  return result;\n};\n\nInputScanner.prototype.get_literal_regexp = function(literal_string) {\n  return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \'\\\\$&\'));\n};\n\n/* css beautifier legacy helpers */\nInputScanner.prototype.peekUntilAfter = function(pattern) {\n  var start = this.__position;\n  var val = this.readUntilAfter(pattern);\n  this.__position = start;\n  return val;\n};\n\nInputScanner.prototype.lookBack = function(testVal) {\n  var start = this.__position - 1;\n  return start >= testVal.length && this.__input.substring(start - testVal.length, start)\n    .toLowerCase() === testVal;\n};\n\nmodule.exports.InputScanner = InputScanner;\n\n\n/***/ }),\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction Directives(start_block_pattern, end_block_pattern) {\n  start_block_pattern = typeof start_block_pattern === \'string\' ? start_block_pattern : start_block_pattern.source;\n  end_block_pattern = typeof end_block_pattern === \'string\' ? end_block_pattern : end_block_pattern.source;\n  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \'g\');\n  this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n\n  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \'g\');\n}\n\nDirectives.prototype.get_directives = function(text) {\n  if (!text.match(this.__directives_block_pattern)) {\n    return null;\n  }\n\n  var directives = {};\n  this.__directive_pattern.lastIndex = 0;\n  var directive_match = this.__directive_pattern.exec(text);\n\n  while (directive_match) {\n    directives[directive_match[1]] = directive_match[2];\n    directive_match = this.__directive_pattern.exec(text);\n  }\n\n  return directives;\n};\n\nDirectives.prototype.readIgnored = function(input) {\n  return input.readUntilAfter(this.__directives_end_ignore_pattern);\n};\n\n\nmodule.exports.Directives = Directives;\n\n\n/***/ }),\n/* 14 */,\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_33799__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar Beautifier = __nested_webpack_require_33799__(16).Beautifier,\n  Options = __nested_webpack_require_33799__(17).Options;\n\nfunction css_beautify(source_text, options) {\n  var beautifier = new Beautifier(source_text, options);\n  return beautifier.beautify();\n}\n\nmodule.exports = css_beautify;\nmodule.exports.defaultOptions = function() {\n  return new Options();\n};\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_35420__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar Options = __nested_webpack_require_35420__(17).Options;\nvar Output = __nested_webpack_require_35420__(2).Output;\nvar InputScanner = __nested_webpack_require_35420__(8).InputScanner;\nvar Directives = __nested_webpack_require_35420__(13).Directives;\n\nvar directives_core = new Directives(/\\/\\*/, /\\*\\//);\n\nvar lineBreak = /\\r\\n|[\\r\\n]/;\nvar allLineBreaks = /\\r\\n|[\\r\\n]/g;\n\n// tokenizer\nvar whitespaceChar = /\\s/;\nvar whitespacePattern = /(?:\\s|\\n)+/g;\nvar block_comment_pattern = /\\/\\*(?:[\\s\\S]*?)((?:\\*\\/)|$)/g;\nvar comment_pattern = /\\/\\/(?:[^\\n\\r\\u2028\\u2029]*)/g;\n\nfunction Beautifier(source_text, options) {\n  this._source_text = source_text || \'\';\n  // Allow the setting of language/file-type specific options\n  // with inheritance of overall settings\n  this._options = new Options(options);\n  this._ch = null;\n  this._input = null;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n  this.NESTED_AT_RULE = {\n    "@page": true,\n    "@font-face": true,\n    "@keyframes": true,\n    // also in CONDITIONAL_GROUP_RULE below\n    "@media": true,\n    "@supports": true,\n    "@document": true\n  };\n  this.CONDITIONAL_GROUP_RULE = {\n    "@media": true,\n    "@supports": true,\n    "@document": true\n  };\n\n}\n\nBeautifier.prototype.eatString = function(endChars) {\n  var result = \'\';\n  this._ch = this._input.next();\n  while (this._ch) {\n    result += this._ch;\n    if (this._ch === "\\\\") {\n      result += this._input.next();\n    } else if (endChars.indexOf(this._ch) !== -1 || this._ch === "\\n") {\n      break;\n    }\n    this._ch = this._input.next();\n  }\n  return result;\n};\n\n// Skips any white space in the source text from the current position.\n// When allowAtLeastOneNewLine is true, will output new lines for each\n// newline character found; if the user has preserve_newlines off, only\n// the first newline will be output\nBeautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {\n  var result = whitespaceChar.test(this._input.peek());\n  var newline_count = 0;\n  while (whitespaceChar.test(this._input.peek())) {\n    this._ch = this._input.next();\n    if (allowAtLeastOneNewLine && this._ch === \'\\n\') {\n      if (newline_count === 0 || newline_count < this._options.max_preserve_newlines) {\n        newline_count++;\n        this._output.add_new_line(true);\n      }\n    }\n  }\n  return result;\n};\n\n// Nested pseudo-class if we are insideRule\n// and the next special character found opens\n// a new block\nBeautifier.prototype.foundNestedPseudoClass = function() {\n  var openParen = 0;\n  var i = 1;\n  var ch = this._input.peek(i);\n  while (ch) {\n    if (ch === "{") {\n      return true;\n    } else if (ch === \'(\') {\n      // pseudoclasses can contain ()\n      openParen += 1;\n    } else if (ch === \')\') {\n      if (openParen === 0) {\n        return false;\n      }\n      openParen -= 1;\n    } else if (ch === ";" || ch === "}") {\n      return false;\n    }\n    i++;\n    ch = this._input.peek(i);\n  }\n  return false;\n};\n\nBeautifier.prototype.print_string = function(output_string) {\n  this._output.set_indent(this._indentLevel);\n  this._output.non_breaking_space = true;\n  this._output.add_token(output_string);\n};\n\nBeautifier.prototype.preserveSingleSpace = function(isAfterSpace) {\n  if (isAfterSpace) {\n    this._output.space_before_token = true;\n  }\n};\n\nBeautifier.prototype.indent = function() {\n  this._indentLevel++;\n};\n\nBeautifier.prototype.outdent = function() {\n  if (this._indentLevel > 0) {\n    this._indentLevel--;\n  }\n};\n\n/*_____________________--------------------_____________________*/\n\nBeautifier.prototype.beautify = function() {\n  if (this._options.disabled) {\n    return this._source_text;\n  }\n\n  var source_text = this._source_text;\n  var eol = this._options.eol;\n  if (eol === \'auto\') {\n    eol = \'\\n\';\n    if (source_text && lineBreak.test(source_text || \'\')) {\n      eol = source_text.match(lineBreak)[0];\n    }\n  }\n\n\n  // HACK: newline parsing inconsistent. This brute force normalizes the this._input.\n  source_text = source_text.replace(allLineBreaks, \'\\n\');\n\n  // reset\n  var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n\n  this._output = new Output(this._options, baseIndentString);\n  this._input = new InputScanner(source_text);\n  this._indentLevel = 0;\n  this._nestedLevel = 0;\n\n  this._ch = null;\n  var parenLevel = 0;\n\n  var insideRule = false;\n  // This is the value side of a property value pair (blue in the following ex)\n  // label { content: blue }\n  var insidePropertyValue = false;\n  var enteringConditionalGroup = false;\n  var insideAtExtend = false;\n  var insideAtImport = false;\n  var topCharacter = this._ch;\n  var whitespace;\n  var isAfterSpace;\n  var previous_ch;\n\n  while (true) {\n    whitespace = this._input.read(whitespacePattern);\n    isAfterSpace = whitespace !== \'\';\n    previous_ch = topCharacter;\n    this._ch = this._input.next();\n    if (this._ch === \'\\\\\' && this._input.hasNext()) {\n      this._ch += this._input.next();\n    }\n    topCharacter = this._ch;\n\n    if (!this._ch) {\n      break;\n    } else if (this._ch === \'/\' && this._input.peek() === \'*\') {\n      // /* css comment */\n      // Always start block comments on a new line.\n      // This handles scenarios where a block comment immediately\n      // follows a property definition on the same line or where\n      // minified code is being beautified.\n      this._output.add_new_line();\n      this._input.back();\n\n      var comment = this._input.read(block_comment_pattern);\n\n      // Handle ignore directive\n      var directives = directives_core.get_directives(comment);\n      if (directives && directives.ignore === \'start\') {\n        comment += directives_core.readIgnored(this._input);\n      }\n\n      this.print_string(comment);\n\n      // Ensures any new lines following the comment are preserved\n      this.eatWhitespace(true);\n\n      // Block comments are followed by a new line so they don\'t\n      // share a line with other properties\n      this._output.add_new_line();\n    } else if (this._ch === \'/\' && this._input.peek() === \'/\') {\n      // // single line comment\n      // Preserves the space before a comment\n      // on the same line as a rule\n      this._output.space_before_token = true;\n      this._input.back();\n      this.print_string(this._input.read(comment_pattern));\n\n      // Ensures any new lines following the comment are preserved\n      this.eatWhitespace(true);\n    } else if (this._ch === \'@\') {\n      this.preserveSingleSpace(isAfterSpace);\n\n      // deal with less propery mixins @{...}\n      if (this._input.peek() === \'{\') {\n        this.print_string(this._ch + this.eatString(\'}\'));\n      } else {\n        this.print_string(this._ch);\n\n        // strip trailing space, if present, for hash property checks\n        var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\\]\\/=\'"]/g);\n\n        if (variableOrRule.match(/[ :]$/)) {\n          // we have a variable or pseudo-class, add it and insert one space before continuing\n          variableOrRule = this.eatString(": ").replace(/\\s$/, \'\');\n          this.print_string(variableOrRule);\n          this._output.space_before_token = true;\n        }\n\n        variableOrRule = variableOrRule.replace(/\\s$/, \'\');\n\n        if (variableOrRule === \'extend\') {\n          insideAtExtend = true;\n        } else if (variableOrRule === \'import\') {\n          insideAtImport = true;\n        }\n\n        // might be a nesting at-rule\n        if (variableOrRule in this.NESTED_AT_RULE) {\n          this._nestedLevel += 1;\n          if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {\n            enteringConditionalGroup = true;\n          }\n          // might be less variable\n        } else if (!insideRule && parenLevel === 0 && variableOrRule.indexOf(\':\') !== -1) {\n          insidePropertyValue = true;\n          this.indent();\n        }\n      }\n    } else if (this._ch === \'#\' && this._input.peek() === \'{\') {\n      this.preserveSingleSpace(isAfterSpace);\n      this.print_string(this._ch + this.eatString(\'}\'));\n    } else if (this._ch === \'{\') {\n      if (insidePropertyValue) {\n        insidePropertyValue = false;\n        this.outdent();\n      }\n\n      // when entering conditional groups, only rulesets are allowed\n      if (enteringConditionalGroup) {\n        enteringConditionalGroup = false;\n        insideRule = (this._indentLevel >= this._nestedLevel);\n      } else {\n        // otherwise, declarations are also allowed\n        insideRule = (this._indentLevel >= this._nestedLevel - 1);\n      }\n      if (this._options.newline_between_rules && insideRule) {\n        if (this._output.previous_line && this._output.previous_line.item(-1) !== \'{\') {\n          this._output.ensure_empty_line_above(\'/\', \',\');\n        }\n      }\n\n      this._output.space_before_token = true;\n\n      // The difference in print_string and indent order is necessary to indent the \'{\' correctly\n      if (this._options.brace_style === \'expand\') {\n        this._output.add_new_line();\n        this.print_string(this._ch);\n        this.indent();\n        this._output.set_indent(this._indentLevel);\n      } else {\n        this.indent();\n        this.print_string(this._ch);\n      }\n\n      this.eatWhitespace(true);\n      this._output.add_new_line();\n    } else if (this._ch === \'}\') {\n      this.outdent();\n      this._output.add_new_line();\n      if (previous_ch === \'{\') {\n        this._output.trim(true);\n      }\n      insideAtImport = false;\n      insideAtExtend = false;\n      if (insidePropertyValue) {\n        this.outdent();\n        insidePropertyValue = false;\n      }\n      this.print_string(this._ch);\n      insideRule = false;\n      if (this._nestedLevel) {\n        this._nestedLevel--;\n      }\n\n      this.eatWhitespace(true);\n      this._output.add_new_line();\n\n      if (this._options.newline_between_rules && !this._output.just_added_blankline()) {\n        if (this._input.peek() !== \'}\') {\n          this._output.add_new_line(true);\n        }\n      }\n    } else if (this._ch === ":") {\n      if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !insideAtExtend && parenLevel === 0) {\n        // \'property: value\' delimiter\n        // which could be in a conditional group query\n        this.print_string(\':\');\n        if (!insidePropertyValue) {\n          insidePropertyValue = true;\n          this._output.space_before_token = true;\n          this.eatWhitespace(true);\n          this.indent();\n        }\n      } else {\n        // sass/less parent reference don\'t use a space\n        // sass nested pseudo-class don\'t use a space\n\n        // preserve space before pseudoclasses/pseudoelements, as it means "in any child"\n        if (this._input.lookBack(" ")) {\n          this._output.space_before_token = true;\n        }\n        if (this._input.peek() === ":") {\n          // pseudo-element\n          this._ch = this._input.next();\n          this.print_string("::");\n        } else {\n          // pseudo-class\n          this.print_string(\':\');\n        }\n      }\n    } else if (this._ch === \'"\' || this._ch === \'\\\'\') {\n      this.preserveSingleSpace(isAfterSpace);\n      this.print_string(this._ch + this.eatString(this._ch));\n      this.eatWhitespace(true);\n    } else if (this._ch === \';\') {\n      if (parenLevel === 0) {\n        if (insidePropertyValue) {\n          this.outdent();\n          insidePropertyValue = false;\n        }\n        insideAtExtend = false;\n        insideAtImport = false;\n        this.print_string(this._ch);\n        this.eatWhitespace(true);\n\n        // This maintains single line comments on the same\n        // line. Block comments are also affected, but\n        // a new line is always output before one inside\n        // that section\n        if (this._input.peek() !== \'/\') {\n          this._output.add_new_line();\n        }\n      } else {\n        this.print_string(this._ch);\n        this.eatWhitespace(true);\n        this._output.space_before_token = true;\n      }\n    } else if (this._ch === \'(\') { // may be a url\n      if (this._input.lookBack("url")) {\n        this.print_string(this._ch);\n        this.eatWhitespace();\n        parenLevel++;\n        this.indent();\n        this._ch = this._input.next();\n        if (this._ch === \')\' || this._ch === \'"\' || this._ch === \'\\\'\') {\n          this._input.back();\n        } else if (this._ch) {\n          this.print_string(this._ch + this.eatString(\')\'));\n          if (parenLevel) {\n            parenLevel--;\n            this.outdent();\n          }\n        }\n      } else {\n        this.preserveSingleSpace(isAfterSpace);\n        this.print_string(this._ch);\n        this.eatWhitespace();\n        parenLevel++;\n        this.indent();\n      }\n    } else if (this._ch === \')\') {\n      if (parenLevel) {\n        parenLevel--;\n        this.outdent();\n      }\n      this.print_string(this._ch);\n    } else if (this._ch === \',\') {\n      this.print_string(this._ch);\n      this.eatWhitespace(true);\n      if (this._options.selector_separator_newline && !insidePropertyValue && parenLevel === 0 && !insideAtImport) {\n        this._output.add_new_line();\n      } else {\n        this._output.space_before_token = true;\n      }\n    } else if ((this._ch === \'>\' || this._ch === \'+\' || this._ch === \'~\') && !insidePropertyValue && parenLevel === 0) {\n      //handle combinator spacing\n      if (this._options.space_around_combinator) {\n        this._output.space_before_token = true;\n        this.print_string(this._ch);\n        this._output.space_before_token = true;\n      } else {\n        this.print_string(this._ch);\n        this.eatWhitespace();\n        // squash extra whitespace\n        if (this._ch && whitespaceChar.test(this._ch)) {\n          this._ch = \'\';\n        }\n      }\n    } else if (this._ch === \']\') {\n      this.print_string(this._ch);\n    } else if (this._ch === \'[\') {\n      this.preserveSingleSpace(isAfterSpace);\n      this.print_string(this._ch);\n    } else if (this._ch === \'=\') { // no whitespace before or after\n      this.eatWhitespace();\n      this.print_string(\'=\');\n      if (whitespaceChar.test(this._ch)) {\n        this._ch = \'\';\n      }\n    } else if (this._ch === \'!\' && !this._input.lookBack("\\\\")) { // !important\n      this.print_string(\' \');\n      this.print_string(this._ch);\n    } else {\n      this.preserveSingleSpace(isAfterSpace);\n      this.print_string(this._ch);\n    }\n  }\n\n  var sweetCode = this._output.get_code(eol);\n\n  return sweetCode;\n};\n\nmodule.exports.Beautifier = Beautifier;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_51059__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar BaseOptions = __nested_webpack_require_51059__(6).Options;\n\nfunction Options(options) {\n  BaseOptions.call(this, options, \'css\');\n\n  this.selector_separator_newline = this._get_boolean(\'selector_separator_newline\', true);\n  this.newline_between_rules = this._get_boolean(\'newline_between_rules\', true);\n  var space_around_selector_separator = this._get_boolean(\'space_around_selector_separator\');\n  this.space_around_combinator = this._get_boolean(\'space_around_combinator\') || space_around_selector_separator;\n\n  var brace_style_split = this._get_selection_list(\'brace_style\', [\'collapse\', \'expand\', \'end-expand\', \'none\', \'preserve-inline\']);\n  this.brace_style = \'collapse\';\n  for (var bs = 0; bs < brace_style_split.length; bs++) {\n    if (brace_style_split[bs] !== \'expand\') {\n      // default to collapse, as only collapse|expand is implemented for now\n      this.brace_style = \'collapse\';\n    } else {\n      this.brace_style = brace_style_split[bs];\n    }\n  }\n}\nOptions.prototype = new BaseOptions();\n\n\n\nmodule.exports.Options = Options;\n\n\n/***/ })\n/******/ ]);\n\nvar css_beautify = legacy_beautify_css;\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-html.js\n// copied from js-beautify/js/lib/beautify-html.js\n// version: 1.13.4\n/* AUTO-GENERATED. DO NOT MODIFY. */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>\n    https://beautifier.io/\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_inner_html (default false)  — indent <head> and <body> sections,\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)\n    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n    inline (defaults to inline tags) - list of tags to be considered inline tags\n    unformatted (defaults to inline tags) - list of tags, that shouldn\'t be reformatted\n    content_unformatted (defaults to ["pre", "textarea"] tags) - list of tags, whose content shouldn\'t be reformatted\n    indent_scripts (default normal)  - "keep"|"separate"|"normal"\n    preserve_newlines (default true) - whether existing line breaks before elements should be preserved\n                                        Only works before elements, not inside tags or for text.\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk\n    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}\n    end_with_newline (false)          - end with a newline\n    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.\n\n    e.g.\n\n    style_html(html_source, {\n      \'indent_inner_html\': false,\n      \'indent_size\': 2,\n      \'indent_char\': \' \',\n      \'wrap_line_length\': 78,\n      \'brace_style\': \'expand\',\n      \'preserve_newlines\': true,\n      \'max_preserve_newlines\': 5,\n      \'indent_handlebars\': false,\n      \'extra_liners\': [\'/html\']\n    });\n*/\n\n\n\n\nvar legacy_beautify_html =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_3670__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_3670__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_3670__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_3670__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_3670__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_3670__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_3670__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, \'__esModule\', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_3670__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_3670__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === \'object\' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_3670__.r(ns);\n/******/ \t\tObject.defineProperty(ns, \'default\', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != \'string\') for(var key in value) __nested_webpack_require_3670__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_3670__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module[\'default\']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_3670__.d(getter, \'a\', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_3670__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_3670__.p = "";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_3670__(__nested_webpack_require_3670__.s = 18);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */,\n/* 1 */,\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction OutputLine(parent) {\n  this.__parent = parent;\n  this.__character_count = 0;\n  // use indent_count as a marker for this.__lines that have preserved indentation\n  this.__indent_count = -1;\n  this.__alignment_count = 0;\n  this.__wrap_point_index = 0;\n  this.__wrap_point_character_count = 0;\n  this.__wrap_point_indent_count = -1;\n  this.__wrap_point_alignment_count = 0;\n\n  this.__items = [];\n}\n\nOutputLine.prototype.clone_empty = function() {\n  var line = new OutputLine(this.__parent);\n  line.set_indent(this.__indent_count, this.__alignment_count);\n  return line;\n};\n\nOutputLine.prototype.item = function(index) {\n  if (index < 0) {\n    return this.__items[this.__items.length + index];\n  } else {\n    return this.__items[index];\n  }\n};\n\nOutputLine.prototype.has_match = function(pattern) {\n  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n    if (this.__items[lastCheckedOutput].match(pattern)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nOutputLine.prototype.set_indent = function(indent, alignment) {\n  if (this.is_empty()) {\n    this.__indent_count = indent || 0;\n    this.__alignment_count = alignment || 0;\n    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n  }\n};\n\nOutputLine.prototype._set_wrap_point = function() {\n  if (this.__parent.wrap_line_length) {\n    this.__wrap_point_index = this.__items.length;\n    this.__wrap_point_character_count = this.__character_count;\n    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n  }\n};\n\nOutputLine.prototype._should_wrap = function() {\n  return this.__wrap_point_index &&\n    this.__character_count > this.__parent.wrap_line_length &&\n    this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n};\n\nOutputLine.prototype._allow_wrap = function() {\n  if (this._should_wrap()) {\n    this.__parent.add_new_line();\n    var next = this.__parent.current_line;\n    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n    next.__items = this.__items.slice(this.__wrap_point_index);\n    this.__items = this.__items.slice(0, this.__wrap_point_index);\n\n    next.__character_count += this.__character_count - this.__wrap_point_character_count;\n    this.__character_count = this.__wrap_point_character_count;\n\n    if (next.__items[0] === " ") {\n      next.__items.splice(0, 1);\n      next.__character_count -= 1;\n    }\n    return true;\n  }\n  return false;\n};\n\nOutputLine.prototype.is_empty = function() {\n  return this.__items.length === 0;\n};\n\nOutputLine.prototype.last = function() {\n  if (!this.is_empty()) {\n    return this.__items[this.__items.length - 1];\n  } else {\n    return null;\n  }\n};\n\nOutputLine.prototype.push = function(item) {\n  this.__items.push(item);\n  var last_newline_index = item.lastIndexOf(\'\\n\');\n  if (last_newline_index !== -1) {\n    this.__character_count = item.length - last_newline_index;\n  } else {\n    this.__character_count += item.length;\n  }\n};\n\nOutputLine.prototype.pop = function() {\n  var item = null;\n  if (!this.is_empty()) {\n    item = this.__items.pop();\n    this.__character_count -= item.length;\n  }\n  return item;\n};\n\n\nOutputLine.prototype._remove_indent = function() {\n  if (this.__indent_count > 0) {\n    this.__indent_count -= 1;\n    this.__character_count -= this.__parent.indent_size;\n  }\n};\n\nOutputLine.prototype._remove_wrap_indent = function() {\n  if (this.__wrap_point_indent_count > 0) {\n    this.__wrap_point_indent_count -= 1;\n  }\n};\nOutputLine.prototype.trim = function() {\n  while (this.last() === \' \') {\n    this.__items.pop();\n    this.__character_count -= 1;\n  }\n};\n\nOutputLine.prototype.toString = function() {\n  var result = \'\';\n  if (this.is_empty()) {\n    if (this.__parent.indent_empty_lines) {\n      result = this.__parent.get_indent_string(this.__indent_count);\n    }\n  } else {\n    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n    result += this.__items.join(\'\');\n  }\n  return result;\n};\n\nfunction IndentStringCache(options, baseIndentString) {\n  this.__cache = [\'\'];\n  this.__indent_size = options.indent_size;\n  this.__indent_string = options.indent_char;\n  if (!options.indent_with_tabs) {\n    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n  }\n\n  // Set to null to continue support for auto detection of base indent\n  baseIndentString = baseIndentString || \'\';\n  if (options.indent_level > 0) {\n    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n  }\n\n  this.__base_string = baseIndentString;\n  this.__base_string_length = baseIndentString.length;\n}\n\nIndentStringCache.prototype.get_indent_size = function(indent, column) {\n  var result = this.__base_string_length;\n  column = column || 0;\n  if (indent < 0) {\n    result = 0;\n  }\n  result += indent * this.__indent_size;\n  result += column;\n  return result;\n};\n\nIndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n  var result = this.__base_string;\n  column = column || 0;\n  if (indent_level < 0) {\n    indent_level = 0;\n    result = \'\';\n  }\n  column += indent_level * this.__indent_size;\n  this.__ensure_cache(column);\n  result += this.__cache[column];\n  return result;\n};\n\nIndentStringCache.prototype.__ensure_cache = function(column) {\n  while (column >= this.__cache.length) {\n    this.__add_column();\n  }\n};\n\nIndentStringCache.prototype.__add_column = function() {\n  var column = this.__cache.length;\n  var indent = 0;\n  var result = \'\';\n  if (this.__indent_size && column >= this.__indent_size) {\n    indent = Math.floor(column / this.__indent_size);\n    column -= indent * this.__indent_size;\n    result = new Array(indent + 1).join(this.__indent_string);\n  }\n  if (column) {\n    result += new Array(column + 1).join(\' \');\n  }\n\n  this.__cache.push(result);\n};\n\nfunction Output(options, baseIndentString) {\n  this.__indent_cache = new IndentStringCache(options, baseIndentString);\n  this.raw = false;\n  this._end_with_newline = options.end_with_newline;\n  this.indent_size = options.indent_size;\n  this.wrap_line_length = options.wrap_line_length;\n  this.indent_empty_lines = options.indent_empty_lines;\n  this.__lines = [];\n  this.previous_line = null;\n  this.current_line = null;\n  this.next_line = new OutputLine(this);\n  this.space_before_token = false;\n  this.non_breaking_space = false;\n  this.previous_token_wrapped = false;\n  // initialize\n  this.__add_outputline();\n}\n\nOutput.prototype.__add_outputline = function() {\n  this.previous_line = this.current_line;\n  this.current_line = this.next_line.clone_empty();\n  this.__lines.push(this.current_line);\n};\n\nOutput.prototype.get_line_number = function() {\n  return this.__lines.length;\n};\n\nOutput.prototype.get_indent_string = function(indent, column) {\n  return this.__indent_cache.get_indent_string(indent, column);\n};\n\nOutput.prototype.get_indent_size = function(indent, column) {\n  return this.__indent_cache.get_indent_size(indent, column);\n};\n\nOutput.prototype.is_empty = function() {\n  return !this.previous_line && this.current_line.is_empty();\n};\n\nOutput.prototype.add_new_line = function(force_newline) {\n  // never newline at the start of file\n  // otherwise, newline only if we didn\'t just add one or we\'re forced\n  if (this.is_empty() ||\n    (!force_newline && this.just_added_newline())) {\n    return false;\n  }\n\n  // if raw output is enabled, don\'t print additional newlines,\n  // but still return True as though you had\n  if (!this.raw) {\n    this.__add_outputline();\n  }\n  return true;\n};\n\nOutput.prototype.get_code = function(eol) {\n  this.trim(true);\n\n  // handle some edge cases where the last tokens\n  // has text that ends with newline(s)\n  var last_item = this.current_line.pop();\n  if (last_item) {\n    if (last_item[last_item.length - 1] === \'\\n\') {\n      last_item = last_item.replace(/\\n+$/g, \'\');\n    }\n    this.current_line.push(last_item);\n  }\n\n  if (this._end_with_newline) {\n    this.__add_outputline();\n  }\n\n  var sweet_code = this.__lines.join(\'\\n\');\n\n  if (eol !== \'\\n\') {\n    sweet_code = sweet_code.replace(/[\\n]/g, eol);\n  }\n  return sweet_code;\n};\n\nOutput.prototype.set_wrap_point = function() {\n  this.current_line._set_wrap_point();\n};\n\nOutput.prototype.set_indent = function(indent, alignment) {\n  indent = indent || 0;\n  alignment = alignment || 0;\n\n  // Next line stores alignment values\n  this.next_line.set_indent(indent, alignment);\n\n  // Never indent your first output indent at the start of the file\n  if (this.__lines.length > 1) {\n    this.current_line.set_indent(indent, alignment);\n    return true;\n  }\n\n  this.current_line.set_indent();\n  return false;\n};\n\nOutput.prototype.add_raw_token = function(token) {\n  for (var x = 0; x < token.newlines; x++) {\n    this.__add_outputline();\n  }\n  this.current_line.set_indent(-1);\n  this.current_line.push(token.whitespace_before);\n  this.current_line.push(token.text);\n  this.space_before_token = false;\n  this.non_breaking_space = false;\n  this.previous_token_wrapped = false;\n};\n\nOutput.prototype.add_token = function(printable_token) {\n  this.__add_space_before_token();\n  this.current_line.push(printable_token);\n  this.space_before_token = false;\n  this.non_breaking_space = false;\n  this.previous_token_wrapped = this.current_line._allow_wrap();\n};\n\nOutput.prototype.__add_space_before_token = function() {\n  if (this.space_before_token && !this.just_added_newline()) {\n    if (!this.non_breaking_space) {\n      this.set_wrap_point();\n    }\n    this.current_line.push(\' \');\n  }\n};\n\nOutput.prototype.remove_indent = function(index) {\n  var output_length = this.__lines.length;\n  while (index < output_length) {\n    this.__lines[index]._remove_indent();\n    index++;\n  }\n  this.current_line._remove_wrap_indent();\n};\n\nOutput.prototype.trim = function(eat_newlines) {\n  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n  this.current_line.trim();\n\n  while (eat_newlines && this.__lines.length > 1 &&\n    this.current_line.is_empty()) {\n    this.__lines.pop();\n    this.current_line = this.__lines[this.__lines.length - 1];\n    this.current_line.trim();\n  }\n\n  this.previous_line = this.__lines.length > 1 ?\n    this.__lines[this.__lines.length - 2] : null;\n};\n\nOutput.prototype.just_added_newline = function() {\n  return this.current_line.is_empty();\n};\n\nOutput.prototype.just_added_blankline = function() {\n  return this.is_empty() ||\n    (this.current_line.is_empty() && this.previous_line.is_empty());\n};\n\nOutput.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n  var index = this.__lines.length - 2;\n  while (index >= 0) {\n    var potentialEmptyLine = this.__lines[index];\n    if (potentialEmptyLine.is_empty()) {\n      break;\n    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&\n      potentialEmptyLine.item(-1) !== ends_with) {\n      this.__lines.splice(index + 1, 0, new OutputLine(this));\n      this.previous_line = this.__lines[this.__lines.length - 2];\n      break;\n    }\n    index--;\n  }\n};\n\nmodule.exports.Output = Output;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction Token(type, text, newlines, whitespace_before) {\n  this.type = type;\n  this.text = text;\n\n  // comments_before are\n  // comments that have a new line before them\n  // and may or may not have a newline after\n  // this is a set of comments before\n  this.comments_before = null; /* inline comment*/\n\n\n  // this.comments_after =  new TokenStream(); // no new line before and newline after\n  this.newlines = newlines || 0;\n  this.whitespace_before = whitespace_before || \'\';\n  this.parent = null;\n  this.next = null;\n  this.previous = null;\n  this.opened = null;\n  this.closed = null;\n  this.directives = null;\n}\n\n\nmodule.exports.Token = Token;\n\n\n/***/ }),\n/* 4 */,\n/* 5 */,\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction Options(options, merge_child_field) {\n  this.raw_options = _mergeOpts(options, merge_child_field);\n\n  // Support passing the source text back with no change\n  this.disabled = this._get_boolean(\'disabled\');\n\n  this.eol = this._get_characters(\'eol\', \'auto\');\n  this.end_with_newline = this._get_boolean(\'end_with_newline\');\n  this.indent_size = this._get_number(\'indent_size\', 4);\n  this.indent_char = this._get_characters(\'indent_char\', \' \');\n  this.indent_level = this._get_number(\'indent_level\');\n\n  this.preserve_newlines = this._get_boolean(\'preserve_newlines\', true);\n  this.max_preserve_newlines = this._get_number(\'max_preserve_newlines\', 32786);\n  if (!this.preserve_newlines) {\n    this.max_preserve_newlines = 0;\n  }\n\n  this.indent_with_tabs = this._get_boolean(\'indent_with_tabs\', this.indent_char === \'\\t\');\n  if (this.indent_with_tabs) {\n    this.indent_char = \'\\t\';\n\n    // indent_size behavior changed after 1.8.6\n    // It used to be that indent_size would be\n    // set to 1 for indent_with_tabs. That is no longer needed and\n    // actually doesn\'t make sense - why not use spaces? Further,\n    // that might produce unexpected behavior - tabs being used\n    // for single-column alignment. So, when indent_with_tabs is true\n    // and indent_size is 1, reset indent_size to 4.\n    if (this.indent_size === 1) {\n      this.indent_size = 4;\n    }\n  }\n\n  // Backwards compat with 1.3.x\n  this.wrap_line_length = this._get_number(\'wrap_line_length\', this._get_number(\'max_char\'));\n\n  this.indent_empty_lines = this._get_boolean(\'indent_empty_lines\');\n\n  // valid templating languages [\'django\', \'erb\', \'handlebars\', \'php\', \'smarty\']\n  // For now, \'auto\' = all off for javascript, all on for html (and inline javascript).\n  // other values ignored\n  this.templating = this._get_selection_list(\'templating\', [\'auto\', \'none\', \'django\', \'erb\', \'handlebars\', \'php\', \'smarty\'], [\'auto\']);\n}\n\nOptions.prototype._get_array = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  var result = default_value || [];\n  if (typeof option_value === \'object\') {\n    if (option_value !== null && typeof option_value.concat === \'function\') {\n      result = option_value.concat();\n    }\n  } else if (typeof option_value === \'string\') {\n    result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n  }\n  return result;\n};\n\nOptions.prototype._get_boolean = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  var result = option_value === undefined ? !!default_value : !!option_value;\n  return result;\n};\n\nOptions.prototype._get_characters = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  var result = default_value || \'\';\n  if (typeof option_value === \'string\') {\n    result = option_value.replace(/\\\\r/, \'\\r\').replace(/\\\\n/, \'\\n\').replace(/\\\\t/, \'\\t\');\n  }\n  return result;\n};\n\nOptions.prototype._get_number = function(name, default_value) {\n  var option_value = this.raw_options[name];\n  default_value = parseInt(default_value, 10);\n  if (isNaN(default_value)) {\n    default_value = 0;\n  }\n  var result = parseInt(option_value, 10);\n  if (isNaN(result)) {\n    result = default_value;\n  }\n  return result;\n};\n\nOptions.prototype._get_selection = function(name, selection_list, default_value) {\n  var result = this._get_selection_list(name, selection_list, default_value);\n  if (result.length !== 1) {\n    throw new Error(\n      "Invalid Option Value: The option \'" + name + "\' can only be one of the following values:\\n" +\n      selection_list + "\\nYou passed in: \'" + this.raw_options[name] + "\'");\n  }\n\n  return result[0];\n};\n\n\nOptions.prototype._get_selection_list = function(name, selection_list, default_value) {\n  if (!selection_list || selection_list.length === 0) {\n    throw new Error("Selection list cannot be empty.");\n  }\n\n  default_value = default_value || [selection_list[0]];\n  if (!this._is_valid_selection(default_value, selection_list)) {\n    throw new Error("Invalid Default Value!");\n  }\n\n  var result = this._get_array(name, default_value);\n  if (!this._is_valid_selection(result, selection_list)) {\n    throw new Error(\n      "Invalid Option Value: The option \'" + name + "\' can contain only the following values:\\n" +\n      selection_list + "\\nYou passed in: \'" + this.raw_options[name] + "\'");\n  }\n\n  return result;\n};\n\nOptions.prototype._is_valid_selection = function(result, selection_list) {\n  return result.length && selection_list.length &&\n    !result.some(function(item) { return selection_list.indexOf(item) === -1; });\n};\n\n\n// merges child options up with the parent options object\n// Example: obj = {a: 1, b: {a: 2}}\n//          mergeOpts(obj, \'b\')\n//\n//          Returns: {a: 2}\nfunction _mergeOpts(allOptions, childFieldName) {\n  var finalOpts = {};\n  allOptions = _normalizeOpts(allOptions);\n  var name;\n\n  for (name in allOptions) {\n    if (name !== childFieldName) {\n      finalOpts[name] = allOptions[name];\n    }\n  }\n\n  //merge in the per type settings for the childFieldName\n  if (childFieldName && allOptions[childFieldName]) {\n    for (name in allOptions[childFieldName]) {\n      finalOpts[name] = allOptions[childFieldName][name];\n    }\n  }\n  return finalOpts;\n}\n\nfunction _normalizeOpts(options) {\n  var convertedOpts = {};\n  var key;\n\n  for (key in options) {\n    var newKey = key.replace(/-/g, "_");\n    convertedOpts[newKey] = options[key];\n  }\n  return convertedOpts;\n}\n\nmodule.exports.Options = Options;\nmodule.exports.normalizeOpts = _normalizeOpts;\nmodule.exports.mergeOpts = _mergeOpts;\n\n\n/***/ }),\n/* 7 */,\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar regexp_has_sticky = RegExp.prototype.hasOwnProperty(\'sticky\');\n\nfunction InputScanner(input_string) {\n  this.__input = input_string || \'\';\n  this.__input_length = this.__input.length;\n  this.__position = 0;\n}\n\nInputScanner.prototype.restart = function() {\n  this.__position = 0;\n};\n\nInputScanner.prototype.back = function() {\n  if (this.__position > 0) {\n    this.__position -= 1;\n  }\n};\n\nInputScanner.prototype.hasNext = function() {\n  return this.__position < this.__input_length;\n};\n\nInputScanner.prototype.next = function() {\n  var val = null;\n  if (this.hasNext()) {\n    val = this.__input.charAt(this.__position);\n    this.__position += 1;\n  }\n  return val;\n};\n\nInputScanner.prototype.peek = function(index) {\n  var val = null;\n  index = index || 0;\n  index += this.__position;\n  if (index >= 0 && index < this.__input_length) {\n    val = this.__input.charAt(index);\n  }\n  return val;\n};\n\n// This is a JavaScript only helper function (not in python)\n// Javascript doesn\'t have a match method\n// and not all implementation support "sticky" flag.\n// If they do not support sticky then both this.match() and this.test() method\n// must get the match and check the index of the match.\n// If sticky is supported and set, this method will use it.\n// Otherwise it will check that global is set, and fall back to the slower method.\nInputScanner.prototype.__match = function(pattern, index) {\n  pattern.lastIndex = index;\n  var pattern_match = pattern.exec(this.__input);\n\n  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n    if (pattern_match.index !== index) {\n      pattern_match = null;\n    }\n  }\n\n  return pattern_match;\n};\n\nInputScanner.prototype.test = function(pattern, index) {\n  index = index || 0;\n  index += this.__position;\n\n  if (index >= 0 && index < this.__input_length) {\n    return !!this.__match(pattern, index);\n  } else {\n    return false;\n  }\n};\n\nInputScanner.prototype.testChar = function(pattern, index) {\n  // test one character regex match\n  var val = this.peek(index);\n  pattern.lastIndex = 0;\n  return val !== null && pattern.test(val);\n};\n\nInputScanner.prototype.match = function(pattern) {\n  var pattern_match = this.__match(pattern, this.__position);\n  if (pattern_match) {\n    this.__position += pattern_match[0].length;\n  } else {\n    pattern_match = null;\n  }\n  return pattern_match;\n};\n\nInputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n  var val = \'\';\n  var match;\n  if (starting_pattern) {\n    match = this.match(starting_pattern);\n    if (match) {\n      val += match[0];\n    }\n  }\n  if (until_pattern && (match || !starting_pattern)) {\n    val += this.readUntil(until_pattern, until_after);\n  }\n  return val;\n};\n\nInputScanner.prototype.readUntil = function(pattern, until_after) {\n  var val = \'\';\n  var match_index = this.__position;\n  pattern.lastIndex = this.__position;\n  var pattern_match = pattern.exec(this.__input);\n  if (pattern_match) {\n    match_index = pattern_match.index;\n    if (until_after) {\n      match_index += pattern_match[0].length;\n    }\n  } else {\n    match_index = this.__input_length;\n  }\n\n  val = this.__input.substring(this.__position, match_index);\n  this.__position = match_index;\n  return val;\n};\n\nInputScanner.prototype.readUntilAfter = function(pattern) {\n  return this.readUntil(pattern, true);\n};\n\nInputScanner.prototype.get_regexp = function(pattern, match_from) {\n  var result = null;\n  var flags = \'g\';\n  if (match_from && regexp_has_sticky) {\n    flags = \'y\';\n  }\n  // strings are converted to regexp\n  if (typeof pattern === "string" && pattern !== \'\') {\n    // result = new RegExp(pattern.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \'\\\\$&\'), flags);\n    result = new RegExp(pattern, flags);\n  } else if (pattern) {\n    result = new RegExp(pattern.source, flags);\n  }\n  return result;\n};\n\nInputScanner.prototype.get_literal_regexp = function(literal_string) {\n  return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \'\\\\$&\'));\n};\n\n/* css beautifier legacy helpers */\nInputScanner.prototype.peekUntilAfter = function(pattern) {\n  var start = this.__position;\n  var val = this.readUntilAfter(pattern);\n  this.__position = start;\n  return val;\n};\n\nInputScanner.prototype.lookBack = function(testVal) {\n  var start = this.__position - 1;\n  return start >= testVal.length && this.__input.substring(start - testVal.length, start)\n    .toLowerCase() === testVal;\n};\n\nmodule.exports.InputScanner = InputScanner;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __nested_webpack_require_34057__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar InputScanner = __nested_webpack_require_34057__(8).InputScanner;\nvar Token = __nested_webpack_require_34057__(3).Token;\nvar TokenStream = __nested_webpack_require_34057__(10).TokenStream;\nvar WhitespacePattern = __nested_webpack_require_34057__(11).WhitespacePattern;\n\nvar TOKEN = {\n  START: \'TK_START\',\n  RAW: \'TK_RAW\',\n  EOF: \'TK_EOF\'\n};\n\nvar Tokenizer = function(input_string, options) {\n  this._input = new InputScanner(input_string);\n  this._options = options || {};\n  this.__tokens = null;\n\n  this._patterns = {};\n  this._patterns.whitespace = new WhitespacePattern(this._input);\n};\n\nTokenizer.prototype.tokenize = function() {\n  this._input.restart();\n  this.__tokens = new TokenStream();\n\n  this._reset();\n\n  var current;\n  var previous = new Token(TOKEN.START, \'\');\n  var open_token = null;\n  var open_stack = [];\n  var comments = new TokenStream();\n\n  while (previous.type !== TOKEN.EOF) {\n    current = this._get_next_token(previous, open_token);\n    while (this._is_comment(current)) {\n      comments.add(current);\n      current = this._get_next_token(previous, open_token);\n    }\n\n    if (!comments.isEmpty()) {\n      current.comments_before = comments;\n      comments = new TokenStream();\n    }\n\n    current.parent = open_token;\n\n    if (this._is_opening(current)) {\n      open_stack.push(open_token);\n      open_token = current;\n    } else if (open_token && this._is_closing(current, open_token)) {\n      current.opened = open_token;\n      open_token.closed = current;\n      open_token = open_stack.pop();\n      current.parent = open_token;\n    }\n\n    current.previous = previous;\n    previous.next = current;\n\n    this.__tokens.add(current);\n    previous = current;\n  }\n\n  return this.__tokens;\n};\n\n\nTokenizer.prototype._is_first_token = function() {\n  return this.__tokens.isEmpty();\n};\n\nTokenizer.prototype._reset = function() {};\n\nTokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false\n  this._readWhitespace();\n  var resulting_string = this._input.read(/.+/g);\n  if (resulting_string) {\n    return this._create_token(TOKEN.RAW, resulting_string);\n  } else {\n    return this._create_token(TOKEN.EOF, \'\');\n  }\n};\n\nTokenizer.prototype._is_comment = function(current_token) { // jshint unused:false\n  return false;\n};\n\nTokenizer.prototype._is_opening = function(current_token) { // jshint unused:false\n  return false;\n};\n\nTokenizer.prototype._is_closing = function(current_token, open_token) { // jshint unused:false\n  return false;\n};\n\nTokenizer.prototype._create_token = function(type, text) {\n  var token = new Token(type, text,\n    this._patterns.whitespace.newline_count,\n    this._patterns.whitespace.whitespace_before_token);\n  return token;\n};\n\nTokenizer.prototype._readWhitespace = function() {\n  return this._patterns.whitespace.read();\n};\n\n\n\nmodule.exports.Tokenizer = Tokenizer;\nmodule.exports.TOKEN = TOKEN;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction TokenStream(parent_token) {\n  // private\n  this.__tokens = [];\n  this.__tokens_length = this.__tokens.length;\n  this.__position = 0;\n  this.__parent_token = parent_token;\n}\n\nTokenStream.prototype.restart = function() {\n  this.__position = 0;\n};\n\nTokenStream.prototype.isEmpty = function() {\n  return this.__tokens_length === 0;\n};\n\nTokenStream.prototype.hasNext = function() {\n  return this.__position < this.__tokens_length;\n};\n\nTokenStream.prototype.next = function() {\n  var val = null;\n  if (this.hasNext()) {\n    val = this.__tokens[this.__position];\n    this.__position += 1;\n  }\n  return val;\n};\n\nTokenStream.prototype.peek = function(index) {\n  var val = null;\n  index = index || 0;\n  index += this.__position;\n  if (index >= 0 && index < this.__tokens_length) {\n    val = this.__tokens[index];\n  }\n  return val;\n};\n\nTokenStream.prototype.add = function(token) {\n  if (this.__parent_token) {\n    token.parent = this.__parent_token;\n  }\n  this.__tokens.push(token);\n  this.__tokens_length += 1;\n};\n\nmodule.exports.TokenStream = TokenStream;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_40510__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar Pattern = __nested_webpack_require_40510__(12).Pattern;\n\nfunction WhitespacePattern(input_scanner, parent) {\n  Pattern.call(this, input_scanner, parent);\n  if (parent) {\n    this._line_regexp = this._input.get_regexp(parent._line_regexp);\n  } else {\n    this.__set_whitespace_patterns(\'\', \'\');\n  }\n\n  this.newline_count = 0;\n  this.whitespace_before_token = \'\';\n}\nWhitespacePattern.prototype = new Pattern();\n\nWhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {\n  whitespace_chars += \'\\\\t \';\n  newline_chars += \'\\\\n\\\\r\';\n\n  this._match_pattern = this._input.get_regexp(\n    \'[\' + whitespace_chars + newline_chars + \']+\', true);\n  this._newline_regexp = this._input.get_regexp(\n    \'\\\\r\\\\n|[\' + newline_chars + \']\');\n};\n\nWhitespacePattern.prototype.read = function() {\n  this.newline_count = 0;\n  this.whitespace_before_token = \'\';\n\n  var resulting_string = this._input.read(this._match_pattern);\n  if (resulting_string === \' \') {\n    this.whitespace_before_token = \' \';\n  } else if (resulting_string) {\n    var matches = this.__split(this._newline_regexp, resulting_string);\n    this.newline_count = matches.length - 1;\n    this.whitespace_before_token = matches[this.newline_count];\n  }\n\n  return resulting_string;\n};\n\nWhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {\n  var result = this._create();\n  result.__set_whitespace_patterns(whitespace_chars, newline_chars);\n  result._update();\n  return result;\n};\n\nWhitespacePattern.prototype._create = function() {\n  return new WhitespacePattern(this._input, this);\n};\n\nWhitespacePattern.prototype.__split = function(regexp, input_string) {\n  regexp.lastIndex = 0;\n  var start_index = 0;\n  var result = [];\n  var next_match = regexp.exec(input_string);\n  while (next_match) {\n    result.push(input_string.substring(start_index, next_match.index));\n    start_index = next_match.index + next_match[0].length;\n    next_match = regexp.exec(input_string);\n  }\n\n  if (start_index < input_string.length) {\n    result.push(input_string.substring(start_index, input_string.length));\n  } else {\n    result.push(\'\');\n  }\n\n  return result;\n};\n\n\n\nmodule.exports.WhitespacePattern = WhitespacePattern;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction Pattern(input_scanner, parent) {\n  this._input = input_scanner;\n  this._starting_pattern = null;\n  this._match_pattern = null;\n  this._until_pattern = null;\n  this._until_after = false;\n\n  if (parent) {\n    this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);\n    this._match_pattern = this._input.get_regexp(parent._match_pattern, true);\n    this._until_pattern = this._input.get_regexp(parent._until_pattern);\n    this._until_after = parent._until_after;\n  }\n}\n\nPattern.prototype.read = function() {\n  var result = this._input.read(this._starting_pattern);\n  if (!this._starting_pattern || result) {\n    result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);\n  }\n  return result;\n};\n\nPattern.prototype.read_match = function() {\n  return this._input.match(this._match_pattern);\n};\n\nPattern.prototype.until_after = function(pattern) {\n  var result = this._create();\n  result._until_after = true;\n  result._until_pattern = this._input.get_regexp(pattern);\n  result._update();\n  return result;\n};\n\nPattern.prototype.until = function(pattern) {\n  var result = this._create();\n  result._until_after = false;\n  result._until_pattern = this._input.get_regexp(pattern);\n  result._update();\n  return result;\n};\n\nPattern.prototype.starting_with = function(pattern) {\n  var result = this._create();\n  result._starting_pattern = this._input.get_regexp(pattern, true);\n  result._update();\n  return result;\n};\n\nPattern.prototype.matching = function(pattern) {\n  var result = this._create();\n  result._match_pattern = this._input.get_regexp(pattern, true);\n  result._update();\n  return result;\n};\n\nPattern.prototype._create = function() {\n  return new Pattern(this._input, this);\n};\n\nPattern.prototype._update = function() {};\n\nmodule.exports.Pattern = Pattern;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nfunction Directives(start_block_pattern, end_block_pattern) {\n  start_block_pattern = typeof start_block_pattern === \'string\' ? start_block_pattern : start_block_pattern.source;\n  end_block_pattern = typeof end_block_pattern === \'string\' ? end_block_pattern : end_block_pattern.source;\n  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \'g\');\n  this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n\n  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \'g\');\n}\n\nDirectives.prototype.get_directives = function(text) {\n  if (!text.match(this.__directives_block_pattern)) {\n    return null;\n  }\n\n  var directives = {};\n  this.__directive_pattern.lastIndex = 0;\n  var directive_match = this.__directive_pattern.exec(text);\n\n  while (directive_match) {\n    directives[directive_match[1]] = directive_match[2];\n    directive_match = this.__directive_pattern.exec(text);\n  }\n\n  return directives;\n};\n\nDirectives.prototype.readIgnored = function(input) {\n  return input.readUntilAfter(this.__directives_end_ignore_pattern);\n};\n\n\nmodule.exports.Directives = Directives;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __nested_webpack_require_49580__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar Pattern = __nested_webpack_require_49580__(12).Pattern;\n\n\nvar template_names = {\n  django: false,\n  erb: false,\n  handlebars: false,\n  php: false,\n  smarty: false\n};\n\n// This lets templates appear anywhere we would do a readUntil\n// The cost is higher but it is pay to play.\nfunction TemplatablePattern(input_scanner, parent) {\n  Pattern.call(this, input_scanner, parent);\n  this.__template_pattern = null;\n  this._disabled = Object.assign({}, template_names);\n  this._excluded = Object.assign({}, template_names);\n\n  if (parent) {\n    this.__template_pattern = this._input.get_regexp(parent.__template_pattern);\n    this._excluded = Object.assign(this._excluded, parent._excluded);\n    this._disabled = Object.assign(this._disabled, parent._disabled);\n  }\n  var pattern = new Pattern(input_scanner);\n  this.__patterns = {\n    handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),\n    handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),\n    handlebars: pattern.starting_with(/{{/).until_after(/}}/),\n    php: pattern.starting_with(/<\\?(?:[=]|php)/).until_after(/\\?>/),\n    erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),\n    // django coflicts with handlebars a bit.\n    django: pattern.starting_with(/{%/).until_after(/%}/),\n    django_value: pattern.starting_with(/{{/).until_after(/}}/),\n    django_comment: pattern.starting_with(/{#/).until_after(/#}/),\n    smarty: pattern.starting_with(/{(?=[^}{\\s\\n])/).until_after(/[^\\s\\n]}/),\n    smarty_comment: pattern.starting_with(/{\\*/).until_after(/\\*}/),\n    smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\\/literal}/)\n  };\n}\nTemplatablePattern.prototype = new Pattern();\n\nTemplatablePattern.prototype._create = function() {\n  return new TemplatablePattern(this._input, this);\n};\n\nTemplatablePattern.prototype._update = function() {\n  this.__set_templated_pattern();\n};\n\nTemplatablePattern.prototype.disable = function(language) {\n  var result = this._create();\n  result._disabled[language] = true;\n  result._update();\n  return result;\n};\n\nTemplatablePattern.prototype.read_options = function(options) {\n  var result = this._create();\n  for (var language in template_names) {\n    result._disabled[language] = options.templating.indexOf(language) === -1;\n  }\n  result._update();\n  return result;\n};\n\nTemplatablePattern.prototype.exclude = function(language) {\n  var result = this._create();\n  result._excluded[language] = true;\n  result._update();\n  return result;\n};\n\nTemplatablePattern.prototype.read = function() {\n  var result = \'\';\n  if (this._match_pattern) {\n    result = this._input.read(this._starting_pattern);\n  } else {\n    result = this._input.read(this._starting_pattern, this.__template_pattern);\n  }\n  var next = this._read_template();\n  while (next) {\n    if (this._match_pattern) {\n      next += this._input.read(this._match_pattern);\n    } else {\n      next += this._input.readUntil(this.__template_pattern);\n    }\n    result += next;\n    next = this._read_template();\n  }\n\n  if (this._until_after) {\n    result += this._input.readUntilAfter(this._until_pattern);\n  }\n  return result;\n};\n\nTemplatablePattern.prototype.__set_templated_pattern = function() {\n  var items = [];\n\n  if (!this._disabled.php) {\n    items.push(this.__patterns.php._starting_pattern.source);\n  }\n  if (!this._disabled.handlebars) {\n    items.push(this.__patterns.handlebars._starting_pattern.source);\n  }\n  if (!this._disabled.erb) {\n    items.push(this.__patterns.erb._starting_pattern.source);\n  }\n  if (!this._disabled.django) {\n    items.push(this.__patterns.django._starting_pattern.source);\n    // The starting pattern for django is more complex because it has different\n    // patterns for value, comment, and other sections\n    items.push(this.__patterns.django_value._starting_pattern.source);\n    items.push(this.__patterns.django_comment._starting_pattern.source);\n  }\n  if (!this._disabled.smarty) {\n    items.push(this.__patterns.smarty._starting_pattern.source);\n  }\n\n  if (this._until_pattern) {\n    items.push(this._until_pattern.source);\n  }\n  this.__template_pattern = this._input.get_regexp(\'(?:\' + items.join(\'|\') + \')\');\n};\n\nTemplatablePattern.prototype._read_template = function() {\n  var resulting_string = \'\';\n  var c = this._input.peek();\n  if (c === \'<\') {\n    var peek1 = this._input.peek(1);\n    //if we\'re in a comment, do something special\n    // We treat all comments as literals, even more than preformatted tags\n    // we just look for the appropriate close tag\n    if (!this._disabled.php && !this._excluded.php && peek1 === \'?\') {\n      resulting_string = resulting_string ||\n        this.__patterns.php.read();\n    }\n    if (!this._disabled.erb && !this._excluded.erb && peek1 === \'%\') {\n      resulting_string = resulting_string ||\n        this.__patterns.erb.read();\n    }\n  } else if (c === \'{\') {\n    if (!this._disabled.handlebars && !this._excluded.handlebars) {\n      resulting_string = resulting_string ||\n        this.__patterns.handlebars_comment.read();\n      resulting_string = resulting_string ||\n        this.__patterns.handlebars_unescaped.read();\n      resulting_string = resulting_string ||\n        this.__patterns.handlebars.read();\n    }\n    if (!this._disabled.django) {\n      // django coflicts with handlebars a bit.\n      if (!this._excluded.django && !this._excluded.handlebars) {\n        resulting_string = resulting_string ||\n          this.__patterns.django_value.read();\n      }\n      if (!this._excluded.django) {\n        resulting_string = resulting_string ||\n          this.__patterns.django_comment.read();\n        resulting_string = resulting_string ||\n          this.__patterns.django.read();\n      }\n    }\n    if (!this._disabled.smarty) {\n      // smarty cannot be enabled with django or handlebars enabled\n      if (this._disabled.django && this._disabled.handlebars) {\n        resulting_string = resulting_string ||\n          this.__patterns.smarty_comment.read();\n        resulting_string = resulting_string ||\n          this.__patterns.smarty_literal.read();\n        resulting_string = resulting_string ||\n          this.__patterns.smarty.read();\n      }\n    }\n  }\n  return resulting_string;\n};\n\n\nmodule.exports.TemplatablePattern = TemplatablePattern;\n\n\n/***/ }),\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ (function(module, exports, __nested_webpack_require_57120__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar Beautifier = __nested_webpack_require_57120__(19).Beautifier,\n  Options = __nested_webpack_require_57120__(20).Options;\n\nfunction style_html(html_source, options, js_beautify, css_beautify) {\n  var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);\n  return beautifier.beautify();\n}\n\nmodule.exports = style_html;\nmodule.exports.defaultOptions = function() {\n  return new Options();\n};\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_58791__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar Options = __nested_webpack_require_58791__(20).Options;\nvar Output = __nested_webpack_require_58791__(2).Output;\nvar Tokenizer = __nested_webpack_require_58791__(21).Tokenizer;\nvar TOKEN = __nested_webpack_require_58791__(21).TOKEN;\n\nvar lineBreak = /\\r\\n|[\\r\\n]/;\nvar allLineBreaks = /\\r\\n|[\\r\\n]/g;\n\nvar Printer = function(options, base_indent_string) { //handles input/output and some other printing functions\n\n  this.indent_level = 0;\n  this.alignment_size = 0;\n  this.max_preserve_newlines = options.max_preserve_newlines;\n  this.preserve_newlines = options.preserve_newlines;\n\n  this._output = new Output(options, base_indent_string);\n\n};\n\nPrinter.prototype.current_line_has_match = function(pattern) {\n  return this._output.current_line.has_match(pattern);\n};\n\nPrinter.prototype.set_space_before_token = function(value, non_breaking) {\n  this._output.space_before_token = value;\n  this._output.non_breaking_space = non_breaking;\n};\n\nPrinter.prototype.set_wrap_point = function() {\n  this._output.set_indent(this.indent_level, this.alignment_size);\n  this._output.set_wrap_point();\n};\n\n\nPrinter.prototype.add_raw_token = function(token) {\n  this._output.add_raw_token(token);\n};\n\nPrinter.prototype.print_preserved_newlines = function(raw_token) {\n  var newlines = 0;\n  if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {\n    newlines = raw_token.newlines ? 1 : 0;\n  }\n\n  if (this.preserve_newlines) {\n    newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;\n  }\n  for (var n = 0; n < newlines; n++) {\n    this.print_newline(n > 0);\n  }\n\n  return newlines !== 0;\n};\n\nPrinter.prototype.traverse_whitespace = function(raw_token) {\n  if (raw_token.whitespace_before || raw_token.newlines) {\n    if (!this.print_preserved_newlines(raw_token)) {\n      this._output.space_before_token = true;\n    }\n    return true;\n  }\n  return false;\n};\n\nPrinter.prototype.previous_token_wrapped = function() {\n  return this._output.previous_token_wrapped;\n};\n\nPrinter.prototype.print_newline = function(force) {\n  this._output.add_new_line(force);\n};\n\nPrinter.prototype.print_token = function(token) {\n  if (token.text) {\n    this._output.set_indent(this.indent_level, this.alignment_size);\n    this._output.add_token(token.text);\n  }\n};\n\nPrinter.prototype.indent = function() {\n  this.indent_level++;\n};\n\nPrinter.prototype.get_full_indent = function(level) {\n  level = this.indent_level + (level || 0);\n  if (level < 1) {\n    return \'\';\n  }\n\n  return this._output.get_indent_string(level);\n};\n\nvar get_type_attribute = function(start_token) {\n  var result = null;\n  var raw_token = start_token.next;\n\n  // Search attributes for a type attribute\n  while (raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token) {\n    if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === \'type\') {\n      if (raw_token.next && raw_token.next.type === TOKEN.EQUALS &&\n        raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {\n        result = raw_token.next.next.text;\n      }\n      break;\n    }\n    raw_token = raw_token.next;\n  }\n\n  return result;\n};\n\nvar get_custom_beautifier_name = function(tag_check, raw_token) {\n  var typeAttribute = null;\n  var result = null;\n\n  if (!raw_token.closed) {\n    return null;\n  }\n\n  if (tag_check === \'script\') {\n    typeAttribute = \'text/javascript\';\n  } else if (tag_check === \'style\') {\n    typeAttribute = \'text/css\';\n  }\n\n  typeAttribute = get_type_attribute(raw_token) || typeAttribute;\n\n  // For script and style tags that have a type attribute, only enable custom beautifiers for matching values\n  // For those without a type attribute use default;\n  if (typeAttribute.search(\'text/css\') > -1) {\n    result = \'css\';\n  } else if (typeAttribute.search(/module|((text|application|dojo)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json|method|aspect))/) > -1) {\n    result = \'javascript\';\n  } else if (typeAttribute.search(/(text|application|dojo)\\/(x-)?(html)/) > -1) {\n    result = \'html\';\n  } else if (typeAttribute.search(/test\\/null/) > -1) {\n    // Test only mime-type for testing the beautifier when null is passed as beautifing function\n    result = \'null\';\n  }\n\n  return result;\n};\n\nfunction in_array(what, arr) {\n  return arr.indexOf(what) !== -1;\n}\n\nfunction TagFrame(parent, parser_token, indent_level) {\n  this.parent = parent || null;\n  this.tag = parser_token ? parser_token.tag_name : \'\';\n  this.indent_level = indent_level || 0;\n  this.parser_token = parser_token || null;\n}\n\nfunction TagStack(printer) {\n  this._printer = printer;\n  this._current_frame = null;\n}\n\nTagStack.prototype.get_parser_token = function() {\n  return this._current_frame ? this._current_frame.parser_token : null;\n};\n\nTagStack.prototype.record_tag = function(parser_token) { //function to record a tag and its parent in this.tags Object\n  var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);\n  this._current_frame = new_frame;\n};\n\nTagStack.prototype._try_pop_frame = function(frame) { //function to retrieve the opening tag to the corresponding closer\n  var parser_token = null;\n\n  if (frame) {\n    parser_token = frame.parser_token;\n    this._printer.indent_level = frame.indent_level;\n    this._current_frame = frame.parent;\n  }\n\n  return parser_token;\n};\n\nTagStack.prototype._get_frame = function(tag_list, stop_list) { //function to retrieve the opening tag to the corresponding closer\n  var frame = this._current_frame;\n\n  while (frame) { //till we reach \'\' (the initial value);\n    if (tag_list.indexOf(frame.tag) !== -1) { //if this is it use it\n      break;\n    } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {\n      frame = null;\n      break;\n    }\n    frame = frame.parent;\n  }\n\n  return frame;\n};\n\nTagStack.prototype.try_pop = function(tag, stop_list) { //function to retrieve the opening tag to the corresponding closer\n  var frame = this._get_frame([tag], stop_list);\n  return this._try_pop_frame(frame);\n};\n\nTagStack.prototype.indent_to_tag = function(tag_list) {\n  var frame = this._get_frame(tag_list);\n  if (frame) {\n    this._printer.indent_level = frame.indent_level;\n  }\n};\n\nfunction Beautifier(source_text, options, js_beautify, css_beautify) {\n  //Wrapper function to invoke all the necessary constructors and deal with the output.\n  this._source_text = source_text || \'\';\n  options = options || {};\n  this._js_beautify = js_beautify;\n  this._css_beautify = css_beautify;\n  this._tag_stack = null;\n\n  // Allow the setting of language/file-type specific options\n  // with inheritance of overall settings\n  var optionHtml = new Options(options, \'html\');\n\n  this._options = optionHtml;\n\n  this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, \'force\'.length) === \'force\';\n  this._is_wrap_attributes_force_expand_multiline = (this._options.wrap_attributes === \'force-expand-multiline\');\n  this._is_wrap_attributes_force_aligned = (this._options.wrap_attributes === \'force-aligned\');\n  this._is_wrap_attributes_aligned_multiple = (this._options.wrap_attributes === \'aligned-multiple\');\n  this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, \'preserve\'.length) === \'preserve\';\n  this._is_wrap_attributes_preserve_aligned = (this._options.wrap_attributes === \'preserve-aligned\');\n}\n\nBeautifier.prototype.beautify = function() {\n\n  // if disabled, return the input unchanged.\n  if (this._options.disabled) {\n    return this._source_text;\n  }\n\n  var source_text = this._source_text;\n  var eol = this._options.eol;\n  if (this._options.eol === \'auto\') {\n    eol = \'\\n\';\n    if (source_text && lineBreak.test(source_text)) {\n      eol = source_text.match(lineBreak)[0];\n    }\n  }\n\n  // HACK: newline parsing inconsistent. This brute force normalizes the input.\n  source_text = source_text.replace(allLineBreaks, \'\\n\');\n\n  var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n\n  var last_token = {\n    text: \'\',\n    type: \'\'\n  };\n\n  var last_tag_token = new TagOpenParserToken();\n\n  var printer = new Printer(this._options, baseIndentString);\n  var tokens = new Tokenizer(source_text, this._options).tokenize();\n\n  this._tag_stack = new TagStack(printer);\n\n  var parser_token = null;\n  var raw_token = tokens.next();\n  while (raw_token.type !== TOKEN.EOF) {\n\n    if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {\n      parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token);\n      last_tag_token = parser_token;\n    } else if ((raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE) ||\n      (raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete)) {\n      parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, tokens);\n    } else if (raw_token.type === TOKEN.TAG_CLOSE) {\n      parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);\n    } else if (raw_token.type === TOKEN.TEXT) {\n      parser_token = this._handle_text(printer, raw_token, last_tag_token);\n    } else {\n      // This should never happen, but if it does. Print the raw token\n      printer.add_raw_token(raw_token);\n    }\n\n    last_token = parser_token;\n\n    raw_token = tokens.next();\n  }\n  var sweet_code = printer._output.get_code(eol);\n\n  return sweet_code;\n};\n\nBeautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {\n  var parser_token = {\n    text: raw_token.text,\n    type: raw_token.type\n  };\n  printer.alignment_size = 0;\n  last_tag_token.tag_complete = true;\n\n  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \'\', true);\n  if (last_tag_token.is_unformatted) {\n    printer.add_raw_token(raw_token);\n  } else {\n    if (last_tag_token.tag_start_char === \'<\') {\n      printer.set_space_before_token(raw_token.text[0] === \'/\', true); // space before />, no space before >\n      if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {\n        printer.print_newline(false);\n      }\n    }\n    printer.print_token(raw_token);\n\n  }\n\n  if (last_tag_token.indent_content &&\n    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n    printer.indent();\n\n    // only indent once per opened tag\n    last_tag_token.indent_content = false;\n  }\n\n  if (!last_tag_token.is_inline_element &&\n    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n    printer.set_wrap_point();\n  }\n\n  return parser_token;\n};\n\nBeautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, tokens) {\n  var wrapped = last_tag_token.has_wrapped_attrs;\n  var parser_token = {\n    text: raw_token.text,\n    type: raw_token.type\n  };\n\n  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \'\', true);\n  if (last_tag_token.is_unformatted) {\n    printer.add_raw_token(raw_token);\n  } else if (last_tag_token.tag_start_char === \'{\' && raw_token.type === TOKEN.TEXT) {\n    // For the insides of handlebars allow newlines or a single space between open and contents\n    if (printer.print_preserved_newlines(raw_token)) {\n      raw_token.newlines = 0;\n      printer.add_raw_token(raw_token);\n    } else {\n      printer.print_token(raw_token);\n    }\n  } else {\n    if (raw_token.type === TOKEN.ATTRIBUTE) {\n      printer.set_space_before_token(true);\n      last_tag_token.attr_count += 1;\n    } else if (raw_token.type === TOKEN.EQUALS) { //no space before =\n      printer.set_space_before_token(false);\n    } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) { //no space before value\n      printer.set_space_before_token(false);\n    }\n\n    if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === \'<\') {\n      if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {\n        printer.traverse_whitespace(raw_token);\n        wrapped = wrapped || raw_token.newlines !== 0;\n      }\n\n\n      if (this._is_wrap_attributes_force) {\n        var force_attr_wrap = last_tag_token.attr_count > 1;\n        if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.attr_count === 1) {\n          var is_only_attribute = true;\n          var peek_index = 0;\n          var peek_token;\n          do {\n            peek_token = tokens.peek(peek_index);\n            if (peek_token.type === TOKEN.ATTRIBUTE) {\n              is_only_attribute = false;\n              break;\n            }\n            peek_index += 1;\n          } while (peek_index < 4 && peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);\n\n          force_attr_wrap = !is_only_attribute;\n        }\n\n        if (force_attr_wrap) {\n          printer.print_newline(false);\n          wrapped = true;\n        }\n      }\n    }\n    printer.print_token(raw_token);\n    wrapped = wrapped || printer.previous_token_wrapped();\n    last_tag_token.has_wrapped_attrs = wrapped;\n  }\n  return parser_token;\n};\n\nBeautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {\n  var parser_token = {\n    text: raw_token.text,\n    type: \'TK_CONTENT\'\n  };\n  if (last_tag_token.custom_beautifier_name) { //check if we need to format javascript\n    this._print_custom_beatifier_text(printer, raw_token, last_tag_token);\n  } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {\n    printer.add_raw_token(raw_token);\n  } else {\n    printer.traverse_whitespace(raw_token);\n    printer.print_token(raw_token);\n  }\n  return parser_token;\n};\n\nBeautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {\n  var local = this;\n  if (raw_token.text !== \'\') {\n\n    var text = raw_token.text,\n      _beautifier,\n      script_indent_level = 1,\n      pre = \'\',\n      post = \'\';\n    if (last_tag_token.custom_beautifier_name === \'javascript\' && typeof this._js_beautify === \'function\') {\n      _beautifier = this._js_beautify;\n    } else if (last_tag_token.custom_beautifier_name === \'css\' && typeof this._css_beautify === \'function\') {\n      _beautifier = this._css_beautify;\n    } else if (last_tag_token.custom_beautifier_name === \'html\') {\n      _beautifier = function(html_source, options) {\n        var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);\n        return beautifier.beautify();\n      };\n    }\n\n    if (this._options.indent_scripts === "keep") {\n      script_indent_level = 0;\n    } else if (this._options.indent_scripts === "separate") {\n      script_indent_level = -printer.indent_level;\n    }\n\n    var indentation = printer.get_full_indent(script_indent_level);\n\n    // if there is at least one empty line at the end of this text, strip it\n    // we\'ll be adding one back after the text but before the containing tag.\n    text = text.replace(/\\n[ \\t]*$/, \'\');\n\n    // Handle the case where content is wrapped in a comment or cdata.\n    if (last_tag_token.custom_beautifier_name !== \'html\' &&\n      text[0] === \'<\' && text.match(/^(\x3c!--|<!\\[CDATA\\[)/)) {\n      var matched = /^(\x3c!--[^\\n]*|<!\\[CDATA\\[)(\\n?)([ \\t\\n]*)([\\s\\S]*)(--\x3e|]]>)$/.exec(text);\n\n      // if we start to wrap but don\'t finish, print raw\n      if (!matched) {\n        printer.add_raw_token(raw_token);\n        return;\n      }\n\n      pre = indentation + matched[1] + \'\\n\';\n      text = matched[4];\n      if (matched[5]) {\n        post = indentation + matched[5];\n      }\n\n      // if there is at least one empty line at the end of this text, strip it\n      // we\'ll be adding one back after the text but before the containing tag.\n      text = text.replace(/\\n[ \\t]*$/, \'\');\n\n      if (matched[2] || matched[3].indexOf(\'\\n\') !== -1) {\n        // if the first line of the non-comment text has spaces\n        // use that as the basis for indenting in null case.\n        matched = matched[3].match(/[ \\t]+$/);\n        if (matched) {\n          raw_token.whitespace_before = matched[0];\n        }\n      }\n    }\n\n    if (text) {\n      if (_beautifier) {\n\n        // call the Beautifier if avaliable\n        var Child_options = function() {\n          this.eol = \'\\n\';\n        };\n        Child_options.prototype = this._options.raw_options;\n        var child_options = new Child_options();\n        text = _beautifier(indentation + text, child_options);\n      } else {\n        // simply indent the string otherwise\n        var white = raw_token.whitespace_before;\n        if (white) {\n          text = text.replace(new RegExp(\'\\n(\' + white + \')?\', \'g\'), \'\\n\');\n        }\n\n        text = indentation + text.replace(/\\n/g, \'\\n\' + indentation);\n      }\n    }\n\n    if (pre) {\n      if (!text) {\n        text = pre + post;\n      } else {\n        text = pre + text + \'\\n\' + post;\n      }\n    }\n\n    printer.print_newline(false);\n    if (text) {\n      raw_token.text = text;\n      raw_token.whitespace_before = \'\';\n      raw_token.newlines = 0;\n      printer.add_raw_token(raw_token);\n      printer.print_newline(true);\n    }\n  }\n};\n\nBeautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token) {\n  var parser_token = this._get_tag_open_token(raw_token);\n\n  if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) &&\n    !last_tag_token.is_empty_element &&\n    raw_token.type === TOKEN.TAG_OPEN && raw_token.text.indexOf(\'</\') === 0) {\n    // End element tags for unformatted or content_unformatted elements\n    // are printed raw to keep any newlines inside them exactly the same.\n    printer.add_raw_token(raw_token);\n    parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);\n  } else {\n    printer.traverse_whitespace(raw_token);\n    this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);\n    if (!parser_token.is_inline_element) {\n      printer.set_wrap_point();\n    }\n    printer.print_token(raw_token);\n  }\n\n  //indent attributes an auto, forced, aligned or forced-align line-wrap\n  if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {\n    parser_token.alignment_size = raw_token.text.length + 1;\n  }\n\n  if (!parser_token.tag_complete && !parser_token.is_unformatted) {\n    printer.alignment_size = parser_token.alignment_size;\n  }\n\n  return parser_token;\n};\n\nvar TagOpenParserToken = function(parent, raw_token) {\n  this.parent = parent || null;\n  this.text = \'\';\n  this.type = \'TK_TAG_OPEN\';\n  this.tag_name = \'\';\n  this.is_inline_element = false;\n  this.is_unformatted = false;\n  this.is_content_unformatted = false;\n  this.is_empty_element = false;\n  this.is_start_tag = false;\n  this.is_end_tag = false;\n  this.indent_content = false;\n  this.multiline_content = false;\n  this.custom_beautifier_name = null;\n  this.start_tag_token = null;\n  this.attr_count = 0;\n  this.has_wrapped_attrs = false;\n  this.alignment_size = 0;\n  this.tag_complete = false;\n  this.tag_start_char = \'\';\n  this.tag_check = \'\';\n\n  if (!raw_token) {\n    this.tag_complete = true;\n  } else {\n    var tag_check_match;\n\n    this.tag_start_char = raw_token.text[0];\n    this.text = raw_token.text;\n\n    if (this.tag_start_char === \'<\') {\n      tag_check_match = raw_token.text.match(/^<([^\\s>]*)/);\n      this.tag_check = tag_check_match ? tag_check_match[1] : \'\';\n    } else {\n      tag_check_match = raw_token.text.match(/^{{(?:[\\^]|#\\*?)?([^\\s}]+)/);\n      this.tag_check = tag_check_match ? tag_check_match[1] : \'\';\n\n      // handle "{{#> myPartial}}\n      if (raw_token.text === \'{{#>\' && this.tag_check === \'>\' && raw_token.next !== null) {\n        this.tag_check = raw_token.next.text;\n      }\n    }\n    this.tag_check = this.tag_check.toLowerCase();\n\n    if (raw_token.type === TOKEN.COMMENT) {\n      this.tag_complete = true;\n    }\n\n    this.is_start_tag = this.tag_check.charAt(0) !== \'/\';\n    this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;\n    this.is_end_tag = !this.is_start_tag ||\n      (raw_token.closed && raw_token.closed.text === \'/>\');\n\n    // handlebars tags that don\'t start with # or ^ are single_tags, and so also start and end.\n    this.is_end_tag = this.is_end_tag ||\n      (this.tag_start_char === \'{\' && (this.text.length < 3 || (/[^#\\^]/.test(this.text.charAt(2)))));\n  }\n};\n\nBeautifier.prototype._get_tag_open_token = function(raw_token) { //function to get a full tag and parse its type\n  var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);\n\n  parser_token.alignment_size = this._options.wrap_attributes_indent_size;\n\n  parser_token.is_end_tag = parser_token.is_end_tag ||\n    in_array(parser_token.tag_check, this._options.void_elements);\n\n  parser_token.is_empty_element = parser_token.tag_complete ||\n    (parser_token.is_start_tag && parser_token.is_end_tag);\n\n  parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);\n  parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);\n  parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || parser_token.tag_start_char === \'{\';\n\n  return parser_token;\n};\n\nBeautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {\n\n  if (!parser_token.is_empty_element) {\n    if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending\n      parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors\n    } else { // it\'s a start-tag\n      // check if this tag is starting an element that has optional end element\n      // and do an ending needed\n      if (this._do_optional_end_element(parser_token)) {\n        if (!parser_token.is_inline_element) {\n          printer.print_newline(false);\n        }\n      }\n\n      this._tag_stack.record_tag(parser_token); //push it on the tag stack\n\n      if ((parser_token.tag_name === \'script\' || parser_token.tag_name === \'style\') &&\n        !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {\n        parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);\n      }\n    }\n  }\n\n  if (in_array(parser_token.tag_check, this._options.extra_liners)) { //check if this double needs an extra line\n    printer.print_newline(false);\n    if (!printer._output.just_added_blankline()) {\n      printer.print_newline(true);\n    }\n  }\n\n  if (parser_token.is_empty_element) { //if this tag name is a single tag type (either in the list or has a closing /)\n\n    // if you hit an else case, reset the indent level if you are inside an:\n    // \'if\', \'unless\', or \'each\' block.\n    if (parser_token.tag_start_char === \'{\' && parser_token.tag_check === \'else\') {\n      this._tag_stack.indent_to_tag([\'if\', \'unless\', \'each\']);\n      parser_token.indent_content = true;\n      // Don\'t add a newline if opening {{#if}} tag is on the current line\n      var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);\n      if (!foundIfOnCurrentLine) {\n        printer.print_newline(false);\n      }\n    }\n\n    // Don\'t add a newline before elements that should remain where they are.\n    if (parser_token.tag_name === \'!--\' && last_token.type === TOKEN.TAG_CLOSE &&\n      last_tag_token.is_end_tag && parser_token.text.indexOf(\'\\n\') === -1) {\n      //Do nothing. Leave comments on same line.\n    } else {\n      if (!(parser_token.is_inline_element || parser_token.is_unformatted)) {\n        printer.print_newline(false);\n      }\n      this._calcluate_parent_multiline(printer, parser_token);\n    }\n  } else if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending\n    var do_end_expand = false;\n\n    // deciding whether a block is multiline should not be this hard\n    do_end_expand = parser_token.start_tag_token && parser_token.start_tag_token.multiline_content;\n    do_end_expand = do_end_expand || (!parser_token.is_inline_element &&\n      !(last_tag_token.is_inline_element || last_tag_token.is_unformatted) &&\n      !(last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token) &&\n      last_token.type !== \'TK_CONTENT\'\n    );\n\n    if (parser_token.is_content_unformatted || parser_token.is_unformatted) {\n      do_end_expand = false;\n    }\n\n    if (do_end_expand) {\n      printer.print_newline(false);\n    }\n  } else { // it\'s a start-tag\n    parser_token.indent_content = !parser_token.custom_beautifier_name;\n\n    if (parser_token.tag_start_char === \'<\') {\n      if (parser_token.tag_name === \'html\') {\n        parser_token.indent_content = this._options.indent_inner_html;\n      } else if (parser_token.tag_name === \'head\') {\n        parser_token.indent_content = this._options.indent_head_inner_html;\n      } else if (parser_token.tag_name === \'body\') {\n        parser_token.indent_content = this._options.indent_body_inner_html;\n      }\n    }\n\n    if (!(parser_token.is_inline_element || parser_token.is_unformatted) &&\n      (last_token.type !== \'TK_CONTENT\' || parser_token.is_content_unformatted)) {\n      printer.print_newline(false);\n    }\n\n    this._calcluate_parent_multiline(printer, parser_token);\n  }\n};\n\nBeautifier.prototype._calcluate_parent_multiline = function(printer, parser_token) {\n  if (parser_token.parent && printer._output.just_added_newline() &&\n    !((parser_token.is_inline_element || parser_token.is_unformatted) && parser_token.parent.is_inline_element)) {\n    parser_token.parent.multiline_content = true;\n  }\n};\n\n//To be used for <p> tag special case:\nvar p_closers = [\'address\', \'article\', \'aside\', \'blockquote\', \'details\', \'div\', \'dl\', \'fieldset\', \'figcaption\', \'figure\', \'footer\', \'form\', \'h1\', \'h2\', \'h3\', \'h4\', \'h5\', \'h6\', \'header\', \'hr\', \'main\', \'nav\', \'ol\', \'p\', \'pre\', \'section\', \'table\', \'ul\'];\nvar p_parent_excludes = [\'a\', \'audio\', \'del\', \'ins\', \'map\', \'noscript\', \'video\'];\n\nBeautifier.prototype._do_optional_end_element = function(parser_token) {\n  var result = null;\n  // NOTE: cases of "if there is no more content in the parent element"\n  // are handled automatically by the beautifier.\n  // It assumes parent or ancestor close tag closes all children.\n  // https://www.w3.org/TR/html5/syntax.html#optional-tags\n  if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {\n    return;\n\n  }\n\n  if (parser_token.tag_name === \'body\') {\n    // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.\n    result = result || this._tag_stack.try_pop(\'head\');\n\n    //} else if (parser_token.tag_name === \'body\') {\n    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.\n\n  } else if (parser_token.tag_name === \'li\') {\n    // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.\n    result = result || this._tag_stack.try_pop(\'li\', [\'ol\', \'ul\']);\n\n  } else if (parser_token.tag_name === \'dd\' || parser_token.tag_name === \'dt\') {\n    // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.\n    // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.\n    result = result || this._tag_stack.try_pop(\'dt\', [\'dl\']);\n    result = result || this._tag_stack.try_pop(\'dd\', [\'dl\']);\n\n\n  } else if (parser_token.parent.tag_name === \'p\' && p_closers.indexOf(parser_token.tag_name) !== -1) {\n    // IMPORTANT: this else-if works because p_closers has no overlap with any other element we look for in this method\n    // check for the parent element is an HTML element that is not an <a>, <audio>, <del>, <ins>, <map>, <noscript>, or <video> element,  or an autonomous custom element.\n    // To do this right, this needs to be coded as an inclusion of the inverse of the exclusion above.\n    // But to start with (if we ignore "autonomous custom elements") the exclusion would be fine.\n    var p_parent = parser_token.parent.parent;\n    if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {\n      result = result || this._tag_stack.try_pop(\'p\');\n    }\n  } else if (parser_token.tag_name === \'rp\' || parser_token.tag_name === \'rt\') {\n    // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.\n    // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.\n    result = result || this._tag_stack.try_pop(\'rt\', [\'ruby\', \'rtc\']);\n    result = result || this._tag_stack.try_pop(\'rp\', [\'ruby\', \'rtc\']);\n\n  } else if (parser_token.tag_name === \'optgroup\') {\n    // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.\n    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.\n    result = result || this._tag_stack.try_pop(\'optgroup\', [\'select\']);\n    //result = result || this._tag_stack.try_pop(\'option\', [\'select\']);\n\n  } else if (parser_token.tag_name === \'option\') {\n    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.\n    result = result || this._tag_stack.try_pop(\'option\', [\'select\', \'datalist\', \'optgroup\']);\n\n  } else if (parser_token.tag_name === \'colgroup\') {\n    // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.\n    // A caption element\'s end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n    result = result || this._tag_stack.try_pop(\'caption\', [\'table\']);\n\n  } else if (parser_token.tag_name === \'thead\') {\n    // A colgroup element\'s end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.\n    // A caption element\'s end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n    result = result || this._tag_stack.try_pop(\'caption\', [\'table\']);\n    result = result || this._tag_stack.try_pop(\'colgroup\', [\'table\']);\n\n    //} else if (parser_token.tag_name === \'caption\') {\n    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.\n\n  } else if (parser_token.tag_name === \'tbody\' || parser_token.tag_name === \'tfoot\') {\n    // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.\n    // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.\n    // A colgroup element\'s end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.\n    // A caption element\'s end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n    result = result || this._tag_stack.try_pop(\'caption\', [\'table\']);\n    result = result || this._tag_stack.try_pop(\'colgroup\', [\'table\']);\n    result = result || this._tag_stack.try_pop(\'thead\', [\'table\']);\n    result = result || this._tag_stack.try_pop(\'tbody\', [\'table\']);\n\n    //} else if (parser_token.tag_name === \'tfoot\') {\n    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.\n\n  } else if (parser_token.tag_name === \'tr\') {\n    // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.\n    // A colgroup element\'s end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.\n    // A caption element\'s end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n    result = result || this._tag_stack.try_pop(\'caption\', [\'table\']);\n    result = result || this._tag_stack.try_pop(\'colgroup\', [\'table\']);\n    result = result || this._tag_stack.try_pop(\'tr\', [\'table\', \'thead\', \'tbody\', \'tfoot\']);\n\n  } else if (parser_token.tag_name === \'th\' || parser_token.tag_name === \'td\') {\n    // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.\n    // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.\n    result = result || this._tag_stack.try_pop(\'td\', [\'table\', \'thead\', \'tbody\', \'tfoot\', \'tr\']);\n    result = result || this._tag_stack.try_pop(\'th\', [\'table\', \'thead\', \'tbody\', \'tfoot\', \'tr\']);\n  }\n\n  // Start element omission not handled currently\n  // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.\n  // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)\n  // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)\n\n  // Fix up the parent of the parser token\n  parser_token.parent = this._tag_stack.get_parser_token();\n\n  return result;\n};\n\nmodule.exports.Beautifier = Beautifier;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_94130__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar BaseOptions = __nested_webpack_require_94130__(6).Options;\n\nfunction Options(options) {\n  BaseOptions.call(this, options, \'html\');\n  if (this.templating.length === 1 && this.templating[0] === \'auto\') {\n    this.templating = [\'django\', \'erb\', \'handlebars\', \'php\'];\n  }\n\n  this.indent_inner_html = this._get_boolean(\'indent_inner_html\');\n  this.indent_body_inner_html = this._get_boolean(\'indent_body_inner_html\', true);\n  this.indent_head_inner_html = this._get_boolean(\'indent_head_inner_html\', true);\n\n  this.indent_handlebars = this._get_boolean(\'indent_handlebars\', true);\n  this.wrap_attributes = this._get_selection(\'wrap_attributes\',\n    [\'auto\', \'force\', \'force-aligned\', \'force-expand-multiline\', \'aligned-multiple\', \'preserve\', \'preserve-aligned\']);\n  this.wrap_attributes_indent_size = this._get_number(\'wrap_attributes_indent_size\', this.indent_size);\n  this.extra_liners = this._get_array(\'extra_liners\', [\'head\', \'body\', \'/html\']);\n\n  // Block vs inline elements\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\n  // https://www.w3.org/TR/html5/dom.html#phrasing-content\n  this.inline = this._get_array(\'inline\', [\n    \'a\', \'abbr\', \'area\', \'audio\', \'b\', \'bdi\', \'bdo\', \'br\', \'button\', \'canvas\', \'cite\',\n    \'code\', \'data\', \'datalist\', \'del\', \'dfn\', \'em\', \'embed\', \'i\', \'iframe\', \'img\',\n    \'input\', \'ins\', \'kbd\', \'keygen\', \'label\', \'map\', \'mark\', \'math\', \'meter\', \'noscript\',\n    \'object\', \'output\', \'progress\', \'q\', \'ruby\', \'s\', \'samp\', /* \'script\', */ \'select\', \'small\',\n    \'span\', \'strong\', \'sub\', \'sup\', \'svg\', \'template\', \'textarea\', \'time\', \'u\', \'var\',\n    \'video\', \'wbr\', \'text\',\n    // obsolete inline tags\n    \'acronym\', \'big\', \'strike\', \'tt\'\n  ]);\n  this.void_elements = this._get_array(\'void_elements\', [\n    // HTLM void elements - aka self-closing tags - aka singletons\n    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n    \'area\', \'base\', \'br\', \'col\', \'embed\', \'hr\', \'img\', \'input\', \'keygen\',\n    \'link\', \'menuitem\', \'meta\', \'param\', \'source\', \'track\', \'wbr\',\n    // NOTE: Optional tags are too complex for a simple list\n    // they are hard coded in _do_optional_end_element\n\n    // Doctype and xml elements\n    \'!doctype\', \'?xml\',\n\n    // obsolete tags\n    // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm\n    // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex\n    \'basefont\', \'isindex\'\n  ]);\n  this.unformatted = this._get_array(\'unformatted\', []);\n  this.content_unformatted = this._get_array(\'content_unformatted\', [\n    \'pre\', \'textarea\'\n  ]);\n  this.unformatted_content_delimiter = this._get_characters(\'unformatted_content_delimiter\');\n  this.indent_scripts = this._get_selection(\'indent_scripts\', [\'normal\', \'keep\', \'separate\']);\n\n}\nOptions.prototype = new BaseOptions();\n\n\n\nmodule.exports.Options = Options;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __nested_webpack_require_98324__) {\n\n"use strict";\n/*jshint node:true */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the "Software"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\n\n\nvar BaseTokenizer = __nested_webpack_require_98324__(9).Tokenizer;\nvar BASETOKEN = __nested_webpack_require_98324__(9).TOKEN;\nvar Directives = __nested_webpack_require_98324__(13).Directives;\nvar TemplatablePattern = __nested_webpack_require_98324__(14).TemplatablePattern;\nvar Pattern = __nested_webpack_require_98324__(12).Pattern;\n\nvar TOKEN = {\n  TAG_OPEN: \'TK_TAG_OPEN\',\n  TAG_CLOSE: \'TK_TAG_CLOSE\',\n  ATTRIBUTE: \'TK_ATTRIBUTE\',\n  EQUALS: \'TK_EQUALS\',\n  VALUE: \'TK_VALUE\',\n  COMMENT: \'TK_COMMENT\',\n  TEXT: \'TK_TEXT\',\n  UNKNOWN: \'TK_UNKNOWN\',\n  START: BASETOKEN.START,\n  RAW: BASETOKEN.RAW,\n  EOF: BASETOKEN.EOF\n};\n\nvar directives_core = new Directives(/<\\!--/, /--\x3e/);\n\nvar Tokenizer = function(input_string, options) {\n  BaseTokenizer.call(this, input_string, options);\n  this._current_tag_name = \'\';\n\n  // Words end at whitespace or when a tag starts\n  // if we are indenting handlebars, they are considered tags\n  var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);\n  var pattern_reader = new Pattern(this._input);\n\n  this.__patterns = {\n    word: templatable_reader.until(/[\\n\\r\\t <]/),\n    single_quote: templatable_reader.until_after(/\'/),\n    double_quote: templatable_reader.until_after(/"/),\n    attribute: templatable_reader.until(/[\\n\\r\\t =>]|\\/>/),\n    element_name: templatable_reader.until(/[\\n\\r\\t >\\/]/),\n\n    handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),\n    handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),\n    handlebars_open: pattern_reader.until(/[\\n\\r\\t }]/),\n    handlebars_raw_close: pattern_reader.until(/}}/),\n    comment: pattern_reader.starting_with(/\x3c!--/).until_after(/--\x3e/),\n    cdata: pattern_reader.starting_with(/<!\\[CDATA\\[/).until_after(/]]>/),\n    // https://en.wikipedia.org/wiki/Conditional_comment\n    conditional_comment: pattern_reader.starting_with(/<!\\[/).until_after(/]>/),\n    processing: pattern_reader.starting_with(/<\\?/).until_after(/\\?>/)\n  };\n\n  if (this._options.indent_handlebars) {\n    this.__patterns.word = this.__patterns.word.exclude(\'handlebars\');\n  }\n\n  this._unformatted_content_delimiter = null;\n\n  if (this._options.unformatted_content_delimiter) {\n    var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);\n    this.__patterns.unformatted_content_delimiter =\n      pattern_reader.matching(literal_regexp)\n      .until_after(literal_regexp);\n  }\n};\nTokenizer.prototype = new BaseTokenizer();\n\nTokenizer.prototype._is_comment = function(current_token) { // jshint unused:false\n  return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;\n};\n\nTokenizer.prototype._is_opening = function(current_token) {\n  return current_token.type === TOKEN.TAG_OPEN;\n};\n\nTokenizer.prototype._is_closing = function(current_token, open_token) {\n  return current_token.type === TOKEN.TAG_CLOSE &&\n    (open_token && (\n      ((current_token.text === \'>\' || current_token.text === \'/>\') && open_token.text[0] === \'<\') ||\n      (current_token.text === \'}}\' && open_token.text[0] === \'{\' && open_token.text[1] === \'{\')));\n};\n\nTokenizer.prototype._reset = function() {\n  this._current_tag_name = \'\';\n};\n\nTokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false\n  var token = null;\n  this._readWhitespace();\n  var c = this._input.peek();\n\n  if (c === null) {\n    return this._create_token(TOKEN.EOF, \'\');\n  }\n\n  token = token || this._read_open_handlebars(c, open_token);\n  token = token || this._read_attribute(c, previous_token, open_token);\n  token = token || this._read_close(c, open_token);\n  token = token || this._read_raw_content(c, previous_token, open_token);\n  token = token || this._read_content_word(c);\n  token = token || this._read_comment_or_cdata(c);\n  token = token || this._read_processing(c);\n  token = token || this._read_open(c, open_token);\n  token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());\n\n  return token;\n};\n\nTokenizer.prototype._read_comment_or_cdata = function(c) { // jshint unused:false\n  var token = null;\n  var resulting_string = null;\n  var directives = null;\n\n  if (c === \'<\') {\n    var peek1 = this._input.peek(1);\n    // We treat all comments as literals, even more than preformatted tags\n    // we only look for the appropriate closing marker\n    if (peek1 === \'!\') {\n      resulting_string = this.__patterns.comment.read();\n\n      // only process directive on html comments\n      if (resulting_string) {\n        directives = directives_core.get_directives(resulting_string);\n        if (directives && directives.ignore === \'start\') {\n          resulting_string += directives_core.readIgnored(this._input);\n        }\n      } else {\n        resulting_string = this.__patterns.cdata.read();\n      }\n    }\n\n    if (resulting_string) {\n      token = this._create_token(TOKEN.COMMENT, resulting_string);\n      token.directives = directives;\n    }\n  }\n\n  return token;\n};\n\nTokenizer.prototype._read_processing = function(c) { // jshint unused:false\n  var token = null;\n  var resulting_string = null;\n  var directives = null;\n\n  if (c === \'<\') {\n    var peek1 = this._input.peek(1);\n    if (peek1 === \'!\' || peek1 === \'?\') {\n      resulting_string = this.__patterns.conditional_comment.read();\n      resulting_string = resulting_string || this.__patterns.processing.read();\n    }\n\n    if (resulting_string) {\n      token = this._create_token(TOKEN.COMMENT, resulting_string);\n      token.directives = directives;\n    }\n  }\n\n  return token;\n};\n\nTokenizer.prototype._read_open = function(c, open_token) {\n  var resulting_string = null;\n  var token = null;\n  if (!open_token) {\n    if (c === \'<\') {\n\n      resulting_string = this._input.next();\n      if (this._input.peek() === \'/\') {\n        resulting_string += this._input.next();\n      }\n      resulting_string += this.__patterns.element_name.read();\n      token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n    }\n  }\n  return token;\n};\n\nTokenizer.prototype._read_open_handlebars = function(c, open_token) {\n  var resulting_string = null;\n  var token = null;\n  if (!open_token) {\n    if (this._options.indent_handlebars && c === \'{\' && this._input.peek(1) === \'{\') {\n      if (this._input.peek(2) === \'!\') {\n        resulting_string = this.__patterns.handlebars_comment.read();\n        resulting_string = resulting_string || this.__patterns.handlebars.read();\n        token = this._create_token(TOKEN.COMMENT, resulting_string);\n      } else {\n        resulting_string = this.__patterns.handlebars_open.read();\n        token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n      }\n    }\n  }\n  return token;\n};\n\n\nTokenizer.prototype._read_close = function(c, open_token) {\n  var resulting_string = null;\n  var token = null;\n  if (open_token) {\n    if (open_token.text[0] === \'<\' && (c === \'>\' || (c === \'/\' && this._input.peek(1) === \'>\'))) {\n      resulting_string = this._input.next();\n      if (c === \'/\') { //  for close tag "/>"\n        resulting_string += this._input.next();\n      }\n      token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);\n    } else if (open_token.text[0] === \'{\' && c === \'}\' && this._input.peek(1) === \'}\') {\n      this._input.next();\n      this._input.next();\n      token = this._create_token(TOKEN.TAG_CLOSE, \'}}\');\n    }\n  }\n\n  return token;\n};\n\nTokenizer.prototype._read_attribute = function(c, previous_token, open_token) {\n  var token = null;\n  var resulting_string = \'\';\n  if (open_token && open_token.text[0] === \'<\') {\n\n    if (c === \'=\') {\n      token = this._create_token(TOKEN.EQUALS, this._input.next());\n    } else if (c === \'"\' || c === "\'") {\n      var content = this._input.next();\n      if (c === \'"\') {\n        content += this.__patterns.double_quote.read();\n      } else {\n        content += this.__patterns.single_quote.read();\n      }\n      token = this._create_token(TOKEN.VALUE, content);\n    } else {\n      resulting_string = this.__patterns.attribute.read();\n\n      if (resulting_string) {\n        if (previous_token.type === TOKEN.EQUALS) {\n          token = this._create_token(TOKEN.VALUE, resulting_string);\n        } else {\n          token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);\n        }\n      }\n    }\n  }\n  return token;\n};\n\nTokenizer.prototype._is_content_unformatted = function(tag_name) {\n  // void_elements have no content and so cannot have unformatted content\n  // script and style tags should always be read as unformatted content\n  // finally content_unformatted and unformatted element contents are unformatted\n  return this._options.void_elements.indexOf(tag_name) === -1 &&\n    (this._options.content_unformatted.indexOf(tag_name) !== -1 ||\n      this._options.unformatted.indexOf(tag_name) !== -1);\n};\n\n\nTokenizer.prototype._read_raw_content = function(c, previous_token, open_token) { // jshint unused:false\n  var resulting_string = \'\';\n  if (open_token && open_token.text[0] === \'{\') {\n    resulting_string = this.__patterns.handlebars_raw_close.read();\n  } else if (previous_token.type === TOKEN.TAG_CLOSE &&\n    previous_token.opened.text[0] === \'<\' && previous_token.text[0] !== \'/\') {\n    // ^^ empty tag has no content \n    var tag_name = previous_token.opened.text.substr(1).toLowerCase();\n    if (tag_name === \'script\' || tag_name === \'style\') {\n      // Script and style tags are allowed to have comments wrapping their content\n      // or just have regular content.\n      var token = this._read_comment_or_cdata(c);\n      if (token) {\n        token.type = TOKEN.TEXT;\n        return token;\n      }\n      resulting_string = this._input.readUntil(new RegExp(\'</\' + tag_name + \'[\\\\n\\\\r\\\\t ]*?>\', \'ig\'));\n    } else if (this._is_content_unformatted(tag_name)) {\n\n      resulting_string = this._input.readUntil(new RegExp(\'</\' + tag_name + \'[\\\\n\\\\r\\\\t ]*?>\', \'ig\'));\n    }\n  }\n\n  if (resulting_string) {\n    return this._create_token(TOKEN.TEXT, resulting_string);\n  }\n\n  return null;\n};\n\nTokenizer.prototype._read_content_word = function(c) {\n  var resulting_string = \'\';\n  if (this._options.unformatted_content_delimiter) {\n    if (c === this._options.unformatted_content_delimiter[0]) {\n      resulting_string = this.__patterns.unformatted_content_delimiter.read();\n    }\n  }\n\n  if (!resulting_string) {\n    resulting_string = this.__patterns.word.read();\n  }\n  if (resulting_string) {\n    return this._create_token(TOKEN.TEXT, resulting_string);\n  }\n};\n\nmodule.exports.Tokenizer = Tokenizer;\nmodule.exports.TOKEN = TOKEN;\n\n\n/***/ })\n/******/ ]);\n\nfunction html_beautify(html_source, options) {\n    return legacy_beautify_html(html_source, options, js_beautify, css_beautify);\n}\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlFormatter.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction htmlFormatter_format(document, range, options) {\n    var value = document.getText();\n    var includesEnd = true;\n    var initialIndentLevel = 0;\n    var tabSize = options.tabSize || 4;\n    if (range) {\n        var startOffset = document.offsetAt(range.start);\n        // include all leading whitespace iff at the beginning of the line\n        var extendedStart = startOffset;\n        while (extendedStart > 0 && isWhitespace(value, extendedStart - 1)) {\n            extendedStart--;\n        }\n        if (extendedStart === 0 || isEOL(value, extendedStart - 1)) {\n            startOffset = extendedStart;\n        }\n        else {\n            // else keep at least one whitespace\n            if (extendedStart < startOffset) {\n                startOffset = extendedStart + 1;\n            }\n        }\n        // include all following whitespace until the end of the line\n        var endOffset = document.offsetAt(range.end);\n        var extendedEnd = endOffset;\n        while (extendedEnd < value.length && isWhitespace(value, extendedEnd)) {\n            extendedEnd++;\n        }\n        if (extendedEnd === value.length || isEOL(value, extendedEnd)) {\n            endOffset = extendedEnd;\n        }\n        range = main_Range.create(document.positionAt(startOffset), document.positionAt(endOffset));\n        // Do not modify if substring starts in inside an element\n        // Ending inside an element is fine as it doesn\'t cause formatting errors\n        var firstHalf = value.substring(0, startOffset);\n        if (new RegExp(/.*[<][^>]*$/).test(firstHalf)) {\n            //return without modification\n            value = value.substring(startOffset, endOffset);\n            return [{\n                    range: range,\n                    newText: value\n                }];\n        }\n        includesEnd = endOffset === value.length;\n        value = value.substring(startOffset, endOffset);\n        if (startOffset !== 0) {\n            var startOfLineOffset = document.offsetAt(main_Position.create(range.start.line, 0));\n            initialIndentLevel = computeIndentLevel(document.getText(), startOfLineOffset, options);\n        }\n    }\n    else {\n        range = main_Range.create(main_Position.create(0, 0), document.positionAt(value.length));\n    }\n    var htmlOptions = {\n        indent_size: tabSize,\n        indent_char: options.insertSpaces ? \' \' : \'\\t\',\n        indent_empty_lines: getFormatOption(options, \'indentEmptyLines\', false),\n        wrap_line_length: getFormatOption(options, \'wrapLineLength\', 120),\n        unformatted: getTagsFormatOption(options, \'unformatted\', void 0),\n        content_unformatted: getTagsFormatOption(options, \'contentUnformatted\', void 0),\n        indent_inner_html: getFormatOption(options, \'indentInnerHtml\', false),\n        preserve_newlines: getFormatOption(options, \'preserveNewLines\', true),\n        max_preserve_newlines: getFormatOption(options, \'maxPreserveNewLines\', 32786),\n        indent_handlebars: getFormatOption(options, \'indentHandlebars\', false),\n        end_with_newline: includesEnd && getFormatOption(options, \'endWithNewline\', false),\n        extra_liners: getTagsFormatOption(options, \'extraLiners\', void 0),\n        wrap_attributes: getFormatOption(options, \'wrapAttributes\', \'auto\'),\n        wrap_attributes_indent_size: getFormatOption(options, \'wrapAttributesIndentSize\', void 0),\n        eol: \'\\n\',\n        indent_scripts: getFormatOption(options, \'indentScripts\', \'normal\'),\n        templating: getTemplatingFormatOption(options, \'all\'),\n        unformatted_content_delimiter: getFormatOption(options, \'unformattedContentDelimiter\', \'\'),\n    };\n    var result = html_beautify(trimLeft(value), htmlOptions);\n    if (initialIndentLevel > 0) {\n        var indent = options.insertSpaces ? repeat(\' \', tabSize * initialIndentLevel) : repeat(\'\\t\', initialIndentLevel);\n        result = result.split(\'\\n\').join(\'\\n\' + indent);\n        if (range.start.character === 0) {\n            result = indent + result; // keep the indent\n        }\n    }\n    return [{\n            range: range,\n            newText: result\n        }];\n}\nfunction trimLeft(str) {\n    return str.replace(/^\\s+/, \'\');\n}\nfunction getFormatOption(options, key, dflt) {\n    if (options && options.hasOwnProperty(key)) {\n        var value = options[key];\n        if (value !== null) {\n            return value;\n        }\n    }\n    return dflt;\n}\nfunction getTagsFormatOption(options, key, dflt) {\n    var list = getFormatOption(options, key, null);\n    if (typeof list === \'string\') {\n        if (list.length > 0) {\n            return list.split(\',\').map(function (t) { return t.trim().toLowerCase(); });\n        }\n        return [];\n    }\n    return dflt;\n}\nfunction getTemplatingFormatOption(options, dflt) {\n    var value = getFormatOption(options, \'templating\', dflt);\n    if (value === true) {\n        return [\'auto\'];\n    }\n    return [\'none\'];\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = offset;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === \' \') {\n            nChars++;\n        }\n        else if (ch === \'\\t\') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(document) {\n    var text = document.getText();\n    if (document.lineCount > 1) {\n        var to = document.offsetAt(Position.create(1, 0));\n        var from = to;\n        while (from > 0 && isEOL(text, from - 1)) {\n            from--;\n        }\n        return text.substr(from, to - from);\n    }\n    return \'\\n\';\n}\nfunction isEOL(text, offset) {\n    return \'\\r\\n\'.indexOf(text.charAt(offset)) !== -1;\n}\nfunction isWhitespace(text, offset) {\n    return \' \\t\'.indexOf(text.charAt(offset)) !== -1;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-uri/index.js\nvar LIB;LIB=(()=>{"use strict";var t={470:t=>{function e(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function r(t,e){for(var r,n="",o=0,i=-1,a=0,h=0;h<=t.length;++h){if(h<t.length)r=t.charCodeAt(h);else{if(47===r)break;r=47}if(47===r){if(i===h-1||1===a);else if(i!==h-1&&2===a){if(n.length<2||2!==o||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var s=n.lastIndexOf("/");if(s!==n.length-1){-1===s?(n="",o=0):o=(n=n.slice(0,s)).length-1-n.lastIndexOf("/"),i=h,a=0;continue}}else if(2===n.length||1===n.length){n="",o=0,i=h,a=0;continue}e&&(n.length>0?n+="/..":n="..",o=2)}else n.length>0?n+="/"+t.slice(i+1,h):n=t.slice(i+1,h),o=h-i-1;i=h,a=0}else 46===r&&-1!==a?++a:a=-1}return n}var n={resolve:function(){for(var t,n="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var a;i>=0?a=arguments[i]:(void 0===t&&(t=process.cwd()),a=t),e(a),0!==a.length&&(n=a+"/"+n,o=47===a.charCodeAt(0))}return n=r(n,!o),o?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(t){if(e(t),0===t.length)return".";var n=47===t.charCodeAt(0),o=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t="."),t.length>0&&o&&(t+="/"),n?"/"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,r=0;r<arguments.length;++r){var o=arguments[r];e(o),o.length>0&&(void 0===t?t=o:t+="/"+o)}return void 0===t?".":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return"";if((t=n.resolve(t))===(r=n.resolve(r)))return"";for(var o=1;o<t.length&&47===t.charCodeAt(o);++o);for(var i=t.length,a=i-o,h=1;h<r.length&&47===r.charCodeAt(h);++h);for(var s=r.length-h,f=a<s?a:s,u=-1,c=0;c<=f;++c){if(c===f){if(s>f){if(47===r.charCodeAt(h+c))return r.slice(h+c+1);if(0===c)return r.slice(h+c)}else a>f&&(47===t.charCodeAt(o+c)?u=c:0===c&&(u=0));break}var l=t.charCodeAt(o+c);if(l!==r.charCodeAt(h+c))break;47===l&&(u=c)}var p="";for(c=o+u+1;c<=i;++c)c!==i&&47!==t.charCodeAt(c)||(0===p.length?p+="..":p+="/..");return p.length>0?p+r.slice(h+u):(h+=u,47===r.charCodeAt(h)&&++h,r.slice(h))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return".";for(var r=t.charCodeAt(0),n=47===r,o=-1,i=!0,a=t.length-1;a>=1;--a)if(47===(r=t.charCodeAt(a))){if(!i){o=a;break}}else i=!1;return-1===o?n?"/":".":n&&1===o?"//":t.slice(0,o)},basename:function(t,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError(\'"ext" argument must be a string\');e(t);var n,o=0,i=-1,a=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var h=r.length-1,s=-1;for(n=t.length-1;n>=0;--n){var f=t.charCodeAt(n);if(47===f){if(!a){o=n+1;break}}else-1===s&&(a=!1,s=n+1),h>=0&&(f===r.charCodeAt(h)?-1==--h&&(i=n):(h=-1,i=s))}return o===i?i=s:-1===i&&(i=t.length),t.slice(o,i)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!a){o=n+1;break}}else-1===i&&(a=!1,i=n+1);return-1===i?"":t.slice(o,i)},extname:function(t){e(t);for(var r=-1,n=0,o=-1,i=!0,a=0,h=t.length-1;h>=0;--h){var s=t.charCodeAt(h);if(47!==s)-1===o&&(i=!1,o=h+1),46===s?-1===r?r=h:1!==a&&(a=1):-1!==r&&(a=-1);else if(!i){n=h+1;break}}return-1===r||-1===o||0===a||1===a&&r===o-1&&r===n+1?"":t.slice(r,o)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError(\'The "pathObject" argument must be of type Object. Received type \'+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||"")+(e.ext||"");return r?r===e.root?r+n:r+"/"+n:n}(0,t)},parse:function(t){e(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return r;var n,o=t.charCodeAt(0),i=47===o;i?(r.root="/",n=1):n=0;for(var a=-1,h=0,s=-1,f=!0,u=t.length-1,c=0;u>=n;--u)if(47!==(o=t.charCodeAt(u)))-1===s&&(f=!1,s=u+1),46===o?-1===a?a=u:1!==c&&(c=1):-1!==a&&(c=-1);else if(!f){h=u+1;break}return-1===a||-1===s||0===c||1===c&&a===s-1&&a===h+1?-1!==s&&(r.base=r.name=0===h&&i?t.slice(1,s):t.slice(h,s)):(0===h&&i?(r.name=t.slice(1,a),r.base=t.slice(1,s)):(r.name=t.slice(h,a),r.base=t.slice(h,s)),r.ext=t.slice(a,s)),h>0?r.dir=t.slice(0,h-1):i&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,t.exports=n},447:(t,e,r)=>{var n;if(r.r(e),r.d(e,{URI:()=>g,Utils:()=>O}),"object"==typeof process)n="win32"===process.platform;else if("object"==typeof navigator){var o=navigator.userAgent;n=o.indexOf("Windows")>=0}var i,a,h=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=/^\\w[\\w\\d+.-]*$/,f=/^\\//,u=/^\\/\\//,c="",l="/",p=/^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/,g=function(){function t(t,e,r,n,o,i){void 0===i&&(i=!1),"object"==typeof t?(this.scheme=t.scheme||c,this.authority=t.authority||c,this.path=t.path||c,this.query=t.query||c,this.fragment=t.fragment||c):(this.scheme=function(t,e){return t||e?t:"file"}(t,i),this.authority=e||c,this.path=function(t,e){switch(t){case"https":case"http":case"file":e?e[0]!==l&&(e=l+e):e=l}return e}(this.scheme,r||c),this.query=n||c,this.fragment=o||c,function(t,e){if(!t.scheme&&e)throw new Error(\'[UriError]: Scheme is missing: {scheme: "", authority: "\'+t.authority+\'", path: "\'+t.path+\'", query: "\'+t.query+\'", fragment: "\'+t.fragment+\'"}\');if(t.scheme&&!s.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!f.test(t.path))throw new Error(\'[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character\')}else if(u.test(t.path))throw new Error(\'[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")\')}(this,i))}return t.isUri=function(e){return e instanceof t||!!e&&"string"==typeof e.authority&&"string"==typeof e.fragment&&"string"==typeof e.path&&"string"==typeof e.query&&"string"==typeof e.scheme&&"function"==typeof e.fsPath&&"function"==typeof e.with&&"function"==typeof e.toString},Object.defineProperty(t.prototype,"fsPath",{get:function(){return C(this,!1)},enumerable:!1,configurable:!0}),t.prototype.with=function(t){if(!t)return this;var e=t.scheme,r=t.authority,n=t.path,o=t.query,i=t.fragment;return void 0===e?e=this.scheme:null===e&&(e=c),void 0===r?r=this.authority:null===r&&(r=c),void 0===n?n=this.path:null===n&&(n=c),void 0===o?o=this.query:null===o&&(o=c),void 0===i?i=this.fragment:null===i&&(i=c),e===this.scheme&&r===this.authority&&n===this.path&&o===this.query&&i===this.fragment?this:new v(e,r,n,o,i)},t.parse=function(t,e){void 0===e&&(e=!1);var r=p.exec(t);return r?new v(r[2]||c,x(r[4]||c),x(r[5]||c),x(r[7]||c),x(r[9]||c),e):new v(c,c,c,c,c)},t.file=function(t){var e=c;if(n&&(t=t.replace(/\\\\/g,l)),t[0]===l&&t[1]===l){var r=t.indexOf(l,2);-1===r?(e=t.substring(2),t=l):(e=t.substring(2,r),t=t.substring(r)||l)}return new v("file",e,t,c,c)},t.from=function(t){return new v(t.scheme,t.authority,t.path,t.query,t.fragment)},t.prototype.toString=function(t){return void 0===t&&(t=!1),A(this,t)},t.prototype.toJSON=function(){return this},t.revive=function(e){if(e){if(e instanceof t)return e;var r=new v(e);return r._formatted=e.external,r._fsPath=e._sep===d?e.fsPath:null,r}return e},t}(),d=n?1:void 0,v=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._formatted=null,e._fsPath=null,e}return h(e,t),Object.defineProperty(e.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=C(this,!1)),this._fsPath},enumerable:!1,configurable:!0}),e.prototype.toString=function(t){return void 0===t&&(t=!1),t?A(this,!0):(this._formatted||(this._formatted=A(this,!1)),this._formatted)},e.prototype.toJSON=function(){var t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=d),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t},e}(g),m=((a={})[58]="%3A",a[47]="%2F",a[63]="%3F",a[35]="%23",a[91]="%5B",a[93]="%5D",a[64]="%40",a[33]="%21",a[36]="%24",a[38]="%26",a[39]="%27",a[40]="%28",a[41]="%29",a[42]="%2A",a[43]="%2B",a[44]="%2C",a[59]="%3B",a[61]="%3D",a[32]="%20",a);function y(t,e){for(var r=void 0,n=-1,o=0;o<t.length;o++){var i=t.charCodeAt(o);if(i>=97&&i<=122||i>=65&&i<=90||i>=48&&i<=57||45===i||46===i||95===i||126===i||e&&47===i)-1!==n&&(r+=encodeURIComponent(t.substring(n,o)),n=-1),void 0!==r&&(r+=t.charAt(o));else{void 0===r&&(r=t.substr(0,o));var a=m[i];void 0!==a?(-1!==n&&(r+=encodeURIComponent(t.substring(n,o)),n=-1),r+=a):-1===n&&(n=o)}}return-1!==n&&(r+=encodeURIComponent(t.substring(n))),void 0!==r?r:t}function b(t){for(var e=void 0,r=0;r<t.length;r++){var n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=m[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function C(t,e){var r;return r=t.authority&&t.path.length>1&&"file"===t.scheme?"//"+t.authority+t.path:47===t.path.charCodeAt(0)&&(t.path.charCodeAt(1)>=65&&t.path.charCodeAt(1)<=90||t.path.charCodeAt(1)>=97&&t.path.charCodeAt(1)<=122)&&58===t.path.charCodeAt(2)?e?t.path.substr(1):t.path[1].toLowerCase()+t.path.substr(2):t.path,n&&(r=r.replace(/\\//g,"\\\\")),r}function A(t,e){var r=e?b:y,n="",o=t.scheme,i=t.authority,a=t.path,h=t.query,s=t.fragment;if(o&&(n+=o,n+=":"),(i||"file"===o)&&(n+=l,n+=l),i){var f=i.indexOf("@");if(-1!==f){var u=i.substr(0,f);i=i.substr(f+1),-1===(f=u.indexOf(":"))?n+=r(u,!1):(n+=r(u.substr(0,f),!1),n+=":",n+=r(u.substr(f+1),!1)),n+="@"}-1===(f=(i=i.toLowerCase()).indexOf(":"))?n+=r(i,!1):(n+=r(i.substr(0,f),!1),n+=i.substr(f))}if(a){if(a.length>=3&&47===a.charCodeAt(0)&&58===a.charCodeAt(2))(c=a.charCodeAt(1))>=65&&c<=90&&(a="/"+String.fromCharCode(c+32)+":"+a.substr(3));else if(a.length>=2&&58===a.charCodeAt(1)){var c;(c=a.charCodeAt(0))>=65&&c<=90&&(a=String.fromCharCode(c+32)+":"+a.substr(2))}n+=r(a,!0)}return h&&(n+="?",n+=r(h,!1)),s&&(n+="#",n+=e?s:y(s,!1)),n}function w(t){try{return decodeURIComponent(t)}catch(e){return t.length>3?t.substr(0,3)+w(t.substr(3)):t}}var _=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function x(t){return t.match(_)?t.replace(_,(function(t){return w(t)})):t}var O,P=r(470),j=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<r;e++)for(var i=arguments[e],a=0,h=i.length;a<h;a++,o++)n[o]=i[a];return n},U=P.posix||P;!function(t){t.joinPath=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return t.with({path:U.join.apply(U,j([t.path],e))})},t.resolvePath=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=t.path||"/";return t.with({path:U.resolve.apply(U,j([n],e))})},t.dirname=function(t){var e=U.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)?t:t.with({path:e})},t.basename=function(t){return U.basename(t.path)},t.extname=function(t){return U.extname(t.path)}}(O||(O={}))}},e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}return r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r(447)})();const{URI: vscode_uri_URI,Utils}=LIB;\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlLinks.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\nfunction normalizeRef(url) {\n    var first = url[0];\n    var last = url[url.length - 1];\n    if (first === last && (first === \'\\\'\' || first === \'\\"\')) {\n        url = url.substr(1, url.length - 2);\n    }\n    return url;\n}\nfunction validateRef(url, languageId) {\n    if (!url.length) {\n        return false;\n    }\n    if (languageId === \'handlebars\' && /{{.*}}/.test(url)) {\n        return false;\n    }\n    return /\\b(w[\\w\\d+.-]*:\\/\\/)?[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/?))/.test(url);\n}\nfunction getWorkspaceUrl(documentUri, tokenContent, documentContext, base) {\n    if (/^\\s*javascript\\:/i.test(tokenContent) || /[\\n\\r]/.test(tokenContent)) {\n        return undefined;\n    }\n    tokenContent = tokenContent.replace(/^\\s*/g, \'\');\n    if (/^https?:\\/\\//i.test(tokenContent) || /^file:\\/\\//i.test(tokenContent)) {\n        // Absolute link that needs no treatment\n        return tokenContent;\n    }\n    if (/^\\#/i.test(tokenContent)) {\n        return documentUri + tokenContent;\n    }\n    if (/^\\/\\//i.test(tokenContent)) {\n        // Absolute link (that does not name the protocol)\n        var pickedScheme = startsWith(documentUri, \'https://\') ? \'https\' : \'http\';\n        return pickedScheme + \':\' + tokenContent.replace(/^\\s*/g, \'\');\n    }\n    if (documentContext) {\n        return documentContext.resolveReference(tokenContent, base || documentUri);\n    }\n    return tokenContent;\n}\nfunction createLink(document, documentContext, attributeValue, startOffset, endOffset, base) {\n    var tokenContent = normalizeRef(attributeValue);\n    if (!validateRef(tokenContent, document.languageId)) {\n        return undefined;\n    }\n    if (tokenContent.length < attributeValue.length) {\n        startOffset++;\n        endOffset--;\n    }\n    var workspaceUrl = getWorkspaceUrl(document.uri, tokenContent, documentContext, base);\n    if (!workspaceUrl || !isValidURI(workspaceUrl)) {\n        return undefined;\n    }\n    return {\n        range: main_Range.create(document.positionAt(startOffset), document.positionAt(endOffset)),\n        target: workspaceUrl\n    };\n}\nfunction isValidURI(uri) {\n    try {\n        vscode_uri_URI.parse(uri);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction findDocumentLinks(document, documentContext) {\n    var newLinks = [];\n    var scanner = createScanner(document.getText(), 0);\n    var token = scanner.scan();\n    var lastAttributeName = undefined;\n    var afterBase = false;\n    var base = void 0;\n    var idLocations = {};\n    while (token !== TokenType.EOS) {\n        switch (token) {\n            case TokenType.StartTag:\n                if (!base) {\n                    var tagName = scanner.getTokenText().toLowerCase();\n                    afterBase = tagName === \'base\';\n                }\n                break;\n            case TokenType.AttributeName:\n                lastAttributeName = scanner.getTokenText().toLowerCase();\n                break;\n            case TokenType.AttributeValue:\n                if (lastAttributeName === \'src\' || lastAttributeName === \'href\') {\n                    var attributeValue = scanner.getTokenText();\n                    if (!afterBase) { // don\'t highlight the base link itself\n                        var link = createLink(document, documentContext, attributeValue, scanner.getTokenOffset(), scanner.getTokenEnd(), base);\n                        if (link) {\n                            newLinks.push(link);\n                        }\n                    }\n                    if (afterBase && typeof base === \'undefined\') {\n                        base = normalizeRef(attributeValue);\n                        if (base && documentContext) {\n                            base = documentContext.resolveReference(base, document.uri);\n                        }\n                    }\n                    afterBase = false;\n                    lastAttributeName = undefined;\n                }\n                else if (lastAttributeName === \'id\') {\n                    var id = normalizeRef(scanner.getTokenText());\n                    idLocations[id] = scanner.getTokenOffset();\n                }\n                break;\n        }\n        token = scanner.scan();\n    }\n    // change local links with ids to actual positions\n    for (var _i = 0, newLinks_1 = newLinks; _i < newLinks_1.length; _i++) {\n        var link = newLinks_1[_i];\n        var localWithHash = document.uri + \'#\';\n        if (link.target && startsWith(link.target, localWithHash)) {\n            var target = link.target.substr(localWithHash.length);\n            var offset = idLocations[target];\n            if (offset !== undefined) {\n                var pos = document.positionAt(offset);\n                link.target = "" + localWithHash + (pos.line + 1) + "," + (pos.character + 1);\n            }\n        }\n    }\n    return newLinks;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlHighlighting.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nfunction findDocumentHighlights(document, position, htmlDocument) {\n    var offset = document.offsetAt(position);\n    var node = htmlDocument.findNodeAt(offset);\n    if (!node.tag) {\n        return [];\n    }\n    var result = [];\n    var startTagRange = getTagNameRange(TokenType.StartTag, document, node.start);\n    var endTagRange = typeof node.endTagStart === \'number\' && getTagNameRange(TokenType.EndTag, document, node.endTagStart);\n    if (startTagRange && covers(startTagRange, position) || endTagRange && covers(endTagRange, position)) {\n        if (startTagRange) {\n            result.push({ kind: main_DocumentHighlightKind.Read, range: startTagRange });\n        }\n        if (endTagRange) {\n            result.push({ kind: main_DocumentHighlightKind.Read, range: endTagRange });\n        }\n    }\n    return result;\n}\nfunction isBeforeOrEqual(pos1, pos2) {\n    return pos1.line < pos2.line || (pos1.line === pos2.line && pos1.character <= pos2.character);\n}\nfunction covers(range, position) {\n    return isBeforeOrEqual(range.start, position) && isBeforeOrEqual(position, range.end);\n}\nfunction getTagNameRange(tokenType, document, startOffset) {\n    var scanner = createScanner(document.getText(), startOffset);\n    var token = scanner.scan();\n    while (token !== TokenType.EOS && token !== tokenType) {\n        token = scanner.scan();\n    }\n    if (token !== TokenType.EOS) {\n        return { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };\n    }\n    return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlSymbolsProvider.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nfunction findDocumentSymbols(document, htmlDocument) {\n    var symbols = [];\n    htmlDocument.roots.forEach(function (node) {\n        provideFileSymbolsInternal(document, node, \'\', symbols);\n    });\n    return symbols;\n}\nfunction provideFileSymbolsInternal(document, node, container, symbols) {\n    var name = nodeToName(node);\n    var location = Location.create(document.uri, main_Range.create(document.positionAt(node.start), document.positionAt(node.end)));\n    var symbol = {\n        name: name,\n        location: location,\n        containerName: container,\n        kind: main_SymbolKind.Field\n    };\n    symbols.push(symbol);\n    node.children.forEach(function (child) {\n        provideFileSymbolsInternal(document, child, name, symbols);\n    });\n}\nfunction nodeToName(node) {\n    var name = node.tag;\n    if (node.attributes) {\n        var id = node.attributes[\'id\'];\n        var classes = node.attributes[\'class\'];\n        if (id) {\n            name += "#" + id.replace(/[\\"\\\']/g, \'\');\n        }\n        if (classes) {\n            name += classes.replace(/[\\"\\\']/g, \'\').split(/\\s+/).map(function (className) { return "." + className; }).join(\'\');\n        }\n    }\n    return name || \'?\';\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlRename.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction doRename(document, position, newName, htmlDocument) {\n    var _a;\n    var offset = document.offsetAt(position);\n    var node = htmlDocument.findNodeAt(offset);\n    if (!node.tag) {\n        return null;\n    }\n    if (!isWithinTagRange(node, offset, node.tag)) {\n        return null;\n    }\n    var edits = [];\n    var startTagRange = {\n        start: document.positionAt(node.start + \'<\'.length),\n        end: document.positionAt(node.start + \'<\'.length + node.tag.length)\n    };\n    edits.push({\n        range: startTagRange,\n        newText: newName\n    });\n    if (node.endTagStart) {\n        var endTagRange = {\n            start: document.positionAt(node.endTagStart + \'</\'.length),\n            end: document.positionAt(node.endTagStart + \'</\'.length + node.tag.length)\n        };\n        edits.push({\n            range: endTagRange,\n            newText: newName\n        });\n    }\n    var changes = (_a = {},\n        _a[document.uri.toString()] = edits,\n        _a);\n    return {\n        changes: changes\n    };\n}\nfunction toLocString(p) {\n    return "(" + p.line + ", " + p.character + ")";\n}\nfunction isWithinTagRange(node, offset, nodeTag) {\n    // Self-closing tag\n    if (node.endTagStart) {\n        if (node.endTagStart + \'</\'.length <= offset && offset <= node.endTagStart + \'</\'.length + nodeTag.length) {\n            return true;\n        }\n    }\n    return node.start + \'<\'.length <= offset && offset <= node.start + \'<\'.length + nodeTag.length;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlMatchingTagPosition.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction findMatchingTagPosition(document, position, htmlDocument) {\n    var offset = document.offsetAt(position);\n    var node = htmlDocument.findNodeAt(offset);\n    if (!node.tag) {\n        return null;\n    }\n    if (!node.endTagStart) {\n        return null;\n    }\n    // Within open tag, compute close tag\n    if (node.start + \'<\'.length <= offset && offset <= node.start + \'<\'.length + node.tag.length) {\n        var mirrorOffset = (offset - \'<\'.length - node.start) + node.endTagStart + \'</\'.length;\n        return document.positionAt(mirrorOffset);\n    }\n    // Within closing tag, compute open tag\n    if (node.endTagStart + \'</\'.length <= offset && offset <= node.endTagStart + \'</\'.length + node.tag.length) {\n        var mirrorOffset = (offset - \'</\'.length - node.endTagStart) + node.start + \'<\'.length;\n        return document.positionAt(mirrorOffset);\n    }\n    return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlLinkedEditing.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nfunction findLinkedEditingRanges(document, position, htmlDocument) {\n    var offset = document.offsetAt(position);\n    var node = htmlDocument.findNodeAt(offset);\n    var tagLength = node.tag ? node.tag.length : 0;\n    if (!node.endTagStart) {\n        return null;\n    }\n    if (\n    // Within open tag, compute close tag\n    (node.start + \'<\'.length <= offset && offset <= node.start + \'<\'.length + tagLength) ||\n        // Within closing tag, compute open tag\n        node.endTagStart + \'</\'.length <= offset && offset <= node.endTagStart + \'</\'.length + tagLength) {\n        return [\n            main_Range.create(document.positionAt(node.start + \'<\'.length), document.positionAt(node.start + \'<\'.length + tagLength)),\n            main_Range.create(document.positionAt(node.endTagStart + \'</\'.length), document.positionAt(node.endTagStart + \'</\'.length + tagLength))\n        ];\n    }\n    return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlFolding.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction limitRanges(ranges, rangeLimit) {\n    ranges = ranges.sort(function (r1, r2) {\n        var diff = r1.startLine - r2.startLine;\n        if (diff === 0) {\n            diff = r1.endLine - r2.endLine;\n        }\n        return diff;\n    });\n    // compute each range\'s nesting level in \'nestingLevels\'.\n    // count the number of ranges for each level in \'nestingLevelCounts\'\n    var top = void 0;\n    var previous = [];\n    var nestingLevels = [];\n    var nestingLevelCounts = [];\n    var setNestingLevel = function (index, level) {\n        nestingLevels[index] = level;\n        if (level < 30) {\n            nestingLevelCounts[level] = (nestingLevelCounts[level] || 0) + 1;\n        }\n    };\n    // compute nesting levels and sanitize\n    for (var i = 0; i < ranges.length; i++) {\n        var entry = ranges[i];\n        if (!top) {\n            top = entry;\n            setNestingLevel(i, 0);\n        }\n        else {\n            if (entry.startLine > top.startLine) {\n                if (entry.endLine <= top.endLine) {\n                    previous.push(top);\n                    top = entry;\n                    setNestingLevel(i, previous.length);\n                }\n                else if (entry.startLine > top.endLine) {\n                    do {\n                        top = previous.pop();\n                    } while (top && entry.startLine > top.endLine);\n                    if (top) {\n                        previous.push(top);\n                    }\n                    top = entry;\n                    setNestingLevel(i, previous.length);\n                }\n            }\n        }\n    }\n    var entries = 0;\n    var maxLevel = 0;\n    for (var i = 0; i < nestingLevelCounts.length; i++) {\n        var n = nestingLevelCounts[i];\n        if (n) {\n            if (n + entries > rangeLimit) {\n                maxLevel = i;\n                break;\n            }\n            entries += n;\n        }\n    }\n    var result = [];\n    for (var i = 0; i < ranges.length; i++) {\n        var level = nestingLevels[i];\n        if (typeof level === \'number\') {\n            if (level < maxLevel || (level === maxLevel && entries++ < rangeLimit)) {\n                result.push(ranges[i]);\n            }\n        }\n    }\n    return result;\n}\nfunction getFoldingRanges(document, context) {\n    var scanner = createScanner(document.getText());\n    var token = scanner.scan();\n    var ranges = [];\n    var stack = [];\n    var lastTagName = null;\n    var prevStart = -1;\n    function addRange(range) {\n        ranges.push(range);\n        prevStart = range.startLine;\n    }\n    while (token !== TokenType.EOS) {\n        switch (token) {\n            case TokenType.StartTag: {\n                var tagName = scanner.getTokenText();\n                var startLine = document.positionAt(scanner.getTokenOffset()).line;\n                stack.push({ startLine: startLine, tagName: tagName });\n                lastTagName = tagName;\n                break;\n            }\n            case TokenType.EndTag: {\n                lastTagName = scanner.getTokenText();\n                break;\n            }\n            case TokenType.StartTagClose:\n                if (!lastTagName || !isVoidElement(lastTagName)) {\n                    break;\n                }\n            // fallthrough\n            case TokenType.EndTagClose:\n            case TokenType.StartTagSelfClose: {\n                var i = stack.length - 1;\n                while (i >= 0 && stack[i].tagName !== lastTagName) {\n                    i--;\n                }\n                if (i >= 0) {\n                    var stackElement = stack[i];\n                    stack.length = i;\n                    var line = document.positionAt(scanner.getTokenOffset()).line;\n                    var startLine = stackElement.startLine;\n                    var endLine = line - 1;\n                    if (endLine > startLine && prevStart !== startLine) {\n                        addRange({ startLine: startLine, endLine: endLine });\n                    }\n                }\n                break;\n            }\n            case TokenType.Comment: {\n                var startLine = document.positionAt(scanner.getTokenOffset()).line;\n                var text = scanner.getTokenText();\n                var m = text.match(/^\\s*#(region\\b)|(endregion\\b)/);\n                if (m) {\n                    if (m[1]) { // start pattern match\n                        stack.push({ startLine: startLine, tagName: \'\' }); // empty tagName marks region\n                    }\n                    else {\n                        var i = stack.length - 1;\n                        while (i >= 0 && stack[i].tagName.length) {\n                            i--;\n                        }\n                        if (i >= 0) {\n                            var stackElement = stack[i];\n                            stack.length = i;\n                            var endLine = startLine;\n                            startLine = stackElement.startLine;\n                            if (endLine > startLine && prevStart !== startLine) {\n                                addRange({ startLine: startLine, endLine: endLine, kind: FoldingRangeKind.Region });\n                            }\n                        }\n                    }\n                }\n                else {\n                    var endLine = document.positionAt(scanner.getTokenOffset() + scanner.getTokenLength()).line;\n                    if (startLine < endLine) {\n                        addRange({ startLine: startLine, endLine: endLine, kind: FoldingRangeKind.Comment });\n                    }\n                }\n                break;\n            }\n        }\n        token = scanner.scan();\n    }\n    var rangeLimit = context && context.rangeLimit || Number.MAX_VALUE;\n    if (ranges.length > rangeLimit) {\n        return limitRanges(ranges, rangeLimit);\n    }\n    return ranges;\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/services/htmlSelectionRange.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction getSelectionRanges(document, positions) {\n    function getSelectionRange(position) {\n        var applicableRanges = getApplicableRanges(document, position);\n        var prev = undefined;\n        var current = undefined;\n        for (var index = applicableRanges.length - 1; index >= 0; index--) {\n            var range = applicableRanges[index];\n            if (!prev || range[0] !== prev[0] || range[1] !== prev[1]) {\n                current = SelectionRange.create(main_Range.create(document.positionAt(applicableRanges[index][0]), document.positionAt(applicableRanges[index][1])), current);\n            }\n            prev = range;\n        }\n        if (!current) {\n            current = SelectionRange.create(main_Range.create(position, position));\n        }\n        return current;\n    }\n    return positions.map(getSelectionRange);\n}\nfunction getApplicableRanges(document, position) {\n    var htmlDoc = parse(document.getText());\n    var currOffset = document.offsetAt(position);\n    var currNode = htmlDoc.findNodeAt(currOffset);\n    var result = getAllParentTagRanges(currNode);\n    // Self-closing or void elements\n    if (currNode.startTagEnd && !currNode.endTagStart) {\n        // THe rare case of unmatching tag pairs like <div></div1>\n        if (currNode.startTagEnd !== currNode.end) {\n            return [[currNode.start, currNode.end]];\n        }\n        var closeRange = main_Range.create(document.positionAt(currNode.startTagEnd - 2), document.positionAt(currNode.startTagEnd));\n        var closeText = document.getText(closeRange);\n        // Self-closing element\n        if (closeText === \'/>\') {\n            result.unshift([currNode.start + 1, currNode.startTagEnd - 2]);\n        }\n        // Void element\n        else {\n            result.unshift([currNode.start + 1, currNode.startTagEnd - 1]);\n        }\n        var attributeLevelRanges = getAttributeLevelRanges(document, currNode, currOffset);\n        result = attributeLevelRanges.concat(result);\n        return result;\n    }\n    if (!currNode.startTagEnd || !currNode.endTagStart) {\n        return result;\n    }\n    /**\n     * For html like\n     * `<div class="foo">bar</div>`\n     */\n    result.unshift([currNode.start, currNode.end]);\n    /**\n     * Cursor inside `<div class="foo">`\n     */\n    if (currNode.start < currOffset && currOffset < currNode.startTagEnd) {\n        result.unshift([currNode.start + 1, currNode.startTagEnd - 1]);\n        var attributeLevelRanges = getAttributeLevelRanges(document, currNode, currOffset);\n        result = attributeLevelRanges.concat(result);\n        return result;\n    }\n    /**\n     * Cursor inside `bar`\n     */\n    else if (currNode.startTagEnd <= currOffset && currOffset <= currNode.endTagStart) {\n        result.unshift([currNode.startTagEnd, currNode.endTagStart]);\n        return result;\n    }\n    /**\n     * Cursor inside `</div>`\n     */\n    else {\n        // `div` inside `</div>`\n        if (currOffset >= currNode.endTagStart + 2) {\n            result.unshift([currNode.endTagStart + 2, currNode.end - 1]);\n        }\n        return result;\n    }\n}\nfunction getAllParentTagRanges(initialNode) {\n    var currNode = initialNode;\n    var getNodeRanges = function (n) {\n        if (n.startTagEnd && n.endTagStart && n.startTagEnd < n.endTagStart) {\n            return [\n                [n.startTagEnd, n.endTagStart],\n                [n.start, n.end]\n            ];\n        }\n        return [\n            [n.start, n.end]\n        ];\n    };\n    var result = [];\n    while (currNode.parent) {\n        currNode = currNode.parent;\n        getNodeRanges(currNode).forEach(function (r) { return result.push(r); });\n    }\n    return result;\n}\nfunction getAttributeLevelRanges(document, currNode, currOffset) {\n    var currNodeRange = main_Range.create(document.positionAt(currNode.start), document.positionAt(currNode.end));\n    var currNodeText = document.getText(currNodeRange);\n    var relativeOffset = currOffset - currNode.start;\n    /**\n     * Tag level semantic selection\n     */\n    var scanner = createScanner(currNodeText);\n    var token = scanner.scan();\n    /**\n     * For text like\n     * <div class="foo">bar</div>\n     */\n    var positionOffset = currNode.start;\n    var result = [];\n    var isInsideAttribute = false;\n    var attrStart = -1;\n    while (token !== TokenType.EOS) {\n        switch (token) {\n            case TokenType.AttributeName: {\n                if (relativeOffset < scanner.getTokenOffset()) {\n                    isInsideAttribute = false;\n                    break;\n                }\n                if (relativeOffset <= scanner.getTokenEnd()) {\n                    // `class`\n                    result.unshift([scanner.getTokenOffset(), scanner.getTokenEnd()]);\n                }\n                isInsideAttribute = true;\n                attrStart = scanner.getTokenOffset();\n                break;\n            }\n            case TokenType.AttributeValue: {\n                if (!isInsideAttribute) {\n                    break;\n                }\n                var valueText = scanner.getTokenText();\n                if (relativeOffset < scanner.getTokenOffset()) {\n                    // `class="foo"`\n                    result.push([attrStart, scanner.getTokenEnd()]);\n                    break;\n                }\n                if (relativeOffset >= scanner.getTokenOffset() && relativeOffset <= scanner.getTokenEnd()) {\n                    // `"foo"`\n                    result.unshift([scanner.getTokenOffset(), scanner.getTokenEnd()]);\n                    // `foo`\n                    if ((valueText[0] === "\\"" && valueText[valueText.length - 1] === "\\"") || (valueText[0] === "\'" && valueText[valueText.length - 1] === "\'")) {\n                        if (relativeOffset >= scanner.getTokenOffset() + 1 && relativeOffset <= scanner.getTokenEnd() - 1) {\n                            result.unshift([scanner.getTokenOffset() + 1, scanner.getTokenEnd() - 1]);\n                        }\n                    }\n                    // `class="foo"`\n                    result.push([attrStart, scanner.getTokenEnd()]);\n                }\n                break;\n            }\n        }\n        token = scanner.scan();\n    }\n    return result.map(function (pair) {\n        return [pair[0] + positionOffset, pair[1] + positionOffset];\n    });\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/languageFacts/data/webCustomData.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// file generated from vscode-web-custom-data NPM package\nvar webCustomData_htmlData = {\n    "version": 1.1,\n    "tags": [\n        {\n            "name": "html",\n            "description": {\n                "kind": "markdown",\n                "value": "The html element represents the root of an HTML document."\n            },\n            "attributes": [\n                {\n                    "name": "manifest",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Specifies the URI of a resource manifest indicating resources that should be cached locally. See [Using the application cache](https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache) for details."\n                    }\n                },\n                {\n                    "name": "version",\n                    "description": "Specifies the version of the HTML [Document Type Definition](https://developer.mozilla.org/en-US/docs/Glossary/DTD \\"Document Type Definition: In HTML, the doctype is the required \\"<!DOCTYPE html>\\" preamble found at the top of all documents. Its sole purpose is to prevent a browser from switching into so-called “quirks mode” when rendering a document; that is, the \\"<!DOCTYPE html>\\" doctype ensures that the browser makes a best-effort attempt at following the relevant specifications, rather than using a different rendering mode that is incompatible with some specifications.\\") that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration."\n                },\n                {\n                    "name": "xmlns",\n                    "description": "Specifies the XML Namespace of the document. Default value is `\\"http://www.w3.org/1999/xhtml\\"`. This is required in documents parsed with XML parsers, and optional in text/html documents."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/html"\n                }\n            ]\n        },\n        {\n            "name": "head",\n            "description": {\n                "kind": "markdown",\n                "value": "The head element represents a collection of metadata for the Document."\n            },\n            "attributes": [\n                {\n                    "name": "profile",\n                    "description": "The URIs of one or more metadata profiles, separated by white space."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/head"\n                }\n            ]\n        },\n        {\n            "name": "title",\n            "description": {\n                "kind": "markdown",\n                "value": "The title element represents the document\'s title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user\'s history or bookmarks, or in search results. The document\'s title is often different from its first heading, since the first heading does not have to stand alone when taken out of context."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/title"\n                }\n            ]\n        },\n        {\n            "name": "base",\n            "description": {\n                "kind": "markdown",\n                "value": "The base element allows authors to specify the document base URL for the purposes of resolving relative URLs, and the name of the default browsing context for the purposes of following hyperlinks. The element does not represent any content beyond this information."\n            },\n            "attributes": [\n                {\n                    "name": "href",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The base URL to be used throughout the document for relative URL addresses. If this attribute is specified, this element must come before any other elements with attributes whose values are URLs. Absolute and relative URLs are allowed."\n                    }\n                },\n                {\n                    "name": "target",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A name or keyword indicating the default location to display the result when hyperlinks or forms cause navigation, for elements that do not have an explicit target reference. It is a name of, or keyword for, a _browsing context_ (for example: tab, window, or inline frame). The following keywords have special meanings:\\n\\n*   `_self`: Load the result into the same browsing context as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the result into a new unnamed browsing context.\\n*   `_parent`: Load the result into the parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: Load the result into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\\n\\nIf this attribute is specified, this element must come before any other elements with attributes whose values are URLs."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/base"\n                }\n            ]\n        },\n        {\n            "name": "link",\n            "description": {\n                "kind": "markdown",\n                "value": "The link element allows authors to link their document to other resources."\n            },\n            "attributes": [\n                {\n                    "name": "href",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute specifies the [URL](https://developer.mozilla.org/en-US/docs/Glossary/URL \\"URL: Uniform Resource Locator (URL) is a text string specifying where a resource can be found on the Internet.\\") of the linked resource. A URL can be absolute or relative."\n                    }\n                },\n                {\n                    "name": "crossorigin",\n                    "valueSet": "xo",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This enumerated attribute indicates whether [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \\"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\\") must be used when fetching the resource. [CORS-enabled images](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") element without being _tainted_. The allowed values are:\\n\\n`anonymous`\\n\\nA cross-origin request (i.e. with an [`Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin \\"The Origin request header indicates where a fetch originates from. It doesn\'t include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn\'t disclose the whole path.\\") HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin \\"The Access-Control-Allow-Origin response header indicates whether the response can be shared with requesting code from the given origin.\\") HTTP header) the image will be tainted and its usage restricted.\\n\\n`use-credentials`\\n\\nA cross-origin request (i.e. with an `Origin` HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed). If the server does not give credentials to the origin site (through [`Access-Control-Allow-Credentials`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials \\"The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to frontend JavaScript code when the request\'s credentials mode (Request.credentials) is \\"include\\".\\") HTTP header), the resource will be _tainted_ and its usage restricted.\\n\\nIf the attribute is not present, the resource is fetched without a [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \\"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\\") request (i.e. without sending the `Origin` HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword **anonymous** was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for additional information."\n                    }\n                },\n                {\n                    "name": "rel",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of the [link types values](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."\n                    }\n                },\n                {\n                    "name": "media",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute specifies the media that the linked resource applies to. Its value must be a media type / [media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries). This attribute is mainly useful when linking to external stylesheets — it allows the user agent to pick the best adapted one for the device it runs on.\\n\\n**Notes:**\\n\\n*   In HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., [media types and groups](https://developer.mozilla.org/en-US/docs/Web/CSS/@media), where defined and allowed as values for this attribute, such as `print`, `screen`, `aural`, `braille`. HTML5 extended this to any kind of [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries), which are a superset of the allowed values of HTML 4.\\n*   Browsers not supporting [CSS3 Media Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries) won\'t necessarily recognize the adequate link; do not forget to set fallback links, the restricted set of media queries defined in HTML 4."\n                    }\n                },\n                {\n                    "name": "hreflang",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are determined by [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt). Use this attribute only if the [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute is present."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as **text/html**, **text/css**, and so on. The common use of this attribute is to define the type of stylesheet being referenced (such as **text/css**), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the `type` attribute, but is actually now recommended practice. It is also used on `rel=\\"preload\\"` link types, to make sure the browser only downloads file types that it supports."\n                    }\n                },\n                {\n                    "name": "sizes",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute defines the sizes of the icons for visual media contained in the resource. It must be present only if the [`rel`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-rel) contains a value of `icon` or a non-standard type such as Apple\'s `apple-touch-icon`. It may have the following values:\\n\\n*   `any`, meaning that the icon can be scaled to any size as it is in a vector format, like `image/svg+xml`.\\n*   a white-space separated list of sizes, each in the format `_<width in pixels>_x_<height in pixels>_` or `_<width in pixels>_X_<height in pixels>_`. Each of these sizes must be contained in the resource.\\n\\n**Note:** Most icon formats are only able to store one single icon; therefore most of the time the [`sizes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-sizes) contains only one entry. MS\'s ICO format does, as well as Apple\'s ICNS. ICO is more ubiquitous; you should definitely use it."\n                    }\n                },\n                {\n                    "name": "as",\n                    "description": "This attribute is only used when `rel=\\"preload\\"` or `rel=\\"prefetch\\"` has been set on the `<link>` element. It specifies the type of content being loaded by the `<link>`, which is necessary for content prioritization, request matching, application of correct [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), and setting of correct [`Accept`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept \\"The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image, video or a script.\\") request header."\n                },\n                {\n                    "name": "importance",\n                    "description": "Indicates the relative importance of the resource. Priority hints are delegated using the values:"\n                },\n                {\n                    "name": "importance",\n                    "description": "**`auto`**: Indicates **no preference**. The browser may use its own heuristics to decide the priority of the resource.\\n\\n**`high`**: Indicates to the browser that the resource is of **high** priority.\\n\\n**`low`**: Indicates to the browser that the resource is of **low** priority.\\n\\n**Note:** The `importance` attribute may only be used for the `<link>` element if `rel=\\"preload\\"` or `rel=\\"prefetch\\"` is present."\n                },\n                {\n                    "name": "integrity",\n                    "description": "Contains inline metadata — a base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch. The browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation. See [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)."\n                },\n                {\n                    "name": "referrerpolicy",\n                    "description": "A string indicating which referrer to use when fetching the resource:\\n\\n*   `no-referrer` means that the [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade` means that no [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent’s default behavior, if no policy is otherwise specified.\\n*   `origin` means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port.\\n*   `origin-when-cross-origin` means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer\'s path.\\n*   `unsafe-url` means that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins."\n                },\n                {\n                    "name": "title",\n                    "description": "The `title` attribute has special semantics on the `<link>` element. When used on a `<link rel=\\"stylesheet\\">` it defines a [preferred or an alternate stylesheet](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets). Incorrectly using it may [cause the stylesheet to be ignored](https://developer.mozilla.org/en-US/docs/Correctly_Using_Titles_With_External_Stylesheets)."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/link"\n                }\n            ]\n        },\n        {\n            "name": "meta",\n            "description": {\n                "kind": "markdown",\n                "value": "The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements."\n            },\n            "attributes": [\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute defines the name of a piece of document-level metadata. It should not be set if one of the attributes [`itemprop`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-itemprop), [`http-equiv`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv) or [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) is also set.\\n\\nThis metadata name is associated with the value contained by the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute. The possible values for the name attribute are:\\n\\n*   `application-name` which defines the name of the application running in the web page.\\n    \\n    **Note:**\\n    \\n    *   Browsers may use this to identify the application. It is different from the [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title \\"The HTML Title element (<title>) defines the document\'s title that is shown in a browser\'s title bar or a page\'s tab.\\") element, which usually contain the application name, but may also contain information like the document name or a status.\\n    *   Simple web pages shouldn\'t define an application-name.\\n    \\n*   `author` which defines the name of the document\'s author.\\n*   `description` which contains a short and accurate summary of the content of the page. Several browsers, like Firefox and Opera, use this as the default description of bookmarked pages.\\n*   `generator` which contains the identifier of the software that generated the page.\\n*   `keywords` which contains words relevant to the page\'s content separated by commas.\\n*   `referrer` which controls the [`Referer` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) attached to requests sent from the document:\\n    \\n    Values for the `content` attribute of `<meta name=\\"referrer\\">`\\n    \\n    `no-referrer`\\n    \\n    Do not send a HTTP `Referrer` header.\\n    \\n    `origin`\\n    \\n    Send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the document.\\n    \\n    `no-referrer-when-downgrade`\\n    \\n    Send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) as a referrer to URLs as secure as the current page, (https→https), but does not send a referrer to less secure URLs (https→http). This is the default behaviour.\\n    \\n    `origin-when-cross-origin`\\n    \\n    Send the full URL (stripped of parameters) for same-origin requests, but only send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) for other cases.\\n    \\n    `same-origin`\\n    \\n    A referrer will be sent for [same-site origins](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy), but cross-origin requests will contain no referrer information.\\n    \\n    `strict-origin`\\n    \\n    Only send the origin of the document as the referrer to a-priori as-much-secure destination (HTTPS->HTTPS), but don\'t send it to a less secure destination (HTTPS->HTTP).\\n    \\n    `strict-origin-when-cross-origin`\\n    \\n    Send a full URL when performing a same-origin request, only send the origin of the document to a-priori as-much-secure destination (HTTPS->HTTPS), and send no header to a less secure destination (HTTPS->HTTP).\\n    \\n    `unsafe-URL`\\n    \\n    Send the full URL (stripped of parameters) for same-origin or cross-origin requests.\\n    \\n    **Notes:**\\n    \\n    *   Some browsers support the deprecated values of `always`, `default`, and `never` for referrer.\\n    *   Dynamically inserting `<meta name=\\"referrer\\">` (with [`document.write`](https://developer.mozilla.org/en-US/docs/Web/API/Document/write) or [`appendChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)) makes the referrer behaviour unpredictable.\\n    *   When several conflicting policies are defined, the no-referrer policy is applied.\\n    \\n\\nThis attribute may also have a value taken from the extended list defined on [WHATWG Wiki MetaExtensions page](https://wiki.whatwg.org/wiki/MetaExtensions). Although none have been formally accepted yet, a few commonly used names are:\\n\\n*   `creator` which defines the name of the creator of the document, such as an organization or institution. If there are more than one, several [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") elements should be used.\\n*   `googlebot`, a synonym of `robots`, is only followed by Googlebot (the indexing crawler for Google).\\n*   `publisher` which defines the name of the document\'s publisher.\\n*   `robots` which defines the behaviour that cooperative crawlers, or \\"robots\\", should use with the page. It is a comma-separated list of the values below:\\n    \\n    Values for the content of `<meta name=\\"robots\\">`\\n    \\n    Value\\n    \\n    Description\\n    \\n    Used by\\n    \\n    `index`\\n    \\n    Allows the robot to index the page (default).\\n    \\n    All\\n    \\n    `noindex`\\n    \\n    Requests the robot to not index the page.\\n    \\n    All\\n    \\n    `follow`\\n    \\n    Allows the robot to follow the links on the page (default).\\n    \\n    All\\n    \\n    `nofollow`\\n    \\n    Requests the robot to not follow the links on the page.\\n    \\n    All\\n    \\n    `none`\\n    \\n    Equivalent to `noindex, nofollow`\\n    \\n    [Google](https://support.google.com/webmasters/answer/79812)\\n    \\n    `noodp`\\n    \\n    Prevents using the [Open Directory Project](https://www.dmoz.org/) description, if any, as the page description in search engine results.\\n    \\n    [Google](https://support.google.com/webmasters/answer/35624#nodmoz), [Yahoo](https://help.yahoo.com/kb/search-for-desktop/meta-tags-robotstxt-yahoo-search-sln2213.html#cont5), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `noarchive`\\n    \\n    Requests the search engine not to cache the page content.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives), [Yahoo](https://help.yahoo.com/kb/search-for-desktop/SLN2213.html), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `nosnippet`\\n    \\n    Prevents displaying any description of the page in search engine results.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `noimageindex`\\n    \\n    Requests this page not to appear as the referring page of an indexed image.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives)\\n    \\n    `nocache`\\n    \\n    Synonym of `noarchive`.\\n    \\n    [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    **Notes:**\\n    \\n    *   Only cooperative robots follow these rules. Do not expect to prevent e-mail harvesters with them.\\n    *   The robot still needs to access the page in order to read these rules. To prevent bandwidth consumption, use a _[robots.txt](https://developer.mozilla.org/en-US/docs/Glossary/robots.txt \\"robots.txt: Robots.txt is a file which is usually placed in the root of any website. It decides whether crawlers are permitted or forbidden access to the web site.\\")_ file.\\n    *   If you want to remove a page, `noindex` will work, but only after the robot visits the page again. Ensure that the `robots.txt` file is not preventing revisits.\\n    *   Some values are mutually exclusive, like `index` and `noindex`, or `follow` and `nofollow`. In these cases the robot\'s behaviour is undefined and may vary between them.\\n    *   Some crawler robots, like Google, Yahoo and Bing, support the same values for the HTTP header `X-Robots-Tag`; this allows non-HTML documents like images to use these rules.\\n    \\n*   `slurp`, is a synonym of `robots`, but only for Slurp - the crawler for Yahoo Search.\\n*   `viewport`, which gives hints about the size of the initial size of the [viewport](https://developer.mozilla.org/en-US/docs/Glossary/viewport \\"viewport: A viewport represents a polygonal (normally rectangular) area in computer graphics that is currently being viewed. In web browser terms, it refers to the part of the document you\'re viewing which is currently visible in its window (or the screen, if the document is being viewed in full screen mode). Content outside the viewport is not visible onscreen until scrolled into view.\\"). Used by mobile devices only.\\n    \\n    Values for the content of `<meta name=\\"viewport\\">`\\n    \\n    Value\\n    \\n    Possible subvalues\\n    \\n    Description\\n    \\n    `width`\\n    \\n    A positive integer number, or the text `device-width`\\n    \\n    Defines the pixel width of the viewport that you want the web site to be rendered at.\\n    \\n    `height`\\n    \\n    A positive integer, or the text `device-height`\\n    \\n    Defines the height of the viewport. Not used by any browser.\\n    \\n    `initial-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the ratio between the device width (`device-width` in portrait mode or `device-height` in landscape mode) and the viewport size.\\n    \\n    `maximum-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the maximum amount to zoom in. It must be greater or equal to the `minimum-scale` or the behaviour is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default.\\n    \\n    `minimum-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the minimum zoom level. It must be smaller or equal to the `maximum-scale` or the behaviour is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default.\\n    \\n    `user-scalable`\\n    \\n    `yes` or `no`\\n    \\n    If set to `no`, the user is not able to zoom in the webpage. The default is `yes`. Browser settings can ignore this rule, and iOS10+ ignores it by default.\\n    \\n    Specification\\n    \\n    Status\\n    \\n    Comment\\n    \\n    [CSS Device Adaptation  \\n    The definition of \'<meta name=\\"viewport\\">\' in that specification.](https://drafts.csswg.org/css-device-adapt/#viewport-meta)\\n    \\n    Working Draft\\n    \\n    Non-normatively describes the Viewport META element\\n    \\n    See also: [`@viewport`](https://developer.mozilla.org/en-US/docs/Web/CSS/@viewport \\"The @viewport CSS at-rule lets you configure the viewport through which the document is viewed. It\'s primarily used for mobile devices, but is also used by desktop browsers that support features like \\"snap to edge\\" (such as Microsoft Edge).\\")\\n    \\n    **Notes:**\\n    \\n    *   Though unstandardized, this declaration is respected by most mobile browsers due to de-facto dominance.\\n    *   The default values may vary between devices and browsers.\\n    *   To learn about this declaration in Firefox for Mobile, see [this article](https://developer.mozilla.org/en-US/docs/Mobile/Viewport_meta_tag \\"Mobile/Viewport meta tag\\")."\n                    }\n                },\n                {\n                    "name": "http-equiv",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Defines a pragma directive. The attribute is named `**http-equiv**(alent)` because all the allowed values are names of particular HTTP headers:\\n\\n*   `\\"content-language\\"`  \\n    Defines the default language of the page. It can be overridden by the [lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) attribute on any element.\\n    \\n    **Warning:** Do not use this value, as it is obsolete. Prefer the `lang` attribute on the [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html \\"The HTML <html> element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.\\") element.\\n    \\n*   `\\"content-security-policy\\"`  \\n    Allows page authors to define a [content policy](https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives) for the current page. Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site scripting attacks.\\n*   `\\"content-type\\"`  \\n    Defines the [MIME type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type) of the document, followed by its character encoding. It follows the same syntax as the HTTP `content-type` entity-header field, but as it is inside a HTML page, most values other than `text/html` are impossible. Therefore the valid syntax for its `content` is the string \'`text/html`\' followed by a character set with the following syntax: \'`; charset=_IANAcharset_`\', where `IANAcharset` is the _preferred MIME name_ for a character set as [defined by the IANA.](https://www.iana.org/assignments/character-sets)\\n    \\n    **Warning:** Do not use this value, as it is obsolete. Use the [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) attribute on the [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element.\\n    \\n    **Note:** As [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") can\'t change documents\' types in XHTML or HTML5\'s XHTML serialization, never set the MIME type to an XHTML MIME type with `<meta>`.\\n    \\n*   `\\"refresh\\"`  \\n    This instruction specifies:\\n    *   The number of seconds until the page should be reloaded - only if the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute contains a positive integer.\\n    *   The number of seconds until the page should redirect to another - only if the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute contains a positive integer followed by the string \'`;url=`\', and a valid URL.\\n*   `\\"set-cookie\\"`  \\n    Defines a [cookie](https://developer.mozilla.org/en-US/docs/cookie) for the page. Its content must follow the syntax defined in the [IETF HTTP Cookie Specification](https://tools.ietf.org/html/draft-ietf-httpstate-cookie-14).\\n    \\n    **Warning:** Do not use this instruction, as it is obsolete. Use the HTTP header [`Set-Cookie`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) instead."\n                    }\n                },\n                {\n                    "name": "content",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute contains the value for the [`http-equiv`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv) or [`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-name) attribute, depending on which is used."\n                    }\n                },\n                {\n                    "name": "charset",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute declares the page\'s character encoding. It must contain a [standard IANA MIME name for character encodings](https://www.iana.org/assignments/character-sets). Although the standard doesn\'t request a specific encoding, it suggests:\\n\\n*   Authors are encouraged to use [`UTF-8`](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8).\\n*   Authors should not use ASCII-incompatible encodings to avoid security risk: browsers not supporting them may interpret harmful content as HTML. This happens with the `JIS_C6226-1983`, `JIS_X0212-1990`, `HZ-GB-2312`, `JOHAB`, the ISO-2022 family and the EBCDIC family.\\n\\n**Note:** ASCII-incompatible encodings are those that don\'t map the 8-bit code points `0x20` to `0x7E` to the `0x0020` to `0x007E` Unicode code points)\\n\\n*   Authors **must not** use `CESU-8`, `UTF-7`, `BOCU-1` and/or `SCSU` as [cross-site scripting](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting) attacks with these encodings have been demonstrated.\\n*   Authors should not use `UTF-32` because not all HTML5 encoding algorithms can distinguish it from `UTF-16`.\\n\\n**Notes:**\\n\\n*   The declared character encoding must match the one the page was saved with to avoid garbled characters and security holes.\\n*   The [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element declaring the encoding must be inside the [`<head>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head \\"The HTML <head> element provides general information (metadata) about the document, including its title and links to its scripts and style sheets.\\") element and **within the first 1024 bytes** of the HTML as some browsers only look at those bytes before choosing an encoding.\\n*   This [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element is only one part of the [algorithm to determine a page\'s character set](https://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#encoding-sniffing-algorithm \\"Algorithm charset page\\"). The [`Content-Type` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) and any [Byte-Order Marks](https://developer.mozilla.org/en-US/docs/Glossary/Byte-Order_Mark \\"The definition of that term (Byte-Order Marks) has not been written yet; please consider contributing it!\\") override this element.\\n*   It is strongly recommended to define the character encoding. If a page\'s encoding is undefined, cross-scripting techniques are possible, such as the [`UTF-7` fallback cross-scripting technique](https://code.google.com/p/doctype-mirror/wiki/ArticleUtf7).\\n*   The [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element with a `charset` attribute is a synonym for the pre-HTML5 `<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=_IANAcharset_\\">`, where _`IANAcharset`_ contains the value of the equivalent [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) attribute. This syntax is still allowed, although no longer recommended."\n                    }\n                },\n                {\n                    "name": "scheme",\n                    "description": "This attribute defines the scheme in which metadata is described. A scheme is a context leading to the correct interpretations of the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) value, like a format.\\n\\n**Warning:** Do not use this value, as it is obsolete. There is no replacement as there was no real usage for it."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/meta"\n                }\n            ]\n        },\n        {\n            "name": "style",\n            "description": {\n                "kind": "markdown",\n                "value": "The style element allows authors to embed style information in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user."\n            },\n            "attributes": [\n                {\n                    "name": "media",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute defines which media the style should be applied to. Its value is a [media query](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries), which defaults to `all` if the attribute is missing."\n                    }\n                },\n                {\n                    "name": "nonce",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A cryptographic nonce (number used once) used to whitelist inline styles in a [style-src Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource’s policy is otherwise trivial."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute defines the styling language as a MIME type (charset should not be specified). This attribute is optional and defaults to `text/css` if it is not specified — there is very little reason to include this in modern web documents."\n                    }\n                },\n                {\n                    "name": "scoped",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "title",\n                    "description": "This attribute specifies [alternative style sheet](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets) sets."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/style"\n                }\n            ]\n        },\n        {\n            "name": "body",\n            "description": {\n                "kind": "markdown",\n                "value": "The body element represents the content of the document."\n            },\n            "attributes": [\n                {\n                    "name": "onafterprint",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call after the user has printed the document."\n                    }\n                },\n                {\n                    "name": "onbeforeprint",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the user requests printing of the document."\n                    }\n                },\n                {\n                    "name": "onbeforeunload",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the document is about to be unloaded."\n                    }\n                },\n                {\n                    "name": "onhashchange",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the fragment identifier part (starting with the hash (`\'#\'`) character) of the document\'s current address has changed."\n                    }\n                },\n                {\n                    "name": "onlanguagechange",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the preferred languages changed."\n                    }\n                },\n                {\n                    "name": "onmessage",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the document has received a message."\n                    }\n                },\n                {\n                    "name": "onoffline",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when network communication has failed."\n                    }\n                },\n                {\n                    "name": "ononline",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when network communication has been restored."\n                    }\n                },\n                {\n                    "name": "onpagehide"\n                },\n                {\n                    "name": "onpageshow"\n                },\n                {\n                    "name": "onpopstate",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the user has navigated session history."\n                    }\n                },\n                {\n                    "name": "onstorage",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the storage area has changed."\n                    }\n                },\n                {\n                    "name": "onunload",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Function to call when the document is going away."\n                    }\n                },\n                {\n                    "name": "alink",\n                    "description": "Color of text for hyperlinks when selected. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property in conjunction with the [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active \\"The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.\\") pseudo-class instead._"\n                },\n                {\n                    "name": "background",\n                    "description": "URI of a image to use as a background. _This method is non-conforming, use CSS [`background`](https://developer.mozilla.org/en-US/docs/Web/CSS/background \\"The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\\") property on the element instead._"\n                },\n                {\n                    "name": "bgcolor",\n                    "description": "Background color for the document. _This method is non-conforming, use CSS [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \\"The background-color CSS property sets the background color of an element.\\") property on the element instead._"\n                },\n                {\n                    "name": "bottommargin",\n                    "description": "The margin of the bottom of the body. _This method is non-conforming, use CSS [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom \\"The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"\n                },\n                {\n                    "name": "leftmargin",\n                    "description": "The margin of the left of the body. _This method is non-conforming, use CSS [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left \\"The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"\n                },\n                {\n                    "name": "link",\n                    "description": "Color of text for unvisited hypertext links. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property in conjunction with the [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:link \\"The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited <a>, <area>, or <link> element that has an href attribute.\\") pseudo-class instead._"\n                },\n                {\n                    "name": "onblur",\n                    "description": "Function to call when the document loses focus."\n                },\n                {\n                    "name": "onerror",\n                    "description": "Function to call when the document fails to load properly."\n                },\n                {\n                    "name": "onfocus",\n                    "description": "Function to call when the document receives focus."\n                },\n                {\n                    "name": "onload",\n                    "description": "Function to call when the document has finished loading."\n                },\n                {\n                    "name": "onredo",\n                    "description": "Function to call when the user has moved forward in undo transaction history."\n                },\n                {\n                    "name": "onresize",\n                    "description": "Function to call when the document has been resized."\n                },\n                {\n                    "name": "onundo",\n                    "description": "Function to call when the user has moved backward in undo transaction history."\n                },\n                {\n                    "name": "rightmargin",\n                    "description": "The margin of the right of the body. _This method is non-conforming, use CSS [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right \\"The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"\n                },\n                {\n                    "name": "text",\n                    "description": "Foreground color of text. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property on the element instead._"\n                },\n                {\n                    "name": "topmargin",\n                    "description": "The margin of the top of the body. _This method is non-conforming, use CSS [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top \\"The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"\n                },\n                {\n                    "name": "vlink",\n                    "description": "Color of text for visited hypertext links. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property in conjunction with the [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/:visited \\"The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited.\\") pseudo-class instead._"\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/body"\n                }\n            ]\n        },\n        {\n            "name": "article",\n            "description": {\n                "kind": "markdown",\n                "value": "The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. Each article should be identified, typically by including a heading (h1–h6 element) as a child of the article element."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/article"\n                }\n            ]\n        },\n        {\n            "name": "section",\n            "description": {\n                "kind": "markdown",\n                "value": "The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content. Each section should be identified, typically by including a heading ( h1- h6 element) as a child of the section element."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/section"\n                }\n            ]\n        },\n        {\n            "name": "nav",\n            "description": {\n                "kind": "markdown",\n                "value": "The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/nav"\n                }\n            ]\n        },\n        {\n            "name": "aside",\n            "description": {\n                "kind": "markdown",\n                "value": "The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/aside"\n                }\n            ]\n        },\n        {\n            "name": "h1",\n            "description": {\n                "kind": "markdown",\n                "value": "The h1 element represents a section heading."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"\n                }\n            ]\n        },\n        {\n            "name": "h2",\n            "description": {\n                "kind": "markdown",\n                "value": "The h2 element represents a section heading."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"\n                }\n            ]\n        },\n        {\n            "name": "h3",\n            "description": {\n                "kind": "markdown",\n                "value": "The h3 element represents a section heading."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"\n                }\n            ]\n        },\n        {\n            "name": "h4",\n            "description": {\n                "kind": "markdown",\n                "value": "The h4 element represents a section heading."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"\n                }\n            ]\n        },\n        {\n            "name": "h5",\n            "description": {\n                "kind": "markdown",\n                "value": "The h5 element represents a section heading."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"\n                }\n            ]\n        },\n        {\n            "name": "h6",\n            "description": {\n                "kind": "markdown",\n                "value": "The h6 element represents a section heading."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"\n                }\n            ]\n        },\n        {\n            "name": "header",\n            "description": {\n                "kind": "markdown",\n                "value": "The header element represents introductory content for its nearest ancestor sectioning content or sectioning root element. A header typically contains a group of introductory or navigational aids. When the nearest ancestor sectioning content or sectioning root element is the body element, then it applies to the whole page."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/header"\n                }\n            ]\n        },\n        {\n            "name": "footer",\n            "description": {\n                "kind": "markdown",\n                "value": "The footer element represents a footer for its nearest ancestor sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/footer"\n                }\n            ]\n        },\n        {\n            "name": "address",\n            "description": {\n                "kind": "markdown",\n                "value": "The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/address"\n                }\n            ]\n        },\n        {\n            "name": "p",\n            "description": {\n                "kind": "markdown",\n                "value": "The p element represents a paragraph."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/p"\n                }\n            ]\n        },\n        {\n            "name": "hr",\n            "description": {\n                "kind": "markdown",\n                "value": "The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book."\n            },\n            "attributes": [\n                {\n                    "name": "align",\n                    "description": "Sets the alignment of the rule on the page. If no value is specified, the default value is `left`."\n                },\n                {\n                    "name": "color",\n                    "description": "Sets the color of the rule through color name or hexadecimal value."\n                },\n                {\n                    "name": "noshade",\n                    "description": "Sets the rule to have no shading."\n                },\n                {\n                    "name": "size",\n                    "description": "Sets the height, in pixels, of the rule."\n                },\n                {\n                    "name": "width",\n                    "description": "Sets the length of the rule on the page through a pixel or percentage value."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/hr"\n                }\n            ]\n        },\n        {\n            "name": "pre",\n            "description": {\n                "kind": "markdown",\n                "value": "The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements."\n            },\n            "attributes": [\n                {\n                    "name": "cols",\n                    "description": "Contains the _preferred_ count of characters that a line should have. It was a non-standard synonym of [`width`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre#attr-width). To achieve such an effect, use CSS [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width \\"The width CSS property sets an element\'s width. By default it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.\\") instead."\n                },\n                {\n                    "name": "width",\n                    "description": "Contains the _preferred_ count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width \\"The width CSS property sets an element\'s width. By default it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.\\") instead."\n                },\n                {\n                    "name": "wrap",\n                    "description": "Is a _hint_ indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space \\"The white-space CSS property sets how white space inside an element is handled.\\") instead."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/pre"\n                }\n            ]\n        },\n        {\n            "name": "blockquote",\n            "description": {\n                "kind": "markdown",\n                "value": "The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations."\n            },\n            "attributes": [\n                {\n                    "name": "cite",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/blockquote"\n                }\n            ]\n        },\n        {\n            "name": "ol",\n            "description": {\n                "kind": "markdown",\n                "value": "The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document."\n            },\n            "attributes": [\n                {\n                    "name": "reversed",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute specifies that the items of the list are specified in reversed order."\n                    }\n                },\n                {\n                    "name": "start",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This integer attribute specifies the start value for numbering the individual list items. Although the ordering type of list elements might be Roman numerals, such as XXXI, or letters, the value of start is always represented as a number. To start numbering elements from the letter \\"C\\", use `<ol start=\\"3\\">`.\\n\\n**Note**: This attribute was deprecated in HTML4, but reintroduced in HTML5."\n                    }\n                },\n                {\n                    "name": "type",\n                    "valueSet": "lt",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the numbering type:\\n\\n*   `\'a\'` indicates lowercase letters,\\n*   `\'A\'` indicates uppercase letters,\\n*   `\'i\'` indicates lowercase Roman numerals,\\n*   `\'I\'` indicates uppercase Roman numerals,\\n*   and `\'1\'` indicates numbers (default).\\n\\nThe type set is used for the entire list unless a different [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li#attr-type) attribute is used within an enclosed [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li \\"The HTML <li> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.\\") element.\\n\\n**Note:** This attribute was deprecated in HTML4, but reintroduced in HTML5.\\n\\nUnless the value of the list number matters (e.g. in legal or technical documents where items are to be referenced by their number/letter), the CSS [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type \\"The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\\") property should be used instead."\n                    }\n                },\n                {\n                    "name": "compact",\n                    "description": "This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn\'t work in all browsers.\\n\\n**Warning:** Do not use this attribute, as it has been deprecated: the [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \\"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To give an effect similar to the `compact` attribute, the [CSS](https://developer.mozilla.org/en-US/docs/CSS) property [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height \\"The line-height CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\\") can be used with a value of `80%`."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/ol"\n                }\n            ]\n        },\n        {\n            "name": "ul",\n            "description": {\n                "kind": "markdown",\n                "value": "The ul element represents a list of items, where the order of the items is not important — that is, where changing the order would not materially change the meaning of the document."\n            },\n            "attributes": [\n                {\n                    "name": "compact",\n                    "description": "This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn\'t work in all browsers.\\n\\n**Usage note: **Do not use this attribute, as it has been deprecated: the [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul \\"The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To give a similar effect as the `compact` attribute, the [CSS](https://developer.mozilla.org/en-US/docs/CSS) property [line-height](https://developer.mozilla.org/en-US/docs/CSS/line-height) can be used with a value of `80%`."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/ul"\n                }\n            ]\n        },\n        {\n            "name": "li",\n            "description": {\n                "kind": "markdown",\n                "value": "The li element represents a list item. If its parent element is an ol, ul, or menu element, then the element is an item of the parent element\'s list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other li element."\n            },\n            "attributes": [\n                {\n                    "name": "value",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This integer attribute indicates the current ordinal value of the list item as defined by the [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \\"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\\") element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The **value** attribute has no meaning for unordered lists ([`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul \\"The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.\\")) or for menus ([`<menu>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu \\"The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.\\")).\\n\\n**Note**: This attribute was deprecated in HTML4, but reintroduced in HTML5.\\n\\n**Note:** Prior to Gecko 9.0, negative values were incorrectly converted to 0. Starting in Gecko 9.0 all integer values are correctly parsed."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": "This character attribute indicates the numbering type:\\n\\n*   `a`: lowercase letters\\n*   `A`: uppercase letters\\n*   `i`: lowercase Roman numerals\\n*   `I`: uppercase Roman numerals\\n*   `1`: numbers\\n\\nThis type overrides the one used by its parent [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \\"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\\") element, if any.\\n\\n**Usage note:** This attribute has been deprecated: use the CSS [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type \\"The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\\") property instead."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/li"\n                }\n            ]\n        },\n        {\n            "name": "dl",\n            "description": {\n                "kind": "markdown",\n                "value": "The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements) followed by one or more values (dd elements), ignoring any nodes other than dt and dd elements. Within a single dl element, there should not be more than one dt element for each name."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/dl"\n                }\n            ]\n        },\n        {\n            "name": "dt",\n            "description": {\n                "kind": "markdown",\n                "value": "The dt element represents the term, or name, part of a term-description group in a description list (dl element)."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/dt"\n                }\n            ]\n        },\n        {\n            "name": "dd",\n            "description": {\n                "kind": "markdown",\n                "value": "The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element)."\n            },\n            "attributes": [\n                {\n                    "name": "nowrap",\n                    "description": "If the value of this attribute is set to `yes`, the definition text will not wrap. The default value is `no`."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/dd"\n                }\n            ]\n        },\n        {\n            "name": "figure",\n            "description": {\n                "kind": "markdown",\n                "value": "The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/figure"\n                }\n            ]\n        },\n        {\n            "name": "figcaption",\n            "description": {\n                "kind": "markdown",\n                "value": "The figcaption element represents a caption or legend for the rest of the contents of the figcaption element\'s parent figure element, if any."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/figcaption"\n                }\n            ]\n        },\n        {\n            "name": "main",\n            "description": {\n                "kind": "markdown",\n                "value": "The main element represents the main content of the body of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/main"\n                }\n            ]\n        },\n        {\n            "name": "div",\n            "description": {\n                "kind": "markdown",\n                "value": "The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/div"\n                }\n            ]\n        },\n        {\n            "name": "a",\n            "description": {\n                "kind": "markdown",\n                "value": "If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents."\n            },\n            "attributes": [\n                {\n                    "name": "href",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Contains a URL or a URL fragment that the hyperlink points to."\n                    }\n                },\n                {\n                    "name": "target",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Specifies where to display the linked URL. It is a name of, or keyword for, a _browsing context_: a tab, window, or `<iframe>`. The following keywords have special meanings:\\n\\n*   `_self`: Load the URL into the same browsing context as the current one. This is the default behavior.\\n*   `_blank`: Load the URL into a new browsing context. This is usually a tab, but users can configure browsers to use new windows instead.\\n*   `_parent`: Load the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as `_self`.\\n*   `_top`: Load the URL into the top-level browsing context (that is, the \\"highest\\" browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this behaves the same way as `_self`.\\n\\n**Note:** When using `target`, consider adding `rel=\\"noreferrer\\"` to avoid exploitation of the `window.opener` API.\\n\\n**Note:** Linking to another page using `target=\\"_blank\\"` will run the new page on the same process as your page. If the new page is executing expensive JS, your page\'s performance may suffer. To avoid this use `rel=\\"noopener\\"`."\n                    }\n                },\n                {\n                    "name": "download",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want). There are no restrictions on allowed values, though `/` and `\\\\` are converted to underscores. Most file systems limit some punctuation in file names, and browsers will adjust the suggested name accordingly.\\n\\n**Notes:**\\n\\n*   This attribute only works for [same-origin URLs](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\\n*   Although HTTP(s) URLs need to be in the same-origin, [`blob:` URLs](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL) and [`data:` URLs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) are allowed so that content generated by JavaScript, such as pictures created in an image-editor Web app, can be downloaded.\\n*   If the HTTP header [`Content-Disposition:`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) gives a different filename than this attribute, the HTTP header takes priority over this attribute.\\n*   If `Content-Disposition:` is set to `inline`, Firefox prioritizes `Content-Disposition`, like the filename case, while Chrome prioritizes the `download` attribute."\n                    }\n                },\n                {\n                    "name": "ping",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Contains a space-separated list of URLs to which, when the hyperlink is followed, [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST \\"The HTTP POST method sends data to the server. The type of the body of the request is indicated by the Content-Type header.\\") requests with the body `PING` will be sent by the browser (in the background). Typically used for tracking."\n                    }\n                },\n                {\n                    "name": "rel",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."\n                    }\n                },\n                {\n                    "name": "hreflang",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates the human language of the linked resource. It is purely advisory, with no built-in functionality. Allowed values are determined by [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt \\"Tags for Identifying Languages\\")."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Specifies the media type in the form of a [MIME type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type \\"MIME type: A MIME type (now properly called \\"media type\\", but also sometimes \\"content type\\") is a string sent along with a file indicating the type of the file (describing the content format, for example, a sound file might be labeled audio/ogg, or an image file image/png).\\") for the linked URL. It is purely advisory, with no built-in functionality."\n                    }\n                },\n                {\n                    "name": "referrerpolicy",\n                    "description": "Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) to send when fetching the URL:\\n\\n*   `\'no-referrer\'` means the `Referer:` header will not be sent.\\n*   `\'no-referrer-when-downgrade\'` means no `Referer:` header will be sent when navigating to an origin without HTTPS. This is the default behavior.\\n*   `\'origin\'` means the referrer will be the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the page, not including information after the domain.\\n*   `\'origin-when-cross-origin\'` meaning that navigations to other origins will be limited to the scheme, the host and the port, while navigations on the same origin will include the referrer\'s path.\\n*   `\'strict-origin-when-cross-origin\'`\\n*   `\'unsafe-url\'` means the referrer will include the origin and path, but not the fragment, password, or username. This is unsafe because it can leak data from secure URLs to insecure ones."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/a"\n                }\n            ]\n        },\n        {\n            "name": "em",\n            "description": {\n                "kind": "markdown",\n                "value": "The em element represents stress emphasis of its contents."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/em"\n                }\n            ]\n        },\n        {\n            "name": "strong",\n            "description": {\n                "kind": "markdown",\n                "value": "The strong element represents strong importance, seriousness, or urgency for its contents."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/strong"\n                }\n            ]\n        },\n        {\n            "name": "small",\n            "description": {\n                "kind": "markdown",\n                "value": "The small element represents side comments such as small print."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/small"\n                }\n            ]\n        },\n        {\n            "name": "s",\n            "description": {\n                "kind": "markdown",\n                "value": "The s element represents contents that are no longer accurate or no longer relevant."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/s"\n                }\n            ]\n        },\n        {\n            "name": "cite",\n            "description": {\n                "kind": "markdown",\n                "value": "The cite element represents a reference to a creative work. It must include the title of the work or the name of the author(person, people or organization) or an URL reference, or a reference in abbreviated form as per the conventions used for the addition of citation metadata."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/cite"\n                }\n            ]\n        },\n        {\n            "name": "q",\n            "description": {\n                "kind": "markdown",\n                "value": "The q element represents some phrasing content quoted from another source."\n            },\n            "attributes": [\n                {\n                    "name": "cite",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The value of this attribute is a URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/q"\n                }\n            ]\n        },\n        {\n            "name": "dfn",\n            "description": {\n                "kind": "markdown",\n                "value": "The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/dfn"\n                }\n            ]\n        },\n        {\n            "name": "abbr",\n            "description": {\n                "kind": "markdown",\n                "value": "The abbr element represents an abbreviation or acronym, optionally with its expansion. The title attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/abbr"\n                }\n            ]\n        },\n        {\n            "name": "ruby",\n            "description": {\n                "kind": "markdown",\n                "value": "The ruby element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana. Ruby text can appear on either side, and sometimes both sides, of the base text, and it is possible to control its position using CSS. A more complete introduction to ruby can be found in the Use Cases & Exploratory Approaches for Ruby Markup document as well as in CSS Ruby Module Level 1. [RUBY-UC] [CSSRUBY]"\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/ruby"\n                }\n            ]\n        },\n        {\n            "name": "rb",\n            "description": {\n                "kind": "markdown",\n                "value": "The rb element marks the base text component of a ruby annotation. When it is the child of a ruby element, it doesn\'t represent anything itself, but its parent ruby element uses it as part of determining what it represents."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/rb"\n                }\n            ]\n        },\n        {\n            "name": "rt",\n            "description": {\n                "kind": "markdown",\n                "value": "The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element or of an rtc element that is itself the child of a ruby element, it doesn\'t represent anything itself, but its ancestor ruby element uses it as part of determining what it represents."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/rt"\n                }\n            ]\n        },\n        {\n            "name": "rp",\n            "description": {\n                "kind": "markdown",\n                "value": "The rp element is used to provide fallback text to be shown by user agents that don\'t support ruby annotations. One widespread convention is to provide parentheses around the ruby text component of a ruby annotation."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/rp"\n                }\n            ]\n        },\n        {\n            "name": "time",\n            "description": {\n                "kind": "markdown",\n                "value": "The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below."\n            },\n            "attributes": [\n                {\n                    "name": "datetime",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates the time and/or date of the element and must be in one of the formats described below."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/time"\n                }\n            ]\n        },\n        {\n            "name": "code",\n            "description": {\n                "kind": "markdown",\n                "value": "The code element represents a fragment of computer code. This could be an XML element name, a file name, a computer program, or any other string that a computer would recognize."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/code"\n                }\n            ]\n        },\n        {\n            "name": "var",\n            "description": {\n                "kind": "markdown",\n                "value": "The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/var"\n                }\n            ]\n        },\n        {\n            "name": "samp",\n            "description": {\n                "kind": "markdown",\n                "value": "The samp element represents sample or quoted output from another program or computing system."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/samp"\n                }\n            ]\n        },\n        {\n            "name": "kbd",\n            "description": {\n                "kind": "markdown",\n                "value": "The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands)."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/kbd"\n                }\n            ]\n        },\n        {\n            "name": "sub",\n            "description": {\n                "kind": "markdown",\n                "value": "The sub element represents a subscript."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/sub"\n                }\n            ]\n        },\n        {\n            "name": "sup",\n            "description": {\n                "kind": "markdown",\n                "value": "The sup element represents a superscript."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/sup"\n                }\n            ]\n        },\n        {\n            "name": "i",\n            "description": {\n                "kind": "markdown",\n                "value": "The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/i"\n                }\n            ]\n        },\n        {\n            "name": "b",\n            "description": {\n                "kind": "markdown",\n                "value": "The b element represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/b"\n                }\n            ]\n        },\n        {\n            "name": "u",\n            "description": {\n                "kind": "markdown",\n                "value": "The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/u"\n                }\n            ]\n        },\n        {\n            "name": "mark",\n            "description": {\n                "kind": "markdown",\n                "value": "The mark element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader\'s attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user\'s current activity."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/mark"\n                }\n            ]\n        },\n        {\n            "name": "bdi",\n            "description": {\n                "kind": "markdown",\n                "value": "The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]"\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/bdi"\n                }\n            ]\n        },\n        {\n            "name": "bdo",\n            "description": {\n                "kind": "markdown",\n                "value": "The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]"\n            },\n            "attributes": [\n                {\n                    "name": "dir",\n                    "description": "The direction in which text should be rendered in this element\'s contents. Possible values are:\\n\\n*   `ltr`: Indicates that the text should go in a left-to-right direction.\\n*   `rtl`: Indicates that the text should go in a right-to-left direction."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/bdo"\n                }\n            ]\n        },\n        {\n            "name": "span",\n            "description": {\n                "kind": "markdown",\n                "value": "The span element doesn\'t mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/span"\n                }\n            ]\n        },\n        {\n            "name": "br",\n            "description": {\n                "kind": "markdown",\n                "value": "The br element represents a line break."\n            },\n            "attributes": [\n                {\n                    "name": "clear",\n                    "description": "Indicates where to begin the next line after the break."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/br"\n                }\n            ]\n        },\n        {\n            "name": "wbr",\n            "description": {\n                "kind": "markdown",\n                "value": "The wbr element represents a line break opportunity."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/wbr"\n                }\n            ]\n        },\n        {\n            "name": "ins",\n            "description": {\n                "kind": "markdown",\n                "value": "The ins element represents an addition to the document."\n            },\n            "attributes": [\n                {\n                    "name": "cite",\n                    "description": "This attribute defines the URI of a resource that explains the change, such as a link to meeting minutes or a ticket in a troubleshooting system."\n                },\n                {\n                    "name": "datetime",\n                    "description": "This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp. For the format of the string without a time, see [Format of a valid date string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_date_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\"). The format of the string if it includes both date and time is covered in [Format of a valid local date and time string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_local_date_and_time_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\")."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/ins"\n                }\n            ]\n        },\n        {\n            "name": "del",\n            "description": {\n                "kind": "markdown",\n                "value": "The del element represents a removal from the document."\n            },\n            "attributes": [\n                {\n                    "name": "cite",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A URI for a resource that explains the change (for example, meeting minutes)."\n                    }\n                },\n                {\n                    "name": "datetime",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp. For the format of the string without a time, see [Format of a valid date string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_date_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\"). The format of the string if it includes both date and time is covered in [Format of a valid local date and time string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_local_date_and_time_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\")."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/del"\n                }\n            ]\n        },\n        {\n            "name": "picture",\n            "description": {\n                "kind": "markdown",\n                "value": "The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/picture"\n                }\n            ]\n        },\n        {\n            "name": "img",\n            "description": {\n                "kind": "markdown",\n                "value": "An img element represents an image."\n            },\n            "attributes": [\n                {\n                    "name": "alt",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute defines an alternative text description of the image.\\n\\n**Note:** Browsers do not always display the image referenced by the element. This is the case for non-graphical browsers (including those used by people with visual impairments), if the user chooses not to display images, or if the browser cannot display the image because it is invalid or an [unsupported type](#Supported_image_formats). In these cases, the browser may replace the image with the text defined in this element\'s `alt` attribute. You should, for these reasons and others, provide a useful value for `alt` whenever possible.\\n\\n**Note:** Omitting this attribute altogether indicates that the image is a key part of the content, and no textual equivalent is available. Setting this attribute to an empty string (`alt=\\"\\"`) indicates that this image is _not_ a key part of the content (decorative), and that non-visual browsers may omit it from rendering."\n                    }\n                },\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The image URL. This attribute is mandatory for the `<img>` element. On browsers supporting `srcset`, `src` is treated like a candidate image with a pixel density descriptor `1x` unless an image with this pixel density descriptor is already defined in `srcset,` or unless `srcset` contains \'`w`\' descriptors."\n                    }\n                },\n                {\n                    "name": "srcset",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A list of one or more strings separated by commas indicating a set of possible image sources for the user agent to use. Each string is composed of:\\n\\n1.  a URL to an image,\\n2.  optionally, whitespace followed by one of:\\n    *   A width descriptor, or a positive integer directly followed by \'`w`\'. The width descriptor is divided by the source size given in the `sizes` attribute to calculate the effective pixel density.\\n    *   A pixel density descriptor, which is a positive floating point number directly followed by \'`x`\'.\\n\\nIf no descriptor is specified, the source is assigned the default descriptor: `1x`.\\n\\nIt is incorrect to mix width descriptors and pixel density descriptors in the same `srcset` attribute. Duplicate descriptors (for instance, two sources in the same `srcset` which are both described with \'`2x`\') are also invalid.\\n\\nThe user agent selects any one of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our [Responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images) tutorial for an example."\n                    }\n                },\n                {\n                    "name": "crossorigin",\n                    "valueSet": "xo",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This enumerated attribute indicates if the fetching of the related image must be done using CORS or not. [CORS-enabled images](https://developer.mozilla.org/en-US/docs/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") element without being \\"[tainted](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image#What_is_a_tainted_canvas).\\" The allowed values are:"\n                    }\n                },\n                {\n                    "name": "usemap",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The partial URL (starting with \'#\') of an [image map](https://developer.mozilla.org/en-US/docs/HTML/Element/map) associated with the element.\\n\\n**Note:** You cannot use this attribute if the `<img>` element is a descendant of an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \\"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\\") or [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") element."\n                    }\n                },\n                {\n                    "name": "ismap",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that the image is part of a server-side map. If so, the precise coordinates of a click are sent to the server.\\n\\n**Note:** This attribute is allowed only if the `<img>` element is a descendant of an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \\"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\\") element with a valid [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute."\n                    }\n                },\n                {\n                    "name": "width",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The intrinsic width of the image in pixels."\n                    }\n                },\n                {\n                    "name": "height",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The intrinsic height of the image in pixels."\n                    }\n                },\n                {\n                    "name": "decoding",\n                    "description": "Provides an image decoding hint to the browser. The allowed values are:"\n                },\n                {\n                    "name": "decoding",\n                    "description": "`sync`\\n\\nDecode the image synchronously for atomic presentation with other content.\\n\\n`async`\\n\\nDecode the image asynchronously to reduce delay in presenting other content.\\n\\n`auto`\\n\\nDefault mode, which indicates no preference for the decoding mode. The browser decides what is best for the user."\n                },\n                {\n                    "name": "importance",\n                    "description": "Indicates the relative importance of the resource. Priority hints are delegated using the values:"\n                },\n                {\n                    "name": "importance",\n                    "description": "`auto`: Indicates **no preference**. The browser may use its own heuristics to decide the priority of the image.\\n\\n`high`: Indicates to the browser that the image is of **high** priority.\\n\\n`low`: Indicates to the browser that the image is of **low** priority."\n                },\n                {\n                    "name": "intrinsicsize",\n                    "description": "This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it’s the size specified in the attribute. Specifically, the image would raster at these dimensions and `naturalWidth`/`naturalHeight` on images would return the values specified in this attribute. [Explainer](https://github.com/ojanvafai/intrinsicsize-attribute), [examples](https://googlechrome.github.io/samples/intrinsic-size/index.html)"\n                },\n                {\n                    "name": "referrerpolicy",\n                    "description": "A string indicating which referrer to use when fetching the resource:\\n\\n*   `no-referrer:` The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade:` No `Referer` header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent’s default behavior if no policy is otherwise specified.\\n*   `origin:` The `Referer` header will include the page of origin\'s scheme, the host, and the port.\\n*   `origin-when-cross-origin:` Navigating to other origins will limit the included referral data to the scheme, the host and the port, while navigating from the same origin will include the referrer\'s full path.\\n*   `unsafe-url:` The `Referer` header will include the origin and the path, but not the fragment, password, or username. This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins."\n                },\n                {\n                    "name": "sizes",\n                    "description": "A list of one or more strings separated by commas indicating a set of source sizes. Each source size consists of:\\n\\n1.  a media condition. This must be omitted for the last item.\\n2.  a source size value.\\n\\nSource size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the `srcset` attribute, when those sources are described using width (\'`w`\') descriptors. The selected source size affects the intrinsic size of the image (the image’s display size if no CSS styling is applied). If the `srcset` attribute is absent, or contains no values with a width (`w`) descriptor, then the `sizes` attribute has no effect."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/img"\n                }\n            ]\n        },\n        {\n            "name": "iframe",\n            "description": {\n                "kind": "markdown",\n                "value": "The iframe element represents a nested browsing context."\n            },\n            "attributes": [\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The URL of the page to embed. Use a value of `about:blank` to embed an empty page that conforms to the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Inherited_origins). Also note that programatically removing an `<iframe>`\'s src attribute (e.g. via [`Element.removeAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute \\"The Element method removeAttribute() removes the attribute with the specified name from the element.\\")) causes `about:blank` to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS."\n                    }\n                },\n                {\n                    "name": "srcdoc",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Inline HTML to embed, overriding the `src` attribute. If a browser does not support the `srcdoc` attribute, it will fall back to the URL in the `src` attribute."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A targetable name for the embedded browsing context. This can be used in the `target` attribute of the [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \\"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\\"), [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\"), or [`<base>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base \\"The HTML <base> element specifies the base URL to use for all relative URLs contained within a document. There can be only one <base> element in a document.\\") elements; the `formtarget` attribute of the [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") or [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") elements; or the `windowName` parameter in the [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open \\"The Window interface\'s open() method loads the specified resource into the browsing context (window, <iframe> or tab) with the specified name. If the name doesn\'t exist, then a new window is opened and the specified resource is loaded into its browsing context.\\") method."\n                    }\n                },\n                {\n                    "name": "sandbox",\n                    "valueSet": "sb",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Applies extra restrictions to the content in the frame. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:\\n\\n*   `allow-forms`: Allows the resource to submit forms. If this keyword is not used, form submission is blocked.\\n*   `allow-modals`: Lets the resource [open modal windows](https://html.spec.whatwg.org/multipage/origin.html#sandboxed-modals-flag).\\n*   `allow-orientation-lock`: Lets the resource [lock the screen orientation](https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation).\\n*   `allow-pointer-lock`: Lets the resource use the [Pointer Lock API](https://developer.mozilla.org/en-US/docs/WebAPI/Pointer_Lock).\\n*   `allow-popups`: Allows popups (such as `window.open()`, `target=\\"_blank\\"`, or `showModalDialog()`). If this keyword is not used, the popup will silently fail to open.\\n*   `allow-popups-to-escape-sandbox`: Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.\\n*   `allow-presentation`: Lets the resource start a [presentation session](https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest).\\n*   `allow-same-origin`: If this token is not used, the resource is treated as being from a special origin that always fails the [same-origin policy](https://developer.mozilla.org/en-US/docs/Glossary/same-origin_policy \\"same-origin policy: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\\").\\n*   `allow-scripts`: Lets the resource run scripts (but not create popup windows).\\n*   `allow-storage-access-by-user-activation` : Lets the resource request access to the parent\'s storage capabilities with the [Storage Access API](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API).\\n*   `allow-top-navigation`: Lets the resource navigate the top-level browsing context (the one named `_top`).\\n*   `allow-top-navigation-by-user-activation`: Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.\\n\\n**Notes about sandboxing:**\\n\\n*   When the embedded document has the same origin as the embedding page, it is **strongly discouraged** to use both `allow-scripts` and `allow-same-origin`, as that lets the embedded document remove the `sandbox` attribute — making it no more secure than not using the `sandbox` attribute at all.\\n*   Sandboxing is useless if the attacker can display content outside a sandboxed `iframe` — such as if the viewer opens the frame in a new tab. Such content should be also served from a _separate origin_ to limit potential damage.\\n*   The `sandbox` attribute is unsupported in Internet Explorer 9 and earlier."\n                    }\n                },\n                {\n                    "name": "seamless",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "allowfullscreen",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Set to `true` if the `<iframe>` can activate fullscreen mode by calling the [`requestFullscreen()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen \\"The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed in full-screen mode.\\") method."\n                    }\n                },\n                {\n                    "name": "width",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The width of the frame in CSS pixels. Default is `300`."\n                    }\n                },\n                {\n                    "name": "height",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The height of the frame in CSS pixels. Default is `150`."\n                    }\n                },\n                {\n                    "name": "allow",\n                    "description": "Specifies a [feature policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy) for the `<iframe>`."\n                },\n                {\n                    "name": "allowpaymentrequest",\n                    "description": "Set to `true` if a cross-origin `<iframe>` should be allowed to invoke the [Payment Request API](https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API)."\n                },\n                {\n                    "name": "allowpaymentrequest",\n                    "description": "This attribute is considered a legacy attribute and redefined as `allow=\\"payment\\"`."\n                },\n                {\n                    "name": "csp",\n                    "description": "A [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) enforced for the embedded resource. See [`HTMLIFrameElement.csp`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp \\"The csp property of the HTMLIFrameElement interface specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\\") for details."\n                },\n                {\n                    "name": "importance",\n                    "description": "The download priority of the resource in the `<iframe>`\'s `src` attribute. Allowed values:\\n\\n`auto` (default)\\n\\nNo preference. The browser uses its own heuristics to decide the priority of the resource.\\n\\n`high`\\n\\nThe resource should be downloaded before other lower-priority page resources.\\n\\n`low`\\n\\nThe resource should be downloaded after other higher-priority page resources."\n                },\n                {\n                    "name": "referrerpolicy",\n                    "description": "Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer) to send when fetching the frame\'s resource:\\n\\n*   `no-referrer`: The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade` (default): The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent to [origin](https://developer.mozilla.org/en-US/docs/Glossary/origin \\"origin: Web content\'s origin is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port all match.\\")s without [TLS](https://developer.mozilla.org/en-US/docs/Glossary/TLS \\"TLS: Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.\\") ([HTTPS](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS \\"HTTPS: HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually uses SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safely exchange sensitive data with a server, for example for banking activities or online shopping.\\")).\\n*   `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](https://developer.mozilla.org/en-US/docs/Archive/Mozilla/URIScheme), [host](https://developer.mozilla.org/en-US/docs/Glossary/host \\"host: A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.\\"), and [port](https://developer.mozilla.org/en-US/docs/Glossary/port \\"port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.\\").\\n*   `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\\n*   `same-origin`: A referrer will be sent for [same origin](https://developer.mozilla.org/en-US/docs/Glossary/Same-origin_policy \\"same origin: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\\"), but cross-origin requests will contain no referrer information.\\n*   `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don\'t send it to a less secure destination (HTTPS→HTTP).\\n*   `strict-origin-when-cross-origin`: Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).\\n*   `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash), [password](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password), or [username](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/iframe"\n                }\n            ]\n        },\n        {\n            "name": "embed",\n            "description": {\n                "kind": "markdown",\n                "value": "The embed element provides an integration point for an external (typically non-HTML) application or interactive content."\n            },\n            "attributes": [\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The URL of the resource being embedded."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The MIME type to use to select the plug-in to instantiate."\n                    }\n                },\n                {\n                    "name": "width",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The displayed width of the resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). This must be an absolute value; percentages are _not_ allowed."\n                    }\n                },\n                {\n                    "name": "height",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The displayed height of the resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). This must be an absolute value; percentages are _not_ allowed."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/embed"\n                }\n            ]\n        },\n        {\n            "name": "object",\n            "description": {\n                "kind": "markdown",\n                "value": "The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image, as a nested browsing context, or as an external resource to be processed by a plugin."\n            },\n            "attributes": [\n                {\n                    "name": "data",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The address of the resource as a valid URL. At least one of **data** and **type** must be defined."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The [content type](https://developer.mozilla.org/en-US/docs/Glossary/Content_type) of the resource specified by **data**. At least one of **data** and **type** must be defined."\n                    }\n                },\n                {\n                    "name": "typemustmatch",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates if the **type** attribute and the actual [content type](https://developer.mozilla.org/en-US/docs/Glossary/Content_type) of the resource must match to be used."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name of valid browsing context (HTML5), or the name of the control (HTML 4)."\n                    }\n                },\n                {\n                    "name": "usemap",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A hash-name reference to a [`<map>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map \\"The HTML <map> element is used with <area> elements to define an image map (a clickable link area).\\") element; that is a \'#\' followed by the value of a [`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map#attr-name) of a map element."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The form element, if any, that the object element is associated with (its _form owner_). The value of the attribute must be an ID of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element in the same document."\n                    }\n                },\n                {\n                    "name": "width",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The width of the display resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). -- (Absolute values only. [NO percentages](https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes))"\n                    }\n                },\n                {\n                    "name": "height",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The height of the displayed resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). -- (Absolute values only. [NO percentages](https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes))"\n                    }\n                },\n                {\n                    "name": "archive",\n                    "description": "A space-separated list of URIs for archives of resources for the object."\n                },\n                {\n                    "name": "border",\n                    "description": "The width of a border around the control, in pixels."\n                },\n                {\n                    "name": "classid",\n                    "description": "The URI of the object\'s implementation. It can be used together with, or in place of, the **data** attribute."\n                },\n                {\n                    "name": "codebase",\n                    "description": "The base path used to resolve relative URIs specified by **classid**, **data**, or **archive**. If not specified, the default is the base URI of the current document."\n                },\n                {\n                    "name": "codetype",\n                    "description": "The content type of the data specified by **classid**."\n                },\n                {\n                    "name": "declare",\n                    "description": "The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent `<object>` element. In HTML5, repeat the <object> element completely each that that the resource is reused."\n                },\n                {\n                    "name": "standby",\n                    "description": "A message that the browser can show while loading the object\'s implementation and data."\n                },\n                {\n                    "name": "tabindex",\n                    "description": "The position of the element in the tabbing navigation order for the current document."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/object"\n                }\n            ]\n        },\n        {\n            "name": "param",\n            "description": {\n                "kind": "markdown",\n                "value": "The param element defines parameters for plugins invoked by object elements. It does not represent anything on its own."\n            },\n            "attributes": [\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Name of the parameter."\n                    }\n                },\n                {\n                    "name": "value",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Specifies the value of the parameter."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": "Only used if the `valuetype` is set to \\"ref\\". Specifies the MIME type of values found at the URI specified by value."\n                },\n                {\n                    "name": "valuetype",\n                    "description": "Specifies the type of the `value` attribute. Possible values are:\\n\\n*   data: Default value. The value is passed to the object\'s implementation as a string.\\n*   ref: The value is a URI to a resource where run-time values are stored.\\n*   object: An ID of another [`<object>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object \\"The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.\\") in the same document."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/param"\n                }\n            ]\n        },\n        {\n            "name": "video",\n            "description": {\n                "kind": "markdown",\n                "value": "A video element is used for playing videos or movies, and audio files with captions."\n            },\n            "attributes": [\n                {\n                    "name": "src"\n                },\n                {\n                    "name": "crossorigin",\n                    "valueSet": "xo"\n                },\n                {\n                    "name": "poster"\n                },\n                {\n                    "name": "preload",\n                    "valueSet": "pl"\n                },\n                {\n                    "name": "autoplay",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data."\n                    }\n                },\n                {\n                    "name": "mediagroup"\n                },\n                {\n                    "name": "loop",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "muted",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "controls",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "width"\n                },\n                {\n                    "name": "height"\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/video"\n                }\n            ]\n        },\n        {\n            "name": "audio",\n            "description": {\n                "kind": "markdown",\n                "value": "An audio element represents a sound or audio stream."\n            },\n            "attributes": [\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The URL of the audio to embed. This is subject to [HTTP access controls](https://developer.mozilla.org/en-US/docs/HTTP_access_control). This is optional; you may instead use the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\") element within the audio block to specify the audio to embed."\n                    }\n                },\n                {\n                    "name": "crossorigin",\n                    "valueSet": "xo",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This enumerated attribute indicates whether to use CORS to fetch the related image. [CORS-enabled resources](https://developer.mozilla.org/en-US/docs/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") element without being _tainted_. The allowed values are:\\n\\nanonymous\\n\\nSends a cross-origin request without a credential. In other words, it sends the `Origin:` HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the `Access-Control-Allow-Origin:` HTTP header), the image will be _tainted_, and its usage restricted.\\n\\nuse-credentials\\n\\nSends a cross-origin request with a credential. In other words, it sends the `Origin:` HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through `Access-Control-Allow-Credentials:` HTTP header), the image will be _tainted_ and its usage restricted.\\n\\nWhen not present, the resource is fetched without a CORS request (i.e. without sending the `Origin:` HTTP header), preventing its non-tainted used in [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") elements. If invalid, it is handled as if the enumerated keyword **anonymous** was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes) for additional information."\n                    }\n                },\n                {\n                    "name": "preload",\n                    "valueSet": "pl",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:\\n\\n*   `none`: Indicates that the audio should not be preloaded.\\n*   `metadata`: Indicates that only audio metadata (e.g. length) is fetched.\\n*   `auto`: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it.\\n*   _empty string_: A synonym of the `auto` value.\\n\\nIf not set, `preload`\'s default value is browser-defined (i.e. each browser may have its own default value). The spec advises it to be set to `metadata`.\\n\\n**Usage notes:**\\n\\n*   The `autoplay` attribute has precedence over `preload`. If `autoplay` is specified, the browser would obviously need to start downloading the audio for playback.\\n*   The browser is not forced by the specification to follow the value of this attribute; it is a mere hint."\n                    }\n                },\n                {\n                    "name": "autoplay",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.\\n\\n**Note**: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control."\n                    }\n                },\n                {\n                    "name": "mediagroup"\n                },\n                {\n                    "name": "loop",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio."\n                    }\n                },\n                {\n                    "name": "muted",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is `false`."\n                    }\n                },\n                {\n                    "name": "controls",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/audio"\n                }\n            ]\n        },\n        {\n            "name": "source",\n            "description": {\n                "kind": "markdown",\n                "value": "The source element allows authors to specify multiple alternative media resources for media elements. It does not represent anything on its own."\n            },\n            "attributes": [\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Required for [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio \\"The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.\\") and [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video \\"The HTML Video element (<video>) embeds a media player which supports video playback into the document.\\"), address of the media resource. The value of this attribute is ignored when the `<source>` element is placed inside a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The MIME-type of the resource, optionally with a `codecs` parameter. See [RFC 4281](https://tools.ietf.org/html/rfc4281) for information about how to specify codecs."\n                    }\n                },\n                {\n                    "name": "sizes",\n                    "description": "Is a list of source sizes that describes the final rendered width of the image represented by the source. Each source size consists of a comma-separated list of media condition-length pairs. This information is used by the browser to determine, before laying the page out, which image defined in [`srcset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-srcset) to use.  \\nThe `sizes` attribute has an effect only when the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\") element is the direct child of a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."\n                },\n                {\n                    "name": "srcset",\n                    "description": "A list of one or more strings separated by commas indicating a set of possible images represented by the source for the browser to use. Each string is composed of:\\n\\n1.  one URL to an image,\\n2.  a width descriptor, that is a positive integer directly followed by `\'w\'`. The default value, if missing, is the infinity.\\n3.  a pixel density descriptor, that is a positive floating number directly followed by `\'x\'`. The default value, if missing, is `1x`.\\n\\nEach string in the list must have at least a width descriptor or a pixel density descriptor to be valid. Among the list, there must be only one string containing the same tuple of width descriptor and pixel density descriptor.  \\nThe browser chooses the most adequate image to display at a given point of time.  \\nThe `srcset` attribute has an effect only when the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\") element is the direct child of a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."\n                },\n                {\n                    "name": "media",\n                    "description": "[Media query](https://developer.mozilla.org/en-US/docs/CSS/Media_queries) of the resource\'s intended media; this should be used only in a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/source"\n                }\n            ]\n        },\n        {\n            "name": "track",\n            "description": {\n                "kind": "markdown",\n                "value": "The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own."\n            },\n            "attributes": [\n                {\n                    "name": "default",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates that the track should be enabled unless the user\'s preferences indicate that another track is more appropriate. This may only be used on one `track` element per media element."\n                    }\n                },\n                {\n                    "name": "kind",\n                    "valueSet": "tk",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "How the text track is meant to be used. If omitted the default kind is `subtitles`. If the attribute is not present, it will use the `subtitles`. If the attribute contains an invalid value, it will use `metadata`. (Versions of Chrome earlier than 52 treated an invalid value as `subtitles`.) The following keywords are allowed:\\n\\n*   `subtitles`\\n    *   Subtitles provide translation of content that cannot be understood by the viewer. For example dialogue or text that is not English in an English language film.\\n    *   Subtitles may contain additional content, usually extra background information. For example the text at the beginning of the Star Wars films, or the date, time, and location of a scene.\\n*   `captions`\\n    *   Closed captions provide a transcription and possibly a translation of audio.\\n    *   It may include important non-verbal information such as music cues or sound effects. It may indicate the cue\'s source (e.g. music, text, character).\\n    *   Suitable for users who are deaf or when the sound is muted.\\n*   `descriptions`\\n    *   Textual description of the video content.\\n    *   Suitable for users who are blind or where the video cannot be seen.\\n*   `chapters`\\n    *   Chapter titles are intended to be used when the user is navigating the media resource.\\n*   `metadata`\\n    *   Tracks used by scripts. Not visible to the user."\n                    }\n                },\n                {\n                    "name": "label",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A user-readable title of the text track which is used by the browser when listing available text tracks."\n                    }\n                },\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Address of the track (`.vtt` file). Must be a valid URL. This attribute must be specified and its URL value must have the same origin as the document — unless the [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio \\"The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.\\") or [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video \\"The HTML Video element (<video>) embeds a media player which supports video playback into the document.\\") parent element of the `track` element has a [`crossorigin`](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) attribute."\n                    }\n                },\n                {\n                    "name": "srclang",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Language of the track text data. It must be a valid [BCP 47](https://r12a.github.io/app-subtags/) language tag. If the `kind` attribute is set to `subtitles,` then `srclang` must be defined."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/track"\n                }\n            ]\n        },\n        {\n            "name": "map",\n            "description": {\n                "kind": "markdown",\n                "value": "The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children."\n            },\n            "attributes": [\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no space characters. The value of the name attribute must not be a compatibility-caseless match for the value of the name attribute of another map element in the same document. If the id attribute is also specified, both attributes must have the same value."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/map"\n                }\n            ]\n        },\n        {\n            "name": "area",\n            "description": {\n                "kind": "markdown",\n                "value": "The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map."\n            },\n            "attributes": [\n                {\n                    "name": "alt"\n                },\n                {\n                    "name": "coords"\n                },\n                {\n                    "name": "shape",\n                    "valueSet": "sh"\n                },\n                {\n                    "name": "href"\n                },\n                {\n                    "name": "target"\n                },\n                {\n                    "name": "download"\n                },\n                {\n                    "name": "ping"\n                },\n                {\n                    "name": "rel"\n                },\n                {\n                    "name": "hreflang"\n                },\n                {\n                    "name": "type"\n                },\n                {\n                    "name": "accesskey",\n                    "description": "Specifies a keyboard navigation accelerator for the element. Pressing ALT or a similar key in association with the specified character selects the form control correlated with that key sequence. Page designers are forewarned to avoid key sequences already bound to browsers. This attribute is global since HTML5."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/area"\n                }\n            ]\n        },\n        {\n            "name": "table",\n            "description": {\n                "kind": "markdown",\n                "value": "The table element represents data with more than one dimension, in the form of a table."\n            },\n            "attributes": [\n                {\n                    "name": "border"\n                },\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute indicates how the table must be aligned inside the containing document. It may have the following values:\\n\\n*   left: the table is displayed on the left side of the document;\\n*   center: the table is displayed in the center of the document;\\n*   right: the table is displayed on the right side of the document.\\n\\n**Usage Note**\\n\\n*   **Do not use this attribute**, as it has been deprecated. The [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table \\"The HTML <table> element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). Set [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left \\"The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") and [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right \\"The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") to `auto` or [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin \\"The margin CSS property sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right, margin-bottom, and margin-left.\\") to `0 auto` to achieve an effect that is similar to the align attribute.\\n*   Prior to Firefox 4, Firefox also supported the `middle`, `absmiddle`, and `abscenter` values as synonyms of `center`, in quirks mode only."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/table"\n                }\n            ]\n        },\n        {\n            "name": "caption",\n            "description": {\n                "kind": "markdown",\n                "value": "The caption element represents the title of the table that is its parent, if it has a parent and that is a table element."\n            },\n            "attributes": [\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute indicates how the caption must be aligned with respect to the table. It may have one of the following values:\\n\\n`left`\\n\\nThe caption is displayed to the left of the table.\\n\\n`top`\\n\\nThe caption is displayed above the table.\\n\\n`right`\\n\\nThe caption is displayed to the right of the table.\\n\\n`bottom`\\n\\nThe caption is displayed below the table.\\n\\n**Usage note:** Do not use this attribute, as it has been deprecated. The [`<caption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption \\"The HTML Table Caption element (<caption>) specifies the caption (or title) of a table, and if used is always the first child of a <table>.\\") element should be styled using the [CSS](https://developer.mozilla.org/en-US/docs/CSS) properties [`caption-side`](https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side \\"The caption-side CSS property puts the content of a table\'s <caption> on the specified side. The values are relative to the writing-mode of the table.\\") and [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\")."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/caption"\n                }\n            ]\n        },\n        {\n            "name": "colgroup",\n            "description": {\n                "kind": "markdown",\n                "value": "The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element."\n            },\n            "attributes": [\n                {\n                    "name": "span"\n                },\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, the `left` value is assumed. The descendant [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \\"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\\") elements may override this value using their own [`align`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-align) attribute.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values:\\n    *   Do not try to set the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on a selector giving a [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \\"The HTML <colgroup> element defines a group of columns within a table.\\") element. Because [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \\"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\\") elements are not descendant of the [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \\"The HTML <colgroup> element defines a group of columns within a table.\\") element, they won\'t inherit it.\\n    *   If the table doesn\'t use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, use one `td:nth-child(an+b)` CSS selector per column, where a is the total number of the columns in the table and b is the ordinal position of this column in the table. Only after this selector the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property can be used.\\n    *   If the table does use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, the effect can be achieved by combining adequate CSS attribute selectors like `[colspan=n]`, though this is not trivial.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/colgroup"\n                }\n            ]\n        },\n        {\n            "name": "col",\n            "description": {\n                "kind": "markdown",\n                "value": "If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup."\n            },\n            "attributes": [\n                {\n                    "name": "span"\n                },\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, its value is inherited from the [`align`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-align) of the [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \\"The HTML <colgroup> element defines a group of columns within a table.\\") element this `<col>` element belongs too. If there are none, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values:\\n    *   Do not try to set the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on a selector giving a [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \\"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\\") element. Because [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \\"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\\") elements are not descendant of the [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \\"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\\") element, they won\'t inherit it.\\n    *   If the table doesn\'t use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, use the `td:nth-child(an+b)` CSS selector. Set `a` to zero and `b` to the position of the column in the table, e.g. `td:nth-child(2) { text-align: right; }` to right-align the second column.\\n    *   If the table does use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, the effect can be achieved by combining adequate CSS attribute selectors like `[colspan=n]`, though this is not trivial.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/col"\n                }\n            ]\n        },\n        {\n            "name": "tbody",\n            "description": {\n                "kind": "markdown",\n                "value": "The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table."\n            },\n            "attributes": [\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-charoff) attributes.\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/tbody"\n                }\n            ]\n        },\n        {\n            "name": "thead",\n            "description": {\n                "kind": "markdown",\n                "value": "The thead element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table."\n            },\n            "attributes": [\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/thead"\n                }\n            ]\n        },\n        {\n            "name": "tfoot",\n            "description": {\n                "kind": "markdown",\n                "value": "The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table."\n            },\n            "attributes": [\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/tfoot"\n                }\n            ]\n        },\n        {\n            "name": "tr",\n            "description": {\n                "kind": "markdown",\n                "value": "The tr element represents a row of cells in a table."\n            },\n            "attributes": [\n                {\n                    "name": "align",\n                    "description": "A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString \\"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\\") which specifies how the cell\'s context should be aligned horizontally within the cells in the row; this is shorthand for using `align` on every cell in the row individually. Possible values are:\\n\\n`left`\\n\\nAlign the content of each cell at its left edge.\\n\\n`center`\\n\\nCenter the contents of each cell between their left and right edges.\\n\\n`right`\\n\\nAlign the content of each cell at its right edge.\\n\\n`justify`\\n\\nWiden whitespaces within the text of each cell so that the text fills the full width of each cell (full justification).\\n\\n`char`\\n\\nAlign each cell in the row on a specific character (such that each row in the column that is configured this way will horizontally align its cells on that character). This uses the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#attr-charoff) to establish the alignment character (typically \\".\\" or \\",\\" when aligning numerical data) and the number of characters that should follow the alignment character. This alignment type was never widely supported.\\n\\nIf no value is expressly set for `align`, the parent node\'s value is inherited.\\n\\nInstead of using the obsolete `align` attribute, you should instead use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to establish `left`, `center`, `right`, or `justify` alignment for the row\'s cells. To apply character-based alignment, set the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to the alignment character (such as `\\".\\"` or `\\",\\"`)."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/tr"\n                }\n            ]\n        },\n        {\n            "name": "td",\n            "description": {\n                "kind": "markdown",\n                "value": "The td element represents a data cell in a table."\n            },\n            "attributes": [\n                {\n                    "name": "colspan"\n                },\n                {\n                    "name": "rowspan"\n                },\n                {\n                    "name": "headers"\n                },\n                {\n                    "name": "abbr",\n                    "description": "This attribute contains a short abbreviated description of the cell\'s content. Some user-agents, such as speech readers, may present this description before the content itself.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard. Alternatively, you can put the abbreviated description inside the cell and place the long content in the **title** attribute."\n                },\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how the cell content\'s horizontal alignment will be handled. Possible values are:\\n\\n*   `left`: The content is aligned to the left of the cell.\\n*   `center`: The content is centered in the cell.\\n*   `right`: The content is aligned to the right of the cell.\\n*   `justify` (with text only): The content is stretched out inside the cell so that it covers its entire width.\\n*   `char` (with text only): The content is aligned to a character inside the `<th>` element with minimal offset. This character is defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nThe default value when this attribute is not specified is `left`.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, apply the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to the element.\\n*   To achieve the same effect as the `char` value, give the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property the same value you would use for the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-char). Unimplemented in CSS3."\n                },\n                {\n                    "name": "axis",\n                    "description": "This attribute contains a list of space-separated strings. Each string is the `id` of a group of cells that this header applies to.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard."\n                },\n                {\n                    "name": "bgcolor",\n                    "description": "This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in [sRGB](https://www.w3.org/Graphics/Color/sRGB) and is prefixed by \'#\'. This attribute may be used with one of sixteen predefined color strings:\\n\\n \\n\\n`black` = \\"#000000\\"\\n\\n \\n\\n`green` = \\"#008000\\"\\n\\n \\n\\n`silver` = \\"#C0C0C0\\"\\n\\n \\n\\n`lime` = \\"#00FF00\\"\\n\\n \\n\\n`gray` = \\"#808080\\"\\n\\n \\n\\n`olive` = \\"#808000\\"\\n\\n \\n\\n`white` = \\"#FFFFFF\\"\\n\\n \\n\\n`yellow` = \\"#FFFF00\\"\\n\\n \\n\\n`maroon` = \\"#800000\\"\\n\\n \\n\\n`navy` = \\"#000080\\"\\n\\n \\n\\n`red` = \\"#FF0000\\"\\n\\n \\n\\n`blue` = \\"#0000FF\\"\\n\\n \\n\\n`purple` = \\"#800080\\"\\n\\n \\n\\n`teal` = \\"#008080\\"\\n\\n \\n\\n`fuchsia` = \\"#FF00FF\\"\\n\\n \\n\\n`aqua` = \\"#00FFFF\\"\\n\\n**Note:** Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \\"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To create a similar effect use the [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \\"The background-color CSS property sets the background color of an element.\\") property in [CSS](https://developer.mozilla.org/en-US/docs/CSS) instead."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/td"\n                }\n            ]\n        },\n        {\n            "name": "th",\n            "description": {\n                "kind": "markdown",\n                "value": "The th element represents a header cell in a table."\n            },\n            "attributes": [\n                {\n                    "name": "colspan"\n                },\n                {\n                    "name": "rowspan"\n                },\n                {\n                    "name": "headers"\n                },\n                {\n                    "name": "scope",\n                    "valueSet": "s"\n                },\n                {\n                    "name": "sorted"\n                },\n                {\n                    "name": "abbr",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute contains a short abbreviated description of the cell\'s content. Some user-agents, such as speech readers, may present this description before the content itself."\n                    }\n                },\n                {\n                    "name": "align",\n                    "description": "This enumerated attribute specifies how the cell content\'s horizontal alignment will be handled. Possible values are:\\n\\n*   `left`: The content is aligned to the left of the cell.\\n*   `center`: The content is centered in the cell.\\n*   `right`: The content is aligned to the right of the cell.\\n*   `justify` (with text only): The content is stretched out inside the cell so that it covers its entire width.\\n*   `char` (with text only): The content is aligned to a character inside the `<th>` element with minimal offset. This character is defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-charoff) attributes.\\n\\nThe default value when this attribute is not specified is `left`.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, apply the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to the element.\\n*   To achieve the same effect as the `char` value, give the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property the same value you would use for the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-char). Unimplemented in CSS3."\n                },\n                {\n                    "name": "axis",\n                    "description": "This attribute contains a list of space-separated strings. Each string is the `id` of a group of cells that this header applies to.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard: use the [`scope`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope) attribute instead."\n                },\n                {\n                    "name": "bgcolor",\n                    "description": "This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in [sRGB](https://www.w3.org/Graphics/Color/sRGB) and is prefixed by \'#\'. This attribute may be used with one of sixteen predefined color strings:\\n\\n \\n\\n`black` = \\"#000000\\"\\n\\n \\n\\n`green` = \\"#008000\\"\\n\\n \\n\\n`silver` = \\"#C0C0C0\\"\\n\\n \\n\\n`lime` = \\"#00FF00\\"\\n\\n \\n\\n`gray` = \\"#808080\\"\\n\\n \\n\\n`olive` = \\"#808000\\"\\n\\n \\n\\n`white` = \\"#FFFFFF\\"\\n\\n \\n\\n`yellow` = \\"#FFFF00\\"\\n\\n \\n\\n`maroon` = \\"#800000\\"\\n\\n \\n\\n`navy` = \\"#000080\\"\\n\\n \\n\\n`red` = \\"#FF0000\\"\\n\\n \\n\\n`blue` = \\"#0000FF\\"\\n\\n \\n\\n`purple` = \\"#800080\\"\\n\\n \\n\\n`teal` = \\"#008080\\"\\n\\n \\n\\n`fuchsia` = \\"#FF00FF\\"\\n\\n \\n\\n`aqua` = \\"#00FFFF\\"\\n\\n**Note:** Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th \\"The HTML <th> element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS). To create a similar effect use the [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \\"The background-color CSS property sets the background color of an element.\\") property in [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) instead."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/th"\n                }\n            ]\n        },\n        {\n            "name": "form",\n            "description": {\n                "kind": "markdown",\n                "value": "The form element represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing."\n            },\n            "attributes": [\n                {\n                    "name": "accept-charset",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A space- or comma-delimited list of character encodings that the server accepts. The browser uses them in the order in which they are listed. The default value, the reserved string `\\"UNKNOWN\\"`, indicates the same encoding as that of the document containing the form element.  \\nIn previous versions of HTML, the different character encodings could be delimited by spaces or commas. In HTML5, only spaces are allowed as delimiters."\n                    }\n                },\n                {\n                    "name": "action",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The URI of a program that processes the form information. This value can be overridden by a [`formaction`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formaction) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."\n                    }\n                },\n                {\n                    "name": "autocomplete",\n                    "valueSet": "o",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates whether input elements can by default have their values automatically completed by the browser. This setting can be overridden by an `autocomplete` attribute on an element belonging to the form. Possible values are:\\n\\n*   `off`: The user must explicitly enter a value into each field for every use, or the document provides its own auto-completion method; the browser does not automatically complete entries.\\n*   `on`: The browser can automatically complete values based on values that the user has previously entered in the form.\\n\\nFor most modern browsers (including Firefox 38+, Google Chrome 34+, IE 11+) setting the autocomplete attribute will not prevent a browser\'s password manager from asking the user if they want to store login fields (username and password), if the user permits the storage the browser will autofill the login the next time the user visits the page. See [The autocomplete attribute and login fields](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#The_autocomplete_attribute_and_login_fields)."\n                    }\n                },\n                {\n                    "name": "enctype",\n                    "valueSet": "et",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "When the value of the `method` attribute is `post`, enctype is the [MIME type](https://en.wikipedia.org/wiki/Mime_type) of content that is used to submit the form to the server. Possible values are:\\n\\n*   `application/x-www-form-urlencoded`: The default value if the attribute is not specified.\\n*   `multipart/form-data`: The value used for an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element with the `type` attribute set to \\"file\\".\\n*   `text/plain`: (HTML5)\\n\\nThis value can be overridden by a [`formenctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formenctype) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."\n                    }\n                },\n                {\n                    "name": "method",\n                    "valueSet": "m",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP) method that the browser uses to submit the form. Possible values are:\\n\\n*   `post`: Corresponds to the HTTP [POST method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5) ; form data are included in the body of the form and sent to the server.\\n*   `get`: Corresponds to the HTTP [GET method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3); form data are appended to the `action` attribute URI with a \'?\' as separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\\n*   `dialog`: Use when the form is inside a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog \\"The HTML <dialog> element represents a dialog box or other interactive component, such as an inspector or window.\\") element to close the dialog when submitted.\\n\\nThis value can be overridden by a [`formmethod`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formmethod) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name of the form. In HTML 4, its use is deprecated (`id` should be used instead). It must be unique among the forms in a document and not just an empty string in HTML 5."\n                    }\n                },\n                {\n                    "name": "novalidate",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that the form is not to be validated when submitted. If this attribute is not specified (and therefore the form is validated), this default setting can be overridden by a [`formnovalidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formnovalidate) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element belonging to the form."\n                    }\n                },\n                {\n                    "name": "target",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A name or keyword indicating where to display the response that is received after submitting the form. In HTML 4, this is the name/keyword for a frame. In HTML5, it is a name/keyword for a _browsing context_ (for example, tab, window, or inline frame). The following keywords have special meanings:\\n\\n*   `_self`: Load the response into the same HTML 4 frame (or HTML5 browsing context) as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the response into a new unnamed HTML 4 window or HTML5 browsing context.\\n*   `_parent`: Load the response into the HTML 4 frameset parent of the current frame, or HTML5 parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: HTML 4: Load the response into the full original window, and cancel all other frames. HTML5: Load the response into the top-level browsing context (i.e., the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\\n*   _iframename_: The response is displayed in a named [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe \\"The HTML Inline Frame element (<iframe>) represents a nested browsing context, embedding another HTML page into the current one.\\").\\n\\nHTML5: This value can be overridden by a [`formtarget`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formtarget) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."\n                    }\n                },\n                {\n                    "name": "accept",\n                    "description": "A comma-separated list of content types that the server accepts.\\n\\n**Usage note:** This attribute has been removed in HTML5 and should no longer be used. Instead, use the [`accept`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept) attribute of the specific [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."\n                },\n                {\n                    "name": "autocapitalize",\n                    "description": "This is a nonstandard attribute used by iOS Safari Mobile which controls whether and how the text value for textual form control descendants should be automatically capitalized as it is entered/edited by the user. If the `autocapitalize` attribute is specified on an individual form control descendant, it trumps the form-wide `autocapitalize` setting. The non-deprecated values are available in iOS 5 and later. The default value is `sentences`. Possible values are:\\n\\n*   `none`: Completely disables automatic capitalization\\n*   `sentences`: Automatically capitalize the first letter of sentences.\\n*   `words`: Automatically capitalize the first letter of words.\\n*   `characters`: Automatically capitalize all characters.\\n*   `on`: Deprecated since iOS 5.\\n*   `off`: Deprecated since iOS 5."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/form"\n                }\n            ]\n        },\n        {\n            "name": "label",\n            "description": {\n                "kind": "markdown",\n                "value": "The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element\'s labeled control, either using the for attribute, or by putting the form control inside the label element itself."\n            },\n            "attributes": [\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element with which the label is associated (its _form owner_). If specified, the value of the attribute is the `id` of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element in the same document. This lets you place label elements anywhere within a document, not just as descendants of their form elements."\n                    }\n                },\n                {\n                    "name": "for",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id) of a [labelable](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) form-related element in the same document as the `<label>` element. The first element in the document with an `id` matching the value of the `for` attribute is the _labeled control_ for this label element, if it is a labelable element. If it is not labelable then the `for` attribute has no effect. If there are other elements which also match the `id` value, later in the document, they are not considered.\\n\\n**Note**: A `<label>` element can have both a `for` attribute and a contained control element, as long as the `for` attribute points to the contained control element."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/label"\n                }\n            ]\n        },\n        {\n            "name": "input",\n            "description": {\n                "kind": "markdown",\n                "value": "The input element represents a typed data field, usually with a form control to allow the user to edit the data."\n            },\n            "attributes": [\n                {\n                    "name": "accept"\n                },\n                {\n                    "name": "alt"\n                },\n                {\n                    "name": "autocomplete",\n                    "valueSet": "inputautocomplete"\n                },\n                {\n                    "name": "autofocus",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "checked",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "dirname"\n                },\n                {\n                    "name": "disabled",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "form"\n                },\n                {\n                    "name": "formaction"\n                },\n                {\n                    "name": "formenctype",\n                    "valueSet": "et"\n                },\n                {\n                    "name": "formmethod",\n                    "valueSet": "fm"\n                },\n                {\n                    "name": "formnovalidate",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "formtarget"\n                },\n                {\n                    "name": "height"\n                },\n                {\n                    "name": "inputmode",\n                    "valueSet": "im"\n                },\n                {\n                    "name": "list"\n                },\n                {\n                    "name": "max"\n                },\n                {\n                    "name": "maxlength"\n                },\n                {\n                    "name": "min"\n                },\n                {\n                    "name": "minlength"\n                },\n                {\n                    "name": "multiple",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "name"\n                },\n                {\n                    "name": "pattern"\n                },\n                {\n                    "name": "placeholder"\n                },\n                {\n                    "name": "readonly",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "required",\n                    "valueSet": "v"\n                },\n                {\n                    "name": "size"\n                },\n                {\n                    "name": "src"\n                },\n                {\n                    "name": "step"\n                },\n                {\n                    "name": "type",\n                    "valueSet": "t"\n                },\n                {\n                    "name": "value"\n                },\n                {\n                    "name": "width"\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/input"\n                }\n            ]\n        },\n        {\n            "name": "button",\n            "description": {\n                "kind": "markdown",\n                "value": "The button element represents a button labeled by its contents."\n            },\n            "attributes": [\n                {\n                    "name": "autofocus",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute lets you specify that the button should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified."\n                    }\n                },\n                {\n                    "name": "disabled",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that the user cannot interact with the button. If this attribute is not specified, the button inherits its setting from the containing element, for example [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset \\"The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.\\"); if there is no containing element with the **disabled** attribute set, then the button is enabled.\\n\\nFirefox will, unlike other browsers, by default, [persist the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") across page loads. Use the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The form element that the button is associated with (its _form owner_). The value of the attribute must be the **id** attribute of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element in the same document. If this attribute is not specified, the `<button>` element will be associated to an ancestor [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element, if one exists. This attribute enables you to associate `<button>` elements to [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") elements anywhere within a document, not just as descendants of [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") elements."\n                    }\n                },\n                {\n                    "name": "formaction",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The URI of a program that processes the information submitted by the button. If specified, it overrides the [`action`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action) attribute of the button\'s form owner."\n                    }\n                },\n                {\n                    "name": "formenctype",\n                    "valueSet": "et",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If the button is a submit button, this attribute specifies the type of content that is used to submit the form to the server. Possible values are:\\n\\n*   `application/x-www-form-urlencoded`: The default value if the attribute is not specified.\\n*   `multipart/form-data`: Use this value if you are using an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element with the [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type) attribute set to `file`.\\n*   `text/plain`\\n\\nIf this attribute is specified, it overrides the [`enctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype) attribute of the button\'s form owner."\n                    }\n                },\n                {\n                    "name": "formmethod",\n                    "valueSet": "fm",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If the button is a submit button, this attribute specifies the HTTP method that the browser uses to submit the form. Possible values are:\\n\\n*   `post`: The data from the form are included in the body of the form and sent to the server.\\n*   `get`: The data from the form are appended to the **form** attribute URI, with a \'?\' as a separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\\n\\nIf specified, this attribute overrides the [`method`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method) attribute of the button\'s form owner."\n                    }\n                },\n                {\n                    "name": "formnovalidate",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If the button is a submit button, this Boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the [`novalidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate) attribute of the button\'s form owner."\n                    }\n                },\n                {\n                    "name": "formtarget",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If the button is a submit button, this attribute is a name or keyword indicating where to display the response that is received after submitting the form. This is a name of, or keyword for, a _browsing context_ (for example, tab, window, or inline frame). If this attribute is specified, it overrides the [`target`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target) attribute of the button\'s form owner. The following keywords have special meanings:\\n\\n*   `_self`: Load the response into the same browsing context as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the response into a new unnamed browsing context.\\n*   `_parent`: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name of the button, which is submitted with the form data."\n                    }\n                },\n                {\n                    "name": "type",\n                    "valueSet": "bt",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The type of the button. Possible values are:\\n\\n*   `submit`: The button submits the form data to the server. This is the default if the attribute is not specified, or if the attribute is dynamically changed to an empty or invalid value.\\n*   `reset`: The button resets all the controls to their initial values.\\n*   `button`: The button has no default behavior. It can have client-side scripts associated with the element\'s events, which are triggered when the events occur."\n                    }\n                },\n                {\n                    "name": "value",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The initial value of the button. It defines the value associated with the button which is submitted with the form data. This value is passed to the server in params when the form is submitted."\n                    }\n                },\n                {\n                    "name": "autocomplete",\n                    "description": "The use of this attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") is nonstandard and Firefox-specific. By default, unlike other browsers, [Firefox persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") across page loads. Setting the value of this attribute to `off` (i.e. `autocomplete=\\"off\\"`) disables this feature. See [bug 654072](https://bugzilla.mozilla.org/show_bug.cgi?id=654072 \\"if disabled state is changed with javascript, the normal state doesn\'t return after refreshing the page\\")."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/button"\n                }\n            ]\n        },\n        {\n            "name": "select",\n            "description": {\n                "kind": "markdown",\n                "value": "The select element represents a control for selecting amongst a set of options."\n            },\n            "attributes": [\n                {\n                    "name": "autocomplete",\n                    "valueSet": "inputautocomplete",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString \\"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\\") providing a hint for a [user agent\'s](https://developer.mozilla.org/en-US/docs/Glossary/user_agent \\"user agent\'s: A user agent is a computer program representing a person, for example, a browser in a Web context.\\") autocomplete feature. See [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for a complete list of values and details on how to use autocomplete."\n                    }\n                },\n                {\n                    "name": "autofocus",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the `autofocus` attribute."\n                    }\n                },\n                {\n                    "name": "disabled",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example `fieldset`; if there is no containing element with the `disabled` attribute set, then the control is enabled."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute lets you specify the form element to which the select element is associated (that is, its \\"form owner\\"). If this attribute is specified, its value must be the same as the `id` of a form element in the same document. This enables you to place select elements anywhere within a document, not just as descendants of their form elements."\n                    }\n                },\n                {\n                    "name": "multiple",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When `multiple` is specified, most browsers will show a scrolling list box instead of a single line dropdown."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute is used to specify the name of the control."\n                    }\n                },\n                {\n                    "name": "required",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A Boolean attribute indicating that an option with a non-empty string value must be selected."\n                    }\n                },\n                {\n                    "name": "size",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If the control is presented as a scrolling list box (e.g. when `multiple` is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is 0.\\n\\n**Note:** According to the HTML5 specification, the default value for size should be 1; however, in practice, this has been found to break some web sites, and no other browser currently does that, so Mozilla has opted to continue to return 0 for the time being with Firefox."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/select"\n                }\n            ]\n        },\n        {\n            "name": "datalist",\n            "description": {\n                "kind": "markdown",\n                "value": "The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/datalist"\n                }\n            ]\n        },\n        {\n            "name": "optgroup",\n            "description": {\n                "kind": "markdown",\n                "value": "The optgroup element represents a group of option elements with a common label."\n            },\n            "attributes": [\n                {\n                    "name": "disabled",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won\'t receive any browsing events, like mouse clicks or focus-related ones."\n                    }\n                },\n                {\n                    "name": "label",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/optgroup"\n                }\n            ]\n        },\n        {\n            "name": "option",\n            "description": {\n                "kind": "markdown",\n                "value": "The option element represents an option in a select element or as part of a list of suggestions in a datalist element."\n            },\n            "attributes": [\n                {\n                    "name": "disabled",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won\'t receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup \\"The HTML <optgroup> element creates a grouping of options within a <select> element.\\") element."\n                    }\n                },\n                {\n                    "name": "label",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute is text for the label indicating the meaning of the option. If the `label` attribute isn\'t defined, its value is that of the element text content."\n                    }\n                },\n                {\n                    "name": "selected",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If present, this Boolean attribute indicates that the option is initially selected. If the `<option>` element is the descendant of a [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select \\"The HTML <select> element represents a control that provides a menu of options\\") element whose [`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple) attribute is not set, only one single `<option>` of this [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select \\"The HTML <select> element represents a control that provides a menu of options\\") element may have the `selected` attribute."\n                    }\n                },\n                {\n                    "name": "value",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/option"\n                }\n            ]\n        },\n        {\n            "name": "textarea",\n            "description": {\n                "kind": "markdown",\n                "value": "The textarea element represents a multiline plain text edit control for the element\'s raw value. The contents of the control represent the control\'s default value."\n            },\n            "attributes": [\n                {\n                    "name": "autocomplete",\n                    "valueSet": "inputautocomplete",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:\\n\\n*   `off`: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry.\\n*   `on`: The browser can automatically complete the value based on values that the user has entered during previous uses.\\n\\nIf the `autocomplete` attribute is not specified on a `<textarea>` element, then the browser uses the `autocomplete` attribute value of the `<textarea>` element\'s form owner. The form owner is either the [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element that this `<textarea>` element is a descendant of or the form element whose `id` is specified by the `form` attribute of the input element. For more information, see the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete) attribute in [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\")."\n                    }\n                },\n                {\n                    "name": "autofocus",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified."\n                    }\n                },\n                {\n                    "name": "cols",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is `20`."\n                    }\n                },\n                {\n                    "name": "dirname"\n                },\n                {\n                    "name": "disabled",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset \\"The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.\\"); if there is no containing element when the `disabled` attribute is set, the control is enabled."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The form element that the `<textarea>` element is associated with (its \\"form owner\\"). The value of the attribute must be the `id` of a form element in the same document. If this attribute is not specified, the `<textarea>` element must be a descendant of a form element. This attribute enables you to place `<textarea>` elements anywhere within a document, not just as descendants of form elements."\n                    }\n                },\n                {\n                    "name": "inputmode",\n                    "valueSet": "im"\n                },\n                {\n                    "name": "maxlength",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The maximum number of characters (unicode code points) that the user can enter. If this value isn\'t specified, the user can enter an unlimited number of characters."\n                    }\n                },\n                {\n                    "name": "minlength",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The minimum number of characters (unicode code points) required that the user should enter."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name of the control."\n                    }\n                },\n                {\n                    "name": "placeholder",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.\\n\\n**Note:** Placeholders should only be used to show an example of the type of data that should be entered into a form; they are _not_ a substitute for a proper [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label \\"The HTML <label> element represents a caption for an item in a user interface.\\") element tied to the input. See [Labels and placeholders](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Labels_and_placeholders \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") in [<input>: The Input (Form Input) element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") for a full explanation."\n                    }\n                },\n                {\n                    "name": "readonly",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the `disabled` attribute, the `readonly` attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form."\n                    }\n                },\n                {\n                    "name": "required",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute specifies that the user must fill in a value before submitting a form."\n                    }\n                },\n                {\n                    "name": "rows",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The number of visible text lines for the control."\n                    }\n                },\n                {\n                    "name": "wrap",\n                    "valueSet": "w",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates how the control wraps text. Possible values are:\\n\\n*   `hard`: The browser automatically inserts line breaks (CR+LF) so that each line has no more than the width of the control; the `cols` attribute must also be specified for this to take effect.\\n*   `soft`: The browser ensures that all line breaks in the value consist of a CR+LF pair, but does not insert any additional line breaks.\\n*   `off` : Like `soft` but changes appearance to `white-space: pre` so line segments exceeding `cols` are not wrapped and the `<textarea>` becomes horizontally scrollable.\\n\\nIf this attribute is not specified, `soft` is its default value."\n                    }\n                },\n                {\n                    "name": "autocapitalize",\n                    "description": "This is a non-standard attribute supported by WebKit on iOS (therefore nearly all browsers running on iOS, including Safari, Firefox, and Chrome), which controls whether and how the text value should be automatically capitalized as it is entered/edited by the user. The non-deprecated values are available in iOS 5 and later. Possible values are:\\n\\n*   `none`: Completely disables automatic capitalization.\\n*   `sentences`: Automatically capitalize the first letter of sentences.\\n*   `words`: Automatically capitalize the first letter of words.\\n*   `characters`: Automatically capitalize all characters.\\n*   `on`: Deprecated since iOS 5.\\n*   `off`: Deprecated since iOS 5."\n                },\n                {\n                    "name": "spellcheck",\n                    "description": "Specifies whether the `<textarea>` is subject to spell checking by the underlying browser/OS. the value can be:\\n\\n*   `true`: Indicates that the element needs to have its spelling and grammar checked.\\n*   `default` : Indicates that the element is to act according to a default behavior, possibly based on the parent element\'s own `spellcheck` value.\\n*   `false` : Indicates that the element should not be spell checked."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/textarea"\n                }\n            ]\n        },\n        {\n            "name": "output",\n            "description": {\n                "kind": "markdown",\n                "value": "The output element represents the result of a calculation performed by the application, or the result of a user action."\n            },\n            "attributes": [\n                {\n                    "name": "for",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A space-separated list of other elements’ [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id)s, indicating that those elements contributed input values to (or otherwise affected) the calculation."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The [form element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) that this element is associated with (its \\"form owner\\"). The value of the attribute must be an `id` of a form element in the same document. If this attribute is not specified, the output element must be a descendant of a form element. This attribute enables you to place output elements anywhere within a document, not just as descendants of their form elements."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name of the element, exposed in the [`HTMLFormElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement \\"The HTMLFormElement interface represents a <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.\\") API."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/output"\n                }\n            ]\n        },\n        {\n            "name": "progress",\n            "description": {\n                "kind": "markdown",\n                "value": "The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed."\n            },\n            "attributes": [\n                {\n                    "name": "value",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute specifies how much of the task that has been completed. It must be a valid floating point number between 0 and `max`, or between 0 and 1 if `max` is omitted. If there is no `value` attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take."\n                    }\n                },\n                {\n                    "name": "max",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute describes how much work the task indicated by the `progress` element requires. The `max` attribute, if present, must have a value greater than zero and be a valid floating point number. The default value is 1."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/progress"\n                }\n            ]\n        },\n        {\n            "name": "meter",\n            "description": {\n                "kind": "markdown",\n                "value": "The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate."\n            },\n            "attributes": [\n                {\n                    "name": "value",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The current numeric value. This must be between the minimum and maximum values (`min` attribute and `max` attribute) if they are specified. If unspecified or malformed, the value is 0. If specified, but not within the range given by the `min` attribute and `max` attribute, the value is equal to the nearest end of the range.\\n\\n**Usage note:** Unless the `value` attribute is between `0` and `1` (inclusive), the `min` and `max` attributes should define the range so that the `value` attribute\'s value is within it."\n                    }\n                },\n                {\n                    "name": "min",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The lower numeric bound of the measured range. This must be less than the maximum value (`max` attribute), if specified. If unspecified, the minimum value is 0."\n                    }\n                },\n                {\n                    "name": "max",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The upper numeric bound of the measured range. This must be greater than the minimum value (`min` attribute), if specified. If unspecified, the maximum value is 1."\n                    }\n                },\n                {\n                    "name": "low",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (`min` attribute), and it also must be less than the high value and maximum value (`high` attribute and `max` attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the `low` value is equal to the minimum value."\n                    }\n                },\n                {\n                    "name": "high",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The lower numeric bound of the high end of the measured range. This must be less than the maximum value (`max` attribute), and it also must be greater than the low value and minimum value (`low` attribute and **min** attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the `high` value is equal to the maximum value."\n                    }\n                },\n                {\n                    "name": "optimum",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates the optimal numeric value. It must be within the range (as defined by the `min` attribute and `max` attribute). When used with the `low` attribute and `high` attribute, it gives an indication where along the range is considered preferable. For example, if it is between the `min` attribute and the `low` attribute, then the lower range is considered preferred."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": "This attribute associates the element with a `form` element that has ownership of the `meter` element. For example, a `meter` might be displaying a range corresponding to an `input` element of `type` _number_. This attribute is only used if the `meter` element is being used as a form-associated element; even then, it may be omitted if the element appears as a descendant of a `form` element."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/meter"\n                }\n            ]\n        },\n        {\n            "name": "fieldset",\n            "description": {\n                "kind": "markdown",\n                "value": "The fieldset element represents a set of form controls optionally grouped under a common name."\n            },\n            "attributes": [\n                {\n                    "name": "disabled",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "If this Boolean attribute is set, all form controls that are descendants of the `<fieldset>`, are disabled, meaning they are not editable and won\'t be submitted along with the `<form>`. They won\'t receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend \\"The HTML <legend> element represents a caption for the content of its parent <fieldset>.\\") element won\'t be disabled."\n                    }\n                },\n                {\n                    "name": "form",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute takes the value of the `id` attribute of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element you want the `<fieldset>` to be part of, even if it is not inside the form."\n                    }\n                },\n                {\n                    "name": "name",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The name associated with the group.\\n\\n**Note**: The caption for the fieldset is given by the first [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend \\"The HTML <legend> element represents a caption for the content of its parent <fieldset>.\\") element nested inside it."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/fieldset"\n                }\n            ]\n        },\n        {\n            "name": "legend",\n            "description": {\n                "kind": "markdown",\n                "value": "The legend element represents a caption for the rest of the contents of the legend element\'s parent fieldset element, if any."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/legend"\n                }\n            ]\n        },\n        {\n            "name": "details",\n            "description": {\n                "kind": "markdown",\n                "value": "The details element represents a disclosure widget from which the user can obtain additional information or controls."\n            },\n            "attributes": [\n                {\n                    "name": "open",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute indicates whether or not the details — that is, the contents of the `<details>` element — are currently visible. The default, `false`, means the details are not visible."\n                    }\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/details"\n                }\n            ]\n        },\n        {\n            "name": "summary",\n            "description": {\n                "kind": "markdown",\n                "value": "The summary element represents a summary, caption, or legend for the rest of the contents of the summary element\'s parent details element, if any."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/summary"\n                }\n            ]\n        },\n        {\n            "name": "dialog",\n            "description": {\n                "kind": "markdown",\n                "value": "The dialog element represents a part of an application that a user interacts with to perform a task, for example a dialog box, inspector, or window."\n            },\n            "attributes": [\n                {\n                    "name": "open",\n                    "description": "Indicates that the dialog is active and available for interaction. When the `open` attribute is not set, the dialog shouldn\'t be shown to the user."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/dialog"\n                }\n            ]\n        },\n        {\n            "name": "script",\n            "description": {\n                "kind": "markdown",\n                "value": "The script element allows authors to include dynamic script and data blocks in their documents. The element does not represent content for the user."\n            },\n            "attributes": [\n                {\n                    "name": "src",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.\\n\\nIf a `script` element has a `src` attribute specified, it should not have a script embedded inside its tags."\n                    }\n                },\n                {\n                    "name": "type",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This attribute indicates the type of script represented. The value of this attribute will be in one of the following categories:\\n\\n*   **Omitted or a JavaScript MIME type:** For HTML5-compliant browsers this indicates the script is JavaScript. HTML5 specification urges authors to omit the attribute rather than provide a redundant MIME type. In earlier browsers, this identified the scripting language of the embedded or imported (via the `src` attribute) code. JavaScript MIME types are [listed in the specification](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#JavaScript_types).\\n*   **`module`:** For HTML5-compliant browsers the code is treated as a JavaScript module. The processing of the script contents is not affected by the `charset` and `defer` attributes. For information on using `module`, see [ES6 in Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/). Code may behave differently when the `module` keyword is used.\\n*   **Any other value:** The embedded content is treated as a data block which won\'t be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. The `src` attribute will be ignored.\\n\\n**Note:** in Firefox you could specify the version of JavaScript contained in a `<script>` element by including a non-standard `version` parameter inside the `type` attribute — for example `type=\\"text/javascript;version=1.8\\"`. This has been removed in Firefox 59 (see [bug 1428745](https://bugzilla.mozilla.org/show_bug.cgi?id=1428745 \\"FIXED: Remove support for version parameter from script loader\\"))."\n                    }\n                },\n                {\n                    "name": "charset"\n                },\n                {\n                    "name": "async",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This is a Boolean attribute indicating that the browser should, if possible, load the script asynchronously.\\n\\nThis attribute must not be used if the `src` attribute is absent (i.e. for inline scripts). If it is included in this case it will have no effect.\\n\\nBrowsers usually assume the worst case scenario and load scripts synchronously, (i.e. `async=\\"false\\"`) during HTML parsing.\\n\\nDynamically inserted scripts (using [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement \\"In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn\'t recognized.\\")) load asynchronously by default, so to turn on synchronous loading (i.e. scripts load in the order they were inserted) set `async=\\"false\\"`.\\n\\nSee [Browser compatibility](#Browser_compatibility) for notes on browser support. See also [Async scripts for asm.js](https://developer.mozilla.org/en-US/docs/Games/Techniques/Async_scripts)."\n                    }\n                },\n                {\n                    "name": "defer",\n                    "valueSet": "v",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded \\"/en-US/docs/Web/Events/DOMContentLoaded\\").\\n\\nScripts with the `defer` attribute will prevent the `DOMContentLoaded` event from firing until the script has loaded and finished evaluating.\\n\\nThis attribute must not be used if the `src` attribute is absent (i.e. for inline scripts), in this case it would have no effect.\\n\\nTo achieve a similar effect for dynamically inserted scripts use `async=\\"false\\"` instead. Scripts with the `defer` attribute will execute in the order in which they appear in the document."\n                    }\n                },\n                {\n                    "name": "crossorigin",\n                    "valueSet": "xo",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Normal `script` elements pass minimal information to the [`window.onerror`](https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror \\"The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.\\") for scripts which do not pass the standard [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \\"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\\") checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for a more descriptive explanation of its valid arguments."\n                    }\n                },\n                {\n                    "name": "nonce",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "A cryptographic nonce (number used once) to whitelist inline scripts in a [script-src Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource\'s policy is otherwise trivial."\n                    }\n                },\n                {\n                    "name": "integrity",\n                    "description": "This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation. See [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)."\n                },\n                {\n                    "name": "nomodule",\n                    "description": "This Boolean attribute is set to indicate that the script should not be executed in browsers that support [ES2015 modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/) — in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code."\n                },\n                {\n                    "name": "referrerpolicy",\n                    "description": "Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer) to send when fetching the script, or resources fetched by the script:\\n\\n*   `no-referrer`: The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade` (default): The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent to [origin](https://developer.mozilla.org/en-US/docs/Glossary/origin \\"origin: Web content\'s origin is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port all match.\\")s without [TLS](https://developer.mozilla.org/en-US/docs/Glossary/TLS \\"TLS: Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.\\") ([HTTPS](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS \\"HTTPS: HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually uses SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safely exchange sensitive data with a server, for example for banking activities or online shopping.\\")).\\n*   `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](https://developer.mozilla.org/en-US/docs/Archive/Mozilla/URIScheme), [host](https://developer.mozilla.org/en-US/docs/Glossary/host \\"host: A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.\\"), and [port](https://developer.mozilla.org/en-US/docs/Glossary/port \\"port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.\\").\\n*   `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\\n*   `same-origin`: A referrer will be sent for [same origin](https://developer.mozilla.org/en-US/docs/Glossary/Same-origin_policy \\"same origin: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\\"), but cross-origin requests will contain no referrer information.\\n*   `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (e.g. HTTPS→HTTPS), but don\'t send it to a less secure destination (e.g. HTTPS→HTTP).\\n*   `strict-origin-when-cross-origin`: Send a full URL when performing a same-origin request, but only send the origin when the protocol security level stays the same (e.g.HTTPS→HTTPS), and send no header to a less secure destination (e.g. HTTPS→HTTP).\\n*   `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash), [password](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password), or [username](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins.\\n\\n**Note**: An empty string value (`\\"\\"`) is both the default value, and a fallback value if `referrerpolicy` is not supported. If `referrerpolicy` is not explicitly specified on the `<script>` element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to `no-referrer-when-downgrade`."\n                },\n                {\n                    "name": "text",\n                    "description": "Like the `textContent` attribute, this attribute sets the text content of the element. Unlike the `textContent` attribute, however, this attribute is evaluated as executable code after the node is inserted into the DOM."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/script"\n                }\n            ]\n        },\n        {\n            "name": "noscript",\n            "description": {\n                "kind": "markdown",\n                "value": "The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don\'t support scripting, by affecting how the document is parsed."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/noscript"\n                }\n            ]\n        },\n        {\n            "name": "template",\n            "description": {\n                "kind": "markdown",\n                "value": "The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script."\n            },\n            "attributes": [],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/template"\n                }\n            ]\n        },\n        {\n            "name": "canvas",\n            "description": {\n                "kind": "markdown",\n                "value": "The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly."\n            },\n            "attributes": [\n                {\n                    "name": "width",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The width of the coordinate space in CSS pixels. Defaults to 300."\n                    }\n                },\n                {\n                    "name": "height",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "The height of the coordinate space in CSS pixels. Defaults to 150."\n                    }\n                },\n                {\n                    "name": "moz-opaque",\n                    "description": "Lets the canvas know whether or not translucency will be a factor. If the canvas knows there\'s no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized [`canvas.getContext(\'2d\', { alpha: false })`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext \\"The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.\\") instead."\n                }\n            ],\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Element/canvas"\n                }\n            ]\n        }\n    ],\n    "globalAttributes": [\n        {\n            "name": "accesskey",\n            "description": {\n                "kind": "markdown",\n                "value": "Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/accesskey"\n                }\n            ]\n        },\n        {\n            "name": "autocapitalize",\n            "description": {\n                "kind": "markdown",\n                "value": "Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:\\n\\n*   `off` or `none`, no autocapitalization is applied (all letters default to lowercase)\\n*   `on` or `sentences`, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase\\n*   `words`, the first letter of each word defaults to a capital letter; all other letters default to lowercase\\n*   `characters`, all letters should default to uppercase"\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/autocapitalize"\n                }\n            ]\n        },\n        {\n            "name": "class",\n            "description": {\n                "kind": "markdown",\n                "value": "A space-separated list of the classes of the element. Classes allows CSS and JavaScript to select and access specific elements via the [class selectors](/en-US/docs/Web/CSS/Class_selectors) or functions like the method [`Document.getElementsByClassName()`](/en-US/docs/Web/API/Document/getElementsByClassName \\"returns an array-like object of all child elements which have all of the given class names.\\")."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/class"\n                }\n            ]\n        },\n        {\n            "name": "contenteditable",\n            "description": {\n                "kind": "markdown",\n                "value": "An enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:\\n\\n*   `true` or the _empty string_, which indicates that the element must be editable;\\n*   `false`, which indicates that the element must not be editable."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/contenteditable"\n                }\n            ]\n        },\n        {\n            "name": "contextmenu",\n            "description": {\n                "kind": "markdown",\n                "value": "The `[**id**](#attr-id)` of a [`<menu>`](/en-US/docs/Web/HTML/Element/menu \\"The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.\\") to use as the contextual menu for this element."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/contextmenu"\n                }\n            ]\n        },\n        {\n            "name": "dir",\n            "description": {\n                "kind": "markdown",\n                "value": "An enumerated attribute indicating the directionality of the element\'s text. It can have the following values:\\n\\n*   `ltr`, which means _left to right_ and is to be used for languages that are written from the left to the right (like English);\\n*   `rtl`, which means _right to left_ and is to be used for languages that are written from the right to the left (like Arabic);\\n*   `auto`, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element."\n            },\n            "valueSet": "d",\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/dir"\n                }\n            ]\n        },\n        {\n            "name": "draggable",\n            "description": {\n                "kind": "markdown",\n                "value": "An enumerated attribute indicating whether the element can be dragged, using the [Drag and Drop API](/en-us/docs/DragDrop/Drag_and_Drop). It can have the following values:\\n\\n*   `true`, which indicates that the element may be dragged\\n*   `false`, which indicates that the element may not be dragged."\n            },\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/draggable"\n                }\n            ]\n        },\n        {\n            "name": "dropzone",\n            "description": {\n                "kind": "markdown",\n                "value": "An enumerated attribute indicating what types of content can be dropped on an element, using the [Drag and Drop API](/en-US/docs/DragDrop/Drag_and_Drop). It can have the following values:\\n\\n*   `copy`, which indicates that dropping will create a copy of the element that was dragged\\n*   `move`, which indicates that the element that was dragged will be moved to this new location.\\n*   `link`, will create a link to the dragged data."\n            }\n        },\n        {\n            "name": "exportparts",\n            "description": {\n                "kind": "markdown",\n                "value": "Used to transitively export shadow parts from a nested shadow tree into a containing light tree."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/exportparts"\n                }\n            ]\n        },\n        {\n            "name": "hidden",\n            "description": {\n                "kind": "markdown",\n                "value": "A Boolean attribute indicates that the element is not yet, or is no longer, _relevant_. For example, it can be used to hide elements of the page that can\'t be used until the login process has been completed. The browser won\'t render such elements. This attribute must not be used to hide content that could legitimately be shown."\n            },\n            "valueSet": "v",\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/hidden"\n                }\n            ]\n        },\n        {\n            "name": "id",\n            "description": {\n                "kind": "markdown",\n                "value": "Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS)."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/id"\n                }\n            ]\n        },\n        {\n            "name": "inputmode",\n            "description": {\n                "kind": "markdown",\n                "value": "Provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on [`<input>`](/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") elements, but is usable on any element while in `[contenteditable](/en-US/docs/Web/HTML/Global_attributes#attr-contenteditable)` mode."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode"\n                }\n            ]\n        },\n        {\n            "name": "is",\n            "description": {\n                "kind": "markdown",\n                "value": "Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see [Using custom elements](/en-US/docs/Web/Web_Components/Using_custom_elements) for more details)."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/is"\n                }\n            ]\n        },\n        {\n            "name": "itemid",\n            "description": {\n                "kind": "markdown",\n                "value": "The unique, global identifier of an item."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemid"\n                }\n            ]\n        },\n        {\n            "name": "itemprop",\n            "description": {\n                "kind": "markdown",\n                "value": "Used to add properties to an item. Every HTML element may have an `itemprop` attribute specified, where an `itemprop` consists of a name and value pair."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemprop"\n                }\n            ]\n        },\n        {\n            "name": "itemref",\n            "description": {\n                "kind": "markdown",\n                "value": "Properties that are not descendants of an element with the `itemscope` attribute can be associated with the item using an `itemref`. It provides a list of element ids (not `itemid`s) with additional properties elsewhere in the document."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemref"\n                }\n            ]\n        },\n        {\n            "name": "itemscope",\n            "description": {\n                "kind": "markdown",\n                "value": "`itemscope` (usually) works along with `[itemtype](/en-US/docs/Web/HTML/Global_attributes#attr-itemtype)` to specify that the HTML contained in a block is about a particular item. `itemscope` creates the Item and defines the scope of the `itemtype` associated with it. `itemtype` is a valid URL of a vocabulary (such as [schema.org](https://schema.org/)) that describes the item and its properties context."\n            },\n            "valueSet": "v",\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemscope"\n                }\n            ]\n        },\n        {\n            "name": "itemtype",\n            "description": {\n                "kind": "markdown",\n                "value": "Specifies the URL of the vocabulary that will be used to define `itemprop`s (item properties) in the data structure. `[itemscope](/en-US/docs/Web/HTML/Global_attributes#attr-itemscope)` is used to set the scope of where in the data structure the vocabulary set by `itemtype` will be active."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemtype"\n                }\n            ]\n        },\n        {\n            "name": "lang",\n            "description": {\n                "kind": "markdown",\n                "value": "Helps define the language of an element: the language that non-editable elements are in, or the language that editable elements should be written in by the user. The attribute contains one “language tag” (made of hyphen-separated “language subtags”) in the format defined in [_Tags for Identifying Languages (BCP47)_](https://www.ietf.org/rfc/bcp/bcp47.txt). [**xml:lang**](#attr-xml:lang) has priority over it."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/lang"\n                }\n            ]\n        },\n        {\n            "name": "part",\n            "description": {\n                "kind": "markdown",\n                "value": "A space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the [`::part`](/en-US/docs/Web/CSS/::part \\"The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute.\\") pseudo-element."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/part"\n                }\n            ]\n        },\n        {\n            "name": "role",\n            "valueSet": "roles"\n        },\n        {\n            "name": "slot",\n            "description": {\n                "kind": "markdown",\n                "value": "Assigns a slot in a [shadow DOM](/en-US/docs/Web/Web_Components/Shadow_DOM) shadow tree to an element: An element with a `slot` attribute is assigned to the slot created by the [`<slot>`](/en-US/docs/Web/HTML/Element/slot \\"The HTML <slot> element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.\\") element whose `[name](/en-US/docs/Web/HTML/Element/slot#attr-name)` attribute\'s value matches that `slot` attribute\'s value."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/slot"\n                }\n            ]\n        },\n        {\n            "name": "spellcheck",\n            "description": {\n                "kind": "markdown",\n                "value": "An enumerated attribute defines whether the element may be checked for spelling errors. It may have the following values:\\n\\n*   `true`, which indicates that the element should be, if possible, checked for spelling errors;\\n*   `false`, which indicates that the element should not be checked for spelling errors."\n            },\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/spellcheck"\n                }\n            ]\n        },\n        {\n            "name": "style",\n            "description": {\n                "kind": "markdown",\n                "value": "Contains [CSS](/en-US/docs/Web/CSS) styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the [`<style>`](/en-US/docs/Web/HTML/Element/style \\"The HTML <style> element contains style information for a document, or part of a document.\\") element have mainly the purpose of allowing for quick styling, for example for testing purposes."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/style"\n                }\n            ]\n        },\n        {\n            "name": "tabindex",\n            "description": {\n                "kind": "markdown",\n                "value": "An integer attribute indicating if the element can take input focus (is _focusable_), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values:\\n\\n*   a _negative value_ means that the element should be focusable, but should not be reachable via sequential keyboard navigation;\\n*   `0` means that the element should be focusable and reachable via sequential keyboard navigation, but its relative order is defined by the platform convention;\\n*   a _positive value_ means that the element should be focusable and reachable via sequential keyboard navigation; the order in which the elements are focused is the increasing value of the [**tabindex**](#attr-tabindex). If several elements share the same tabindex, their relative order follows their relative positions in the document."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/tabindex"\n                }\n            ]\n        },\n        {\n            "name": "title",\n            "description": {\n                "kind": "markdown",\n                "value": "Contains a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip."\n            },\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/title"\n                }\n            ]\n        },\n        {\n            "name": "translate",\n            "description": {\n                "kind": "markdown",\n                "value": "An enumerated attribute that is used to specify whether an element\'s attribute values and the values of its [`Text`](/en-US/docs/Web/API/Text \\"The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element\'s text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.\\") node children are to be translated when the page is localized, or whether to leave them unchanged. It can have the following values:\\n\\n*   empty string and `yes`, which indicates that the element will be translated.\\n*   `no`, which indicates that the element will not be translated."\n            },\n            "valueSet": "y",\n            "references": [\n                {\n                    "name": "MDN Reference",\n                    "url": "https://developer.mozilla.org/docs/Web/HTML/Global_attributes/translate"\n                }\n            ]\n        },\n        {\n            "name": "onabort",\n            "description": {\n                "kind": "markdown",\n                "value": "The loading of a resource has been aborted."\n            }\n        },\n        {\n            "name": "onblur",\n            "description": {\n                "kind": "markdown",\n                "value": "An element has lost focus (does not bubble)."\n            }\n        },\n        {\n            "name": "oncanplay",\n            "description": {\n                "kind": "markdown",\n                "value": "The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content."\n            }\n        },\n        {\n            "name": "oncanplaythrough",\n            "description": {\n                "kind": "markdown",\n                "value": "The user agent can play the media up to its end without having to stop for further buffering of content."\n            }\n        },\n        {\n            "name": "onchange",\n            "description": {\n                "kind": "markdown",\n                "value": "The change event is fired for <input>, <select>, and <textarea> elements when a change to the element\'s value is committed by the user."\n            }\n        },\n        {\n            "name": "onclick",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device button has been pressed and released on an element."\n            }\n        },\n        {\n            "name": "oncontextmenu",\n            "description": {\n                "kind": "markdown",\n                "value": "The right button of the mouse is clicked (before the context menu is displayed)."\n            }\n        },\n        {\n            "name": "ondblclick",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device button is clicked twice on an element."\n            }\n        },\n        {\n            "name": "ondrag",\n            "description": {\n                "kind": "markdown",\n                "value": "An element or text selection is being dragged (every 350ms)."\n            }\n        },\n        {\n            "name": "ondragend",\n            "description": {\n                "kind": "markdown",\n                "value": "A drag operation is being ended (by releasing a mouse button or hitting the escape key)."\n            }\n        },\n        {\n            "name": "ondragenter",\n            "description": {\n                "kind": "markdown",\n                "value": "A dragged element or text selection enters a valid drop target."\n            }\n        },\n        {\n            "name": "ondragleave",\n            "description": {\n                "kind": "markdown",\n                "value": "A dragged element or text selection leaves a valid drop target."\n            }\n        },\n        {\n            "name": "ondragover",\n            "description": {\n                "kind": "markdown",\n                "value": "An element or text selection is being dragged over a valid drop target (every 350ms)."\n            }\n        },\n        {\n            "name": "ondragstart",\n            "description": {\n                "kind": "markdown",\n                "value": "The user starts dragging an element or text selection."\n            }\n        },\n        {\n            "name": "ondrop",\n            "description": {\n                "kind": "markdown",\n                "value": "An element is dropped on a valid drop target."\n            }\n        },\n        {\n            "name": "ondurationchange",\n            "description": {\n                "kind": "markdown",\n                "value": "The duration attribute has been updated."\n            }\n        },\n        {\n            "name": "onemptied",\n            "description": {\n                "kind": "markdown",\n                "value": "The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it."\n            }\n        },\n        {\n            "name": "onended",\n            "description": {\n                "kind": "markdown",\n                "value": "Playback has stopped because the end of the media was reached."\n            }\n        },\n        {\n            "name": "onerror",\n            "description": {\n                "kind": "markdown",\n                "value": "A resource failed to load."\n            }\n        },\n        {\n            "name": "onfocus",\n            "description": {\n                "kind": "markdown",\n                "value": "An element has received focus (does not bubble)."\n            }\n        },\n        {\n            "name": "onformchange"\n        },\n        {\n            "name": "onforminput"\n        },\n        {\n            "name": "oninput",\n            "description": {\n                "kind": "markdown",\n                "value": "The value of an element changes or the content of an element with the attribute contenteditable is modified."\n            }\n        },\n        {\n            "name": "oninvalid",\n            "description": {\n                "kind": "markdown",\n                "value": "A submittable element has been checked and doesn\'t satisfy its constraints."\n            }\n        },\n        {\n            "name": "onkeydown",\n            "description": {\n                "kind": "markdown",\n                "value": "A key is pressed down."\n            }\n        },\n        {\n            "name": "onkeypress",\n            "description": {\n                "kind": "markdown",\n                "value": "A key is pressed down and that key normally produces a character value (use input instead)."\n            }\n        },\n        {\n            "name": "onkeyup",\n            "description": {\n                "kind": "markdown",\n                "value": "A key is released."\n            }\n        },\n        {\n            "name": "onload",\n            "description": {\n                "kind": "markdown",\n                "value": "A resource and its dependent resources have finished loading."\n            }\n        },\n        {\n            "name": "onloadeddata",\n            "description": {\n                "kind": "markdown",\n                "value": "The first frame of the media has finished loading."\n            }\n        },\n        {\n            "name": "onloadedmetadata",\n            "description": {\n                "kind": "markdown",\n                "value": "The metadata has been loaded."\n            }\n        },\n        {\n            "name": "onloadstart",\n            "description": {\n                "kind": "markdown",\n                "value": "Progress has begun."\n            }\n        },\n        {\n            "name": "onmousedown",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device button (usually a mouse) is pressed on an element."\n            }\n        },\n        {\n            "name": "onmousemove",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device is moved over an element."\n            }\n        },\n        {\n            "name": "onmouseout",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device is moved off the element that has the listener attached or off one of its children."\n            }\n        },\n        {\n            "name": "onmouseover",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device is moved onto the element that has the listener attached or onto one of its children."\n            }\n        },\n        {\n            "name": "onmouseup",\n            "description": {\n                "kind": "markdown",\n                "value": "A pointing device button is released over an element."\n            }\n        },\n        {\n            "name": "onmousewheel"\n        },\n        {\n            "name": "onpause",\n            "description": {\n                "kind": "markdown",\n                "value": "Playback has been paused."\n            }\n        },\n        {\n            "name": "onplay",\n            "description": {\n                "kind": "markdown",\n                "value": "Playback has begun."\n            }\n        },\n        {\n            "name": "onplaying",\n            "description": {\n                "kind": "markdown",\n                "value": "Playback is ready to start after having been paused or delayed due to lack of data."\n            }\n        },\n        {\n            "name": "onprogress",\n            "description": {\n                "kind": "markdown",\n                "value": "In progress."\n            }\n        },\n        {\n            "name": "onratechange",\n            "description": {\n                "kind": "markdown",\n                "value": "The playback rate has changed."\n            }\n        },\n        {\n            "name": "onreset",\n            "description": {\n                "kind": "markdown",\n                "value": "A form is reset."\n            }\n        },\n        {\n            "name": "onresize",\n            "description": {\n                "kind": "markdown",\n                "value": "The document view has been resized."\n            }\n        },\n        {\n            "name": "onreadystatechange",\n            "description": {\n                "kind": "markdown",\n                "value": "The readyState attribute of a document has changed."\n            }\n        },\n        {\n            "name": "onscroll",\n            "description": {\n                "kind": "markdown",\n                "value": "The document view or an element has been scrolled."\n            }\n        },\n        {\n            "name": "onseeked",\n            "description": {\n                "kind": "markdown",\n                "value": "A seek operation completed."\n            }\n        },\n        {\n            "name": "onseeking",\n            "description": {\n                "kind": "markdown",\n                "value": "A seek operation began."\n            }\n        },\n        {\n            "name": "onselect",\n            "description": {\n                "kind": "markdown",\n                "value": "Some text is being selected."\n            }\n        },\n        {\n            "name": "onshow",\n            "description": {\n                "kind": "markdown",\n                "value": "A contextmenu event was fired on/bubbled to an element that has a contextmenu attribute"\n            }\n        },\n        {\n            "name": "onstalled",\n            "description": {\n                "kind": "markdown",\n                "value": "The user agent is trying to fetch media data, but data is unexpectedly not forthcoming."\n            }\n        },\n        {\n            "name": "onsubmit",\n            "description": {\n                "kind": "markdown",\n                "value": "A form is submitted."\n            }\n        },\n        {\n            "name": "onsuspend",\n            "description": {\n                "kind": "markdown",\n                "value": "Media data loading has been suspended."\n            }\n        },\n        {\n            "name": "ontimeupdate",\n            "description": {\n                "kind": "markdown",\n                "value": "The time indicated by the currentTime attribute has been updated."\n            }\n        },\n        {\n            "name": "onvolumechange",\n            "description": {\n                "kind": "markdown",\n                "value": "The volume has changed."\n            }\n        },\n        {\n            "name": "onwaiting",\n            "description": {\n                "kind": "markdown",\n                "value": "Playback has stopped because of a temporary lack of data."\n            }\n        },\n        {\n            "name": "aria-activedescendant",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-activedescendant"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the currently active element when DOM focus is on a [`composite`](https://www.w3.org/TR/wai-aria-1.1/#composite) widget, [`textbox`](https://www.w3.org/TR/wai-aria-1.1/#textbox), [`group`](https://www.w3.org/TR/wai-aria-1.1/#group), or [`application`](https://www.w3.org/TR/wai-aria-1.1/#application)."\n            }\n        },\n        {\n            "name": "aria-atomic",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-atomic"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether [assistive technologies](https://www.w3.org/TR/wai-aria-1.1/#dfn-assistive-technology) will present all, or only parts of, the changed region based on the change notifications defined by the [`aria-relevant`](https://www.w3.org/TR/wai-aria-1.1/#aria-relevant) attribute."\n            }\n        },\n        {\n            "name": "aria-autocomplete",\n            "valueSet": "autocomplete",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-autocomplete"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be presented if they are made."\n            }\n        },\n        {\n            "name": "aria-busy",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-busy"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates an element is being modified and that assistive technologies _MAY_ want to wait until the modifications are complete before exposing them to the user."\n            }\n        },\n        {\n            "name": "aria-checked",\n            "valueSet": "tristate",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-checked"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates the current \\"checked\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of checkboxes, radio buttons, and other [widgets](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.1/#aria-pressed) and [`aria-selected`](https://www.w3.org/TR/wai-aria-1.1/#aria-selected)."\n            }\n        },\n        {\n            "name": "aria-colcount",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-colcount"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the total number of columns in a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-colindex)."\n            }\n        },\n        {\n            "name": "aria-colindex",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-colindex"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines an [element\'s](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) column index or position with respect to the total number of columns within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colcount`](https://www.w3.org/TR/wai-aria-1.1/#aria-colcount) and [`aria-colspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-colspan)."\n            }\n        },\n        {\n            "name": "aria-colspan",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-colspan"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the number of columns spanned by a cell or gridcell within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-colindex) and [`aria-rowspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan)."\n            }\n        },\n        {\n            "name": "aria-controls",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-controls"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) whose contents or presence are controlled by the current element. See related [`aria-owns`](https://www.w3.org/TR/wai-aria-1.1/#aria-owns)."\n            }\n        },\n        {\n            "name": "aria-current",\n            "valueSet": "current",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-current"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that represents the current item within a container or set of related elements."\n            }\n        },\n        {\n            "name": "aria-describedat",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-describedat"\n                }\n            ]\n        },\n        {\n            "name": "aria-describedby",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-describedby"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) that describes the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-labelledby`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby)."\n            }\n        },\n        {\n            "name": "aria-disabled",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-disabled"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates that the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is [perceivable](https://www.w3.org/TR/wai-aria-1.1/#dfn-perceivable) but disabled, so it is not editable or otherwise [operable](https://www.w3.org/TR/wai-aria-1.1/#dfn-operable). See related [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) and [`aria-readonly`](https://www.w3.org/TR/wai-aria-1.1/#aria-readonly)."\n            }\n        },\n        {\n            "name": "aria-dropeffect",\n            "valueSet": "dropeffect",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-dropeffect"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "\\\\[Deprecated in ARIA 1.1\\\\] Indicates what functions can be performed when a dragged object is released on the drop target."\n            }\n        },\n        {\n            "name": "aria-errormessage",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that provides an error message for the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-invalid`](https://www.w3.org/TR/wai-aria-1.1/#aria-invalid) and [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby)."\n            }\n        },\n        {\n            "name": "aria-expanded",\n            "valueSet": "u",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-expanded"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."\n            }\n        },\n        {\n            "name": "aria-flowto",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-flowto"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the next [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) in an alternate reading order of content which, at the user\'s discretion, allows assistive technology to override the general default of reading in document source order."\n            }\n        },\n        {\n            "name": "aria-grabbed",\n            "valueSet": "u",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-grabbed"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "\\\\[Deprecated in ARIA 1.1\\\\] Indicates an element\'s \\"grabbed\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) in a drag-and-drop operation."\n            }\n        },\n        {\n            "name": "aria-haspopup",\n            "valueSet": "haspopup",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)."\n            }\n        },\n        {\n            "name": "aria-hidden",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-hidden"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is exposed to an accessibility API. See related [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.1/#aria-disabled)."\n            }\n        },\n        {\n            "name": "aria-invalid",\n            "valueSet": "invalid",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-invalid"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates the entered value does not conform to the format expected by the application. See related [`aria-errormessage`](https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage)."\n            }\n        },\n        {\n            "name": "aria-kbdshortcuts",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-kbdshortcuts"\n                }\n            ]\n        },\n        {\n            "name": "aria-label",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-label"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines a string value that labels the current element. See related [`aria-labelledby`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby)."\n            }\n        },\n        {\n            "name": "aria-labelledby",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) that labels the current element. See related [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby)."\n            }\n        },\n        {\n            "name": "aria-level",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-level"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the hierarchical level of an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) within a structure."\n            }\n        },\n        {\n            "name": "aria-live",\n            "valueSet": "live",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-live"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates that an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) will be updated, and describes the types of updates the [user agents](https://www.w3.org/TR/wai-aria-1.1/#dfn-user-agent), [assistive technologies](https://www.w3.org/TR/wai-aria-1.1/#dfn-assistive-technology), and user can expect from the [live region](https://www.w3.org/TR/wai-aria-1.1/#dfn-live-region)."\n            }\n        },\n        {\n            "name": "aria-modal",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-modal"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is modal when displayed."\n            }\n        },\n        {\n            "name": "aria-multiline",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-multiline"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether a text box accepts multiple lines of input or only a single line."\n            }\n        },\n        {\n            "name": "aria-multiselectable",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-multiselectable"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates that the user may select more than one item from the current selectable descendants."\n            }\n        },\n        {\n            "name": "aria-orientation",\n            "valueSet": "orientation",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-orientation"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous."\n            }\n        },\n        {\n            "name": "aria-owns",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-owns"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) in order to define a visual, functional, or contextual parent/child [relationship](https://www.w3.org/TR/wai-aria-1.1/#dfn-relationship) between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related [`aria-controls`](https://www.w3.org/TR/wai-aria-1.1/#aria-controls)."\n            }\n        },\n        {\n            "name": "aria-placeholder",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-placeholder"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."\n            }\n        },\n        {\n            "name": "aria-posinset",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-posinset"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-setsize`](https://www.w3.org/TR/wai-aria-1.1/#aria-setsize)."\n            }\n        },\n        {\n            "name": "aria-pressed",\n            "valueSet": "tristate",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-pressed"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates the current \\"pressed\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of toggle buttons. See related [`aria-checked`](https://www.w3.org/TR/wai-aria-1.1/#aria-checked) and [`aria-selected`](https://www.w3.org/TR/wai-aria-1.1/#aria-selected)."\n            }\n        },\n        {\n            "name": "aria-readonly",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-readonly"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates that the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is not editable, but is otherwise [operable](https://www.w3.org/TR/wai-aria-1.1/#dfn-operable). See related [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.1/#aria-disabled)."\n            }\n        },\n        {\n            "name": "aria-relevant",\n            "valueSet": "relevant",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-relevant"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related [`aria-atomic`](https://www.w3.org/TR/wai-aria-1.1/#aria-atomic)."\n            }\n        },\n        {\n            "name": "aria-required",\n            "valueSet": "b",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-required"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates that user input is required on the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) before a form may be submitted."\n            }\n        },\n        {\n            "name": "aria-roledescription",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines a human-readable, author-localized description for the [role](https://www.w3.org/TR/wai-aria-1.1/#dfn-role) of an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)."\n            }\n        },\n        {\n            "name": "aria-rowcount",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-rowcount"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the total number of rows in a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex)."\n            }\n        },\n        {\n            "name": "aria-rowindex",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines an [element\'s](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) row index or position with respect to the total number of rows within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowcount`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowcount) and [`aria-rowspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan)."\n            }\n        },\n        {\n            "name": "aria-rowspan",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the number of rows spanned by a cell or gridcell within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex) and [`aria-colspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-colspan)."\n            }\n        },\n        {\n            "name": "aria-selected",\n            "valueSet": "u",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-selected"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates the current \\"selected\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of various [widgets](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-checked`](https://www.w3.org/TR/wai-aria-1.1/#aria-checked) and [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.1/#aria-pressed)."\n            }\n        },\n        {\n            "name": "aria-setsize",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-setsize"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-posinset`](https://www.w3.org/TR/wai-aria-1.1/#aria-posinset)."\n            }\n        },\n        {\n            "name": "aria-sort",\n            "valueSet": "sort",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-sort"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates if items in a table or grid are sorted in ascending or descending order."\n            }\n        },\n        {\n            "name": "aria-valuemax",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-valuemax"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the maximum allowed value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget)."\n            }\n        },\n        {\n            "name": "aria-valuemin",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-valuemin"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the minimum allowed value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget)."\n            }\n        },\n        {\n            "name": "aria-valuenow",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-valuenow"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the current value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-valuetext`](https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext)."\n            }\n        },\n        {\n            "name": "aria-valuetext",\n            "references": [\n                {\n                    "name": "WAI-ARIA Reference",\n                    "url": "https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext"\n                }\n            ],\n            "description": {\n                "kind": "markdown",\n                "value": "Defines the human readable text alternative of [`aria-valuenow`](https://www.w3.org/TR/wai-aria-1.1/#aria-valuenow) for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget)."\n            }\n        },\n        {\n            "name": "aria-details",\n            "description": {\n                "kind": "markdown",\n                "value": "Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that provides a detailed, extended description for the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby)."\n            }\n        },\n        {\n            "name": "aria-keyshortcuts",\n            "description": {\n                "kind": "markdown",\n                "value": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."\n            }\n        }\n    ],\n    "valueSets": [\n        {\n            "name": "b",\n            "values": [\n                {\n                    "name": "true"\n                },\n                {\n                    "name": "false"\n                }\n            ]\n        },\n        {\n            "name": "u",\n            "values": [\n                {\n                    "name": "true"\n                },\n                {\n                    "name": "false"\n                },\n                {\n                    "name": "undefined"\n                }\n            ]\n        },\n        {\n            "name": "o",\n            "values": [\n                {\n                    "name": "on"\n                },\n                {\n                    "name": "off"\n                }\n            ]\n        },\n        {\n            "name": "y",\n            "values": [\n                {\n                    "name": "yes"\n                },\n                {\n                    "name": "no"\n                }\n            ]\n        },\n        {\n            "name": "w",\n            "values": [\n                {\n                    "name": "soft"\n                },\n                {\n                    "name": "hard"\n                }\n            ]\n        },\n        {\n            "name": "d",\n            "values": [\n                {\n                    "name": "ltr"\n                },\n                {\n                    "name": "rtl"\n                },\n                {\n                    "name": "auto"\n                }\n            ]\n        },\n        {\n            "name": "m",\n            "values": [\n                {\n                    "name": "GET",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Corresponds to the HTTP [GET method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3); form data are appended to the `action` attribute URI with a \'?\' as separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters."\n                    }\n                },\n                {\n                    "name": "POST",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Corresponds to the HTTP [POST method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5); form data are included in the body of the form and sent to the server."\n                    }\n                },\n                {\n                    "name": "dialog",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Use when the form is inside a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element to close the dialog when submitted."\n                    }\n                }\n            ]\n        },\n        {\n            "name": "fm",\n            "values": [\n                {\n                    "name": "GET"\n                },\n                {\n                    "name": "POST"\n                }\n            ]\n        },\n        {\n            "name": "s",\n            "values": [\n                {\n                    "name": "row"\n                },\n                {\n                    "name": "col"\n                },\n                {\n                    "name": "rowgroup"\n                },\n                {\n                    "name": "colgroup"\n                }\n            ]\n        },\n        {\n            "name": "t",\n            "values": [\n                {\n                    "name": "hidden"\n                },\n                {\n                    "name": "text"\n                },\n                {\n                    "name": "search"\n                },\n                {\n                    "name": "tel"\n                },\n                {\n                    "name": "url"\n                },\n                {\n                    "name": "email"\n                },\n                {\n                    "name": "password"\n                },\n                {\n                    "name": "datetime"\n                },\n                {\n                    "name": "date"\n                },\n                {\n                    "name": "month"\n                },\n                {\n                    "name": "week"\n                },\n                {\n                    "name": "time"\n                },\n                {\n                    "name": "datetime-local"\n                },\n                {\n                    "name": "number"\n                },\n                {\n                    "name": "range"\n                },\n                {\n                    "name": "color"\n                },\n                {\n                    "name": "checkbox"\n                },\n                {\n                    "name": "radio"\n                },\n                {\n                    "name": "file"\n                },\n                {\n                    "name": "submit"\n                },\n                {\n                    "name": "image"\n                },\n                {\n                    "name": "reset"\n                },\n                {\n                    "name": "button"\n                }\n            ]\n        },\n        {\n            "name": "im",\n            "values": [\n                {\n                    "name": "verbatim"\n                },\n                {\n                    "name": "latin"\n                },\n                {\n                    "name": "latin-name"\n                },\n                {\n                    "name": "latin-prose"\n                },\n                {\n                    "name": "full-width-latin"\n                },\n                {\n                    "name": "kana"\n                },\n                {\n                    "name": "kana-name"\n                },\n                {\n                    "name": "katakana"\n                },\n                {\n                    "name": "numeric"\n                },\n                {\n                    "name": "tel"\n                },\n                {\n                    "name": "email"\n                },\n                {\n                    "name": "url"\n                }\n            ]\n        },\n        {\n            "name": "bt",\n            "values": [\n                {\n                    "name": "button"\n                },\n                {\n                    "name": "submit"\n                },\n                {\n                    "name": "reset"\n                },\n                {\n                    "name": "menu"\n                }\n            ]\n        },\n        {\n            "name": "lt",\n            "values": [\n                {\n                    "name": "1"\n                },\n                {\n                    "name": "a"\n                },\n                {\n                    "name": "A"\n                },\n                {\n                    "name": "i"\n                },\n                {\n                    "name": "I"\n                }\n            ]\n        },\n        {\n            "name": "mt",\n            "values": [\n                {\n                    "name": "context"\n                },\n                {\n                    "name": "toolbar"\n                }\n            ]\n        },\n        {\n            "name": "mit",\n            "values": [\n                {\n                    "name": "command"\n                },\n                {\n                    "name": "checkbox"\n                },\n                {\n                    "name": "radio"\n                }\n            ]\n        },\n        {\n            "name": "et",\n            "values": [\n                {\n                    "name": "application/x-www-form-urlencoded"\n                },\n                {\n                    "name": "multipart/form-data"\n                },\n                {\n                    "name": "text/plain"\n                }\n            ]\n        },\n        {\n            "name": "tk",\n            "values": [\n                {\n                    "name": "subtitles"\n                },\n                {\n                    "name": "captions"\n                },\n                {\n                    "name": "descriptions"\n                },\n                {\n                    "name": "chapters"\n                },\n                {\n                    "name": "metadata"\n                }\n            ]\n        },\n        {\n            "name": "pl",\n            "values": [\n                {\n                    "name": "none"\n                },\n                {\n                    "name": "metadata"\n                },\n                {\n                    "name": "auto"\n                }\n            ]\n        },\n        {\n            "name": "sh",\n            "values": [\n                {\n                    "name": "circle"\n                },\n                {\n                    "name": "default"\n                },\n                {\n                    "name": "poly"\n                },\n                {\n                    "name": "rect"\n                }\n            ]\n        },\n        {\n            "name": "xo",\n            "values": [\n                {\n                    "name": "anonymous"\n                },\n                {\n                    "name": "use-credentials"\n                }\n            ]\n        },\n        {\n            "name": "sb",\n            "values": [\n                {\n                    "name": "allow-forms"\n                },\n                {\n                    "name": "allow-modals"\n                },\n                {\n                    "name": "allow-pointer-lock"\n                },\n                {\n                    "name": "allow-popups"\n                },\n                {\n                    "name": "allow-popups-to-escape-sandbox"\n                },\n                {\n                    "name": "allow-same-origin"\n                },\n                {\n                    "name": "allow-scripts"\n                },\n                {\n                    "name": "allow-top-navigation"\n                }\n            ]\n        },\n        {\n            "name": "tristate",\n            "values": [\n                {\n                    "name": "true"\n                },\n                {\n                    "name": "false"\n                },\n                {\n                    "name": "mixed"\n                },\n                {\n                    "name": "undefined"\n                }\n            ]\n        },\n        {\n            "name": "inputautocomplete",\n            "values": [\n                {\n                    "name": "additional-name"\n                },\n                {\n                    "name": "address-level1"\n                },\n                {\n                    "name": "address-level2"\n                },\n                {\n                    "name": "address-level3"\n                },\n                {\n                    "name": "address-level4"\n                },\n                {\n                    "name": "address-line1"\n                },\n                {\n                    "name": "address-line2"\n                },\n                {\n                    "name": "address-line3"\n                },\n                {\n                    "name": "bday"\n                },\n                {\n                    "name": "bday-year"\n                },\n                {\n                    "name": "bday-day"\n                },\n                {\n                    "name": "bday-month"\n                },\n                {\n                    "name": "billing"\n                },\n                {\n                    "name": "cc-additional-name"\n                },\n                {\n                    "name": "cc-csc"\n                },\n                {\n                    "name": "cc-exp"\n                },\n                {\n                    "name": "cc-exp-month"\n                },\n                {\n                    "name": "cc-exp-year"\n                },\n                {\n                    "name": "cc-family-name"\n                },\n                {\n                    "name": "cc-given-name"\n                },\n                {\n                    "name": "cc-name"\n                },\n                {\n                    "name": "cc-number"\n                },\n                {\n                    "name": "cc-type"\n                },\n                {\n                    "name": "country"\n                },\n                {\n                    "name": "country-name"\n                },\n                {\n                    "name": "current-password"\n                },\n                {\n                    "name": "email"\n                },\n                {\n                    "name": "family-name"\n                },\n                {\n                    "name": "fax"\n                },\n                {\n                    "name": "given-name"\n                },\n                {\n                    "name": "home"\n                },\n                {\n                    "name": "honorific-prefix"\n                },\n                {\n                    "name": "honorific-suffix"\n                },\n                {\n                    "name": "impp"\n                },\n                {\n                    "name": "language"\n                },\n                {\n                    "name": "mobile"\n                },\n                {\n                    "name": "name"\n                },\n                {\n                    "name": "new-password"\n                },\n                {\n                    "name": "nickname"\n                },\n                {\n                    "name": "organization"\n                },\n                {\n                    "name": "organization-title"\n                },\n                {\n                    "name": "pager"\n                },\n                {\n                    "name": "photo"\n                },\n                {\n                    "name": "postal-code"\n                },\n                {\n                    "name": "sex"\n                },\n                {\n                    "name": "shipping"\n                },\n                {\n                    "name": "street-address"\n                },\n                {\n                    "name": "tel-area-code"\n                },\n                {\n                    "name": "tel"\n                },\n                {\n                    "name": "tel-country-code"\n                },\n                {\n                    "name": "tel-extension"\n                },\n                {\n                    "name": "tel-local"\n                },\n                {\n                    "name": "tel-local-prefix"\n                },\n                {\n                    "name": "tel-local-suffix"\n                },\n                {\n                    "name": "tel-national"\n                },\n                {\n                    "name": "transaction-amount"\n                },\n                {\n                    "name": "transaction-currency"\n                },\n                {\n                    "name": "url"\n                },\n                {\n                    "name": "username"\n                },\n                {\n                    "name": "work"\n                }\n            ]\n        },\n        {\n            "name": "autocomplete",\n            "values": [\n                {\n                    "name": "inline"\n                },\n                {\n                    "name": "list"\n                },\n                {\n                    "name": "both"\n                },\n                {\n                    "name": "none"\n                }\n            ]\n        },\n        {\n            "name": "current",\n            "values": [\n                {\n                    "name": "page"\n                },\n                {\n                    "name": "step"\n                },\n                {\n                    "name": "location"\n                },\n                {\n                    "name": "date"\n                },\n                {\n                    "name": "time"\n                },\n                {\n                    "name": "true"\n                },\n                {\n                    "name": "false"\n                }\n            ]\n        },\n        {\n            "name": "dropeffect",\n            "values": [\n                {\n                    "name": "copy"\n                },\n                {\n                    "name": "move"\n                },\n                {\n                    "name": "link"\n                },\n                {\n                    "name": "execute"\n                },\n                {\n                    "name": "popup"\n                },\n                {\n                    "name": "none"\n                }\n            ]\n        },\n        {\n            "name": "invalid",\n            "values": [\n                {\n                    "name": "grammar"\n                },\n                {\n                    "name": "false"\n                },\n                {\n                    "name": "spelling"\n                },\n                {\n                    "name": "true"\n                }\n            ]\n        },\n        {\n            "name": "live",\n            "values": [\n                {\n                    "name": "off"\n                },\n                {\n                    "name": "polite"\n                },\n                {\n                    "name": "assertive"\n                }\n            ]\n        },\n        {\n            "name": "orientation",\n            "values": [\n                {\n                    "name": "vertical"\n                },\n                {\n                    "name": "horizontal"\n                },\n                {\n                    "name": "undefined"\n                }\n            ]\n        },\n        {\n            "name": "relevant",\n            "values": [\n                {\n                    "name": "additions"\n                },\n                {\n                    "name": "removals"\n                },\n                {\n                    "name": "text"\n                },\n                {\n                    "name": "all"\n                },\n                {\n                    "name": "additions text"\n                }\n            ]\n        },\n        {\n            "name": "sort",\n            "values": [\n                {\n                    "name": "ascending"\n                },\n                {\n                    "name": "descending"\n                },\n                {\n                    "name": "none"\n                },\n                {\n                    "name": "other"\n                }\n            ]\n        },\n        {\n            "name": "roles",\n            "values": [\n                {\n                    "name": "alert"\n                },\n                {\n                    "name": "alertdialog"\n                },\n                {\n                    "name": "button"\n                },\n                {\n                    "name": "checkbox"\n                },\n                {\n                    "name": "dialog"\n                },\n                {\n                    "name": "gridcell"\n                },\n                {\n                    "name": "link"\n                },\n                {\n                    "name": "log"\n                },\n                {\n                    "name": "marquee"\n                },\n                {\n                    "name": "menuitem"\n                },\n                {\n                    "name": "menuitemcheckbox"\n                },\n                {\n                    "name": "menuitemradio"\n                },\n                {\n                    "name": "option"\n                },\n                {\n                    "name": "progressbar"\n                },\n                {\n                    "name": "radio"\n                },\n                {\n                    "name": "scrollbar"\n                },\n                {\n                    "name": "searchbox"\n                },\n                {\n                    "name": "slider"\n                },\n                {\n                    "name": "spinbutton"\n                },\n                {\n                    "name": "status"\n                },\n                {\n                    "name": "switch"\n                },\n                {\n                    "name": "tab"\n                },\n                {\n                    "name": "tabpanel"\n                },\n                {\n                    "name": "textbox"\n                },\n                {\n                    "name": "timer"\n                },\n                {\n                    "name": "tooltip"\n                },\n                {\n                    "name": "treeitem"\n                },\n                {\n                    "name": "combobox"\n                },\n                {\n                    "name": "grid"\n                },\n                {\n                    "name": "listbox"\n                },\n                {\n                    "name": "menu"\n                },\n                {\n                    "name": "menubar"\n                },\n                {\n                    "name": "radiogroup"\n                },\n                {\n                    "name": "tablist"\n                },\n                {\n                    "name": "tree"\n                },\n                {\n                    "name": "treegrid"\n                },\n                {\n                    "name": "application"\n                },\n                {\n                    "name": "article"\n                },\n                {\n                    "name": "cell"\n                },\n                {\n                    "name": "columnheader"\n                },\n                {\n                    "name": "definition"\n                },\n                {\n                    "name": "directory"\n                },\n                {\n                    "name": "document"\n                },\n                {\n                    "name": "feed"\n                },\n                {\n                    "name": "figure"\n                },\n                {\n                    "name": "group"\n                },\n                {\n                    "name": "heading"\n                },\n                {\n                    "name": "img"\n                },\n                {\n                    "name": "list"\n                },\n                {\n                    "name": "listitem"\n                },\n                {\n                    "name": "math"\n                },\n                {\n                    "name": "none"\n                },\n                {\n                    "name": "note"\n                },\n                {\n                    "name": "presentation"\n                },\n                {\n                    "name": "region"\n                },\n                {\n                    "name": "row"\n                },\n                {\n                    "name": "rowgroup"\n                },\n                {\n                    "name": "rowheader"\n                },\n                {\n                    "name": "separator"\n                },\n                {\n                    "name": "table"\n                },\n                {\n                    "name": "term"\n                },\n                {\n                    "name": "text"\n                },\n                {\n                    "name": "toolbar"\n                },\n                {\n                    "name": "banner"\n                },\n                {\n                    "name": "complementary"\n                },\n                {\n                    "name": "contentinfo"\n                },\n                {\n                    "name": "form"\n                },\n                {\n                    "name": "main"\n                },\n                {\n                    "name": "navigation"\n                },\n                {\n                    "name": "region"\n                },\n                {\n                    "name": "search"\n                },\n                {\n                    "name": "doc-abstract"\n                },\n                {\n                    "name": "doc-acknowledgments"\n                },\n                {\n                    "name": "doc-afterword"\n                },\n                {\n                    "name": "doc-appendix"\n                },\n                {\n                    "name": "doc-backlink"\n                },\n                {\n                    "name": "doc-biblioentry"\n                },\n                {\n                    "name": "doc-bibliography"\n                },\n                {\n                    "name": "doc-biblioref"\n                },\n                {\n                    "name": "doc-chapter"\n                },\n                {\n                    "name": "doc-colophon"\n                },\n                {\n                    "name": "doc-conclusion"\n                },\n                {\n                    "name": "doc-cover"\n                },\n                {\n                    "name": "doc-credit"\n                },\n                {\n                    "name": "doc-credits"\n                },\n                {\n                    "name": "doc-dedication"\n                },\n                {\n                    "name": "doc-endnote"\n                },\n                {\n                    "name": "doc-endnotes"\n                },\n                {\n                    "name": "doc-epigraph"\n                },\n                {\n                    "name": "doc-epilogue"\n                },\n                {\n                    "name": "doc-errata"\n                },\n                {\n                    "name": "doc-example"\n                },\n                {\n                    "name": "doc-footnote"\n                },\n                {\n                    "name": "doc-foreword"\n                },\n                {\n                    "name": "doc-glossary"\n                },\n                {\n                    "name": "doc-glossref"\n                },\n                {\n                    "name": "doc-index"\n                },\n                {\n                    "name": "doc-introduction"\n                },\n                {\n                    "name": "doc-noteref"\n                },\n                {\n                    "name": "doc-notice"\n                },\n                {\n                    "name": "doc-pagebreak"\n                },\n                {\n                    "name": "doc-pagelist"\n                },\n                {\n                    "name": "doc-part"\n                },\n                {\n                    "name": "doc-preface"\n                },\n                {\n                    "name": "doc-prologue"\n                },\n                {\n                    "name": "doc-pullquote"\n                },\n                {\n                    "name": "doc-qna"\n                },\n                {\n                    "name": "doc-subtitle"\n                },\n                {\n                    "name": "doc-tip"\n                },\n                {\n                    "name": "doc-toc"\n                }\n            ]\n        },\n        {\n            "name": "metanames",\n            "values": [\n                {\n                    "name": "application-name"\n                },\n                {\n                    "name": "author"\n                },\n                {\n                    "name": "description"\n                },\n                {\n                    "name": "format-detection"\n                },\n                {\n                    "name": "generator"\n                },\n                {\n                    "name": "keywords"\n                },\n                {\n                    "name": "publisher"\n                },\n                {\n                    "name": "referrer"\n                },\n                {\n                    "name": "robots"\n                },\n                {\n                    "name": "theme-color"\n                },\n                {\n                    "name": "viewport"\n                }\n            ]\n        },\n        {\n            "name": "haspopup",\n            "values": [\n                {\n                    "name": "false",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "(default) Indicates the element does not have a popup."\n                    }\n                },\n                {\n                    "name": "true",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the popup is a menu."\n                    }\n                },\n                {\n                    "name": "menu",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the popup is a menu."\n                    }\n                },\n                {\n                    "name": "listbox",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the popup is a listbox."\n                    }\n                },\n                {\n                    "name": "tree",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the popup is a tree."\n                    }\n                },\n                {\n                    "name": "grid",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the popup is a grid."\n                    }\n                },\n                {\n                    "name": "dialog",\n                    "description": {\n                        "kind": "markdown",\n                        "value": "Indicates the popup is a dialog."\n                    }\n                }\n            ]\n        }\n    ]\n};\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/languageFacts/dataManager.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nvar HTMLDataManager = /** @class */ (function () {\n    function HTMLDataManager(options) {\n        this.dataProviders = [];\n        this.setDataProviders(options.useDefaultDataProvider !== false, options.customDataProviders || []);\n    }\n    HTMLDataManager.prototype.setDataProviders = function (builtIn, providers) {\n        var _a;\n        this.dataProviders = [];\n        if (builtIn) {\n            this.dataProviders.push(new dataProvider_HTMLDataProvider(\'html5\', webCustomData_htmlData));\n        }\n        (_a = this.dataProviders).push.apply(_a, providers);\n    };\n    HTMLDataManager.prototype.getDataProviders = function () {\n        return this.dataProviders;\n    };\n    return HTMLDataManager;\n}());\n\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/htmlLanguageService.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultLanguageServiceOptions = {};\nfunction getLanguageService(options) {\n    if (options === void 0) { options = defaultLanguageServiceOptions; }\n    var dataManager = new HTMLDataManager(options);\n    var htmlHover = new HTMLHover(options, dataManager);\n    var htmlCompletion = new HTMLCompletion(options, dataManager);\n    return {\n        setDataProviders: dataManager.setDataProviders.bind(dataManager),\n        createScanner: createScanner,\n        parseHTMLDocument: function (document) { return parse(document.getText()); },\n        doComplete: htmlCompletion.doComplete.bind(htmlCompletion),\n        doComplete2: htmlCompletion.doComplete2.bind(htmlCompletion),\n        setCompletionParticipants: htmlCompletion.setCompletionParticipants.bind(htmlCompletion),\n        doHover: htmlHover.doHover.bind(htmlHover),\n        format: htmlFormatter_format,\n        findDocumentHighlights: findDocumentHighlights,\n        findDocumentLinks: findDocumentLinks,\n        findDocumentSymbols: findDocumentSymbols,\n        getFoldingRanges: getFoldingRanges,\n        getSelectionRanges: getSelectionRanges,\n        doTagComplete: htmlCompletion.doTagComplete.bind(htmlCompletion),\n        doRename: doRename,\n        findMatchingTagPosition: findMatchingTagPosition,\n        findOnTypeRenameRanges: findLinkedEditingRanges,\n        findLinkedEditingRanges: findLinkedEditingRanges\n    };\n}\nfunction newHTMLDataProvider(id, customData) {\n    return new HTMLDataProvider(id, customData);\n}\nfunction getDefaultHTMLDataProvider() {\n    return newHTMLDataProvider(\'default\', htmlData);\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/htmlWorker.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar htmlWorker_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar htmlWorker_generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\nvar HTMLWorker = /** @class */ (function () {\n    function HTMLWorker(ctx, createData) {\n        this._ctx = ctx;\n        this._languageSettings = createData.languageSettings;\n        this._languageId = createData.languageId;\n        this._languageService = getLanguageService();\n    }\n    HTMLWorker.prototype.doValidation = function (uri) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            return htmlWorker_generator(this, function (_a) {\n                // not yet suported\n                return [2 /*return*/, Promise.resolve([])];\n            });\n        });\n    };\n    HTMLWorker.prototype.doComplete = function (uri, position) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, htmlDocument;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                htmlDocument = this._languageService.parseHTMLDocument(document);\n                return [2 /*return*/, Promise.resolve(this._languageService.doComplete(document, position, htmlDocument, this._languageSettings && this._languageSettings.suggest))];\n            });\n        });\n    };\n    HTMLWorker.prototype.format = function (uri, range, options) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, formattingOptions, textEdits;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                formattingOptions = __assign(__assign({}, this._languageSettings.format), options);\n                textEdits = this._languageService.format(document, range, formattingOptions);\n                return [2 /*return*/, Promise.resolve(textEdits)];\n            });\n        });\n    };\n    HTMLWorker.prototype.doHover = function (uri, position) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, htmlDocument, hover;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                htmlDocument = this._languageService.parseHTMLDocument(document);\n                hover = this._languageService.doHover(document, position, htmlDocument);\n                return [2 /*return*/, Promise.resolve(hover)];\n            });\n        });\n    };\n    HTMLWorker.prototype.findDocumentHighlights = function (uri, position) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, htmlDocument, highlights;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                htmlDocument = this._languageService.parseHTMLDocument(document);\n                highlights = this._languageService.findDocumentHighlights(document, position, htmlDocument);\n                return [2 /*return*/, Promise.resolve(highlights)];\n            });\n        });\n    };\n    HTMLWorker.prototype.findDocumentLinks = function (uri) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, links;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                links = this._languageService.findDocumentLinks(document, null);\n                return [2 /*return*/, Promise.resolve(links)];\n            });\n        });\n    };\n    HTMLWorker.prototype.findDocumentSymbols = function (uri) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, htmlDocument, symbols;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                htmlDocument = this._languageService.parseHTMLDocument(document);\n                symbols = this._languageService.findDocumentSymbols(document, htmlDocument);\n                return [2 /*return*/, Promise.resolve(symbols)];\n            });\n        });\n    };\n    HTMLWorker.prototype.getFoldingRanges = function (uri, context) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, ranges;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                ranges = this._languageService.getFoldingRanges(document, context);\n                return [2 /*return*/, Promise.resolve(ranges)];\n            });\n        });\n    };\n    HTMLWorker.prototype.getSelectionRanges = function (uri, positions) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, ranges;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                ranges = this._languageService.getSelectionRanges(document, positions);\n                return [2 /*return*/, Promise.resolve(ranges)];\n            });\n        });\n    };\n    HTMLWorker.prototype.doRename = function (uri, position, newName) {\n        return htmlWorker_awaiter(this, void 0, void 0, function () {\n            var document, htmlDocument, renames;\n            return htmlWorker_generator(this, function (_a) {\n                document = this._getTextDocument(uri);\n                htmlDocument = this._languageService.parseHTMLDocument(document);\n                renames = this._languageService.doRename(document, position, newName, htmlDocument);\n                return [2 /*return*/, Promise.resolve(renames)];\n            });\n        });\n    };\n    HTMLWorker.prototype._getTextDocument = function (uri) {\n        var models = this._ctx.getMirrorModels();\n        for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n            var model = models_1[_i];\n            if (model.uri.toString() === uri) {\n                return main_TextDocument.create(uri, this._languageId, model.version, model.getValue());\n            }\n        }\n        return null;\n    };\n    return HTMLWorker;\n}());\n\nfunction htmlWorker_create(ctx, createData) {\n    return new HTMLWorker(ctx, createData);\n}\n\n;// CONCATENATED MODULE: ./node_modules/monaco-editor/esm/vs/language/html/html.worker.js\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nself.onmessage = function () {\n    // ignore the first message\n    initialize(function (ctx, createData) {\n        return new HTMLWorker(ctx, createData);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n')}},__webpack_require__={};__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}();var __webpack_exports__={};__webpack_modules__[44](0,__webpack_exports__,__webpack_require__)})();